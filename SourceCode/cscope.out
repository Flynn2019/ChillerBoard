cscope 15 $HOME/Documents/ChillerBoard/SourceCode               0001357847
	@ChillerFWlib/USER/STM32FW/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt8_t
 
	mNVIC_IRQCh™√l
;

48 
uöt8_t
 
	mNVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

49 
uöt8_t
 
	mNVIC_IRQCh™√lSubPri‹ôy
;

50 
Fun˘i⁄ÆSèã
 
	mNVIC_IRQCh™√lCmd
;

51 } 
	tNVIC_InôTy≥Def
;

65 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

66 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

67 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

68 ((
	gVECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

77 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

78 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

79 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

80 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

81 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

82 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

91 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

93 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

95 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

97 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

99 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

102 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

103 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

104 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

105 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

106 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

108 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

110 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

112 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x0007FFFF)

	)

122 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

123 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

124 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

125 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

146 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

147 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

148 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

149 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

150 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mADC_Mode
;

48 
Fun˘i⁄ÆSèã
 
	mADC_SˇnC⁄vMode
;

49 
Fun˘i⁄ÆSèã
 
	mADC_C⁄töuousC⁄vMode
;

50 
uöt32_t
 
	mADC_Exã∫ÆTrigC⁄v
;

51 
uöt32_t
 
	mADC_D©aAlign
;

52 
uöt8_t
 
	mADC_NbrOfCh™√l
;

53 }
	tADC_InôTy≥Def
;

62 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

63 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
ADC2_BASE
) || \

64 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

66 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

67 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

73 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

74 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

75 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

76 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

77 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

78 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

79 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

80 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

81 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

82 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

84 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

85 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

86 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

87 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

88 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

89 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

90 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

91 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

92 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

93 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

106 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

107 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000)

	)

108 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000)

	)

109 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000)

	)

110 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000)

	)

111 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000)

	)

117 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000)

	)

118 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000)

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000)

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000)

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000)

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000)

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000)

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000)

	)

131 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

132 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

133 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

134 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

135 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

136 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

137 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

138 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

139 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

153 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

154 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

155 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

156 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

165 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

166 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

167 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

168 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

169 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

170 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

171 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

172 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

173 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

174 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

175 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

176 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

177 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

178 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

179 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

180 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

181 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

182 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

184 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

185 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

186 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

187 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

188 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

189 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

190 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

191 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

192 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

201 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

202 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

203 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

204 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

205 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

206 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

207 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

208 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

209 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

210 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

211 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

212 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

213 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

214 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

215 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

216 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

229 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000)

	)

230 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000)

	)

231 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000)

	)

232 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000)

	)

233 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000)

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000)

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000)

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000)

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000)

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000)

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000)

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000)

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000)

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

320 ((
IT
Ë=
ADC_IT_JEOC
))

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

27 
	~"°m32f10x.h
"

53 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

54 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

55 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

56 ((
	gLEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

65 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

66 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

67 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

68 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

69 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

70 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

71 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

72 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

81 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

82 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

83 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

84 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

85 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

86 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

87 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

88 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

89 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

90 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

91 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

92 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

93 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

94 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

95 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

96 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

97 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

98 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

99 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

100 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

101 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

102 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

103 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

104 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

105 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

106 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

107 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

108 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

109 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

110 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

111 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

112 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

113 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

114 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

115 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

116 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

117 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

118 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

119 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

120 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

121 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

122 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

124 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

125 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

126 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

127 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

128 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

129 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

130 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

131 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

132 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

133 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

134 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

135 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

136 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

137 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

139 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

160 
BKP_DeInô
();

161 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

162 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

163 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

164 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

165 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

166 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

167 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

168 
FœgSètus
 
BKP_GëFœgSètus
();

169 
BKP_CÀ¨Fœg
();

170 
ITSètus
 
BKP_GëITSètus
();

171 
BKP_CÀ¨ITPídögBô
();

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
CAN1_BASE
))

	)

49 
Fun˘i⁄ÆSèã
 
	mCAN_TTCM
;

50 
Fun˘i⁄ÆSèã
 
	mCAN_ABOM
;

51 
Fun˘i⁄ÆSèã
 
	mCAN_AWUM
;

52 
Fun˘i⁄ÆSèã
 
	mCAN_NART
;

53 
Fun˘i⁄ÆSèã
 
	mCAN_RFLM
;

54 
Fun˘i⁄ÆSèã
 
	mCAN_TXFP
;

55 
uöt8_t
 
	mCAN_Mode
;

56 
uöt8_t
 
	mCAN_SJW
;

57 
uöt8_t
 
	mCAN_BS1
;

58 
uöt8_t
 
	mCAN_BS2
;

59 
uöt16_t
 
	mCAN_PªsˇÀr
;

60 } 
	tCAN_InôTy≥Def
;

68 
uöt8_t
 
	mCAN_FûãrNumbî
;

69 
uöt8_t
 
	mCAN_FûãrMode
;

70 
uöt8_t
 
	mCAN_FûãrSˇÀ
;

71 
uöt16_t
 
	mCAN_FûãrIdHigh
;

72 
uöt16_t
 
	mCAN_FûãrIdLow
;

73 
uöt16_t
 
	mCAN_FûãrMaskIdHigh
;

74 
uöt16_t
 
	mCAN_FûãrMaskIdLow
;

75 
uöt16_t
 
	mCAN_FûãrFIFOAssignmít
;

76 
Fun˘i⁄ÆSèã
 
	mCAN_FûãrA˘iv©i⁄
;

77 } 
	tCAN_FûãrInôTy≥Def
;

85 
uöt32_t
 
	mStdId
;

86 
uöt32_t
 
	mExtId
;

87 
uöt8_t
 
	mIDE
;

88 
uöt8_t
 
	mRTR
;

89 
uöt8_t
 
	mDLC
;

90 
uöt8_t
 
	mD©a
[8];

91 } 
	tC™TxMsg
;

99 
uöt32_t
 
	mStdId
;

100 
uöt32_t
 
	mExtId
;

101 
uöt8_t
 
	mIDE
;

102 
uöt8_t
 
	mRTR
;

103 
uöt8_t
 
	mDLC
;

104 
uöt8_t
 
	mD©a
[8];

105 
uöt8_t
 
	mFMI
;

106 } 
	tC™RxMsg
;

120 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

121 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

131 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

132 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

133 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

134 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

136 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

137 ((
	gMODE
Ë=
CAN_Mode_Sûít
Ë|| ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

146 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

147 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

148 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

149 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

151 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

152 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

161 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

162 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

163 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

164 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

165 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

166 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

167 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

168 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

169 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

170 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

171 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

172 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

173 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

174 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

175 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

176 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

178 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

187 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

188 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

189 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

190 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

191 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

192 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

193 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

194 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

196 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

206 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

216 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

226 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

227 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

229 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

230 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

239 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

240 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

242 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

243 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

253 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

254 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

255 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

256 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

266 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

267 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

268 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

269 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

279 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

280 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

281 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

291 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

292 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

293 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

303 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

304 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

305 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

306 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

317 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

319 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

329 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

330 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

340 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

341 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

351 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

352 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

353 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

355 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

356 ((
FLAG
Ë=
CAN_FLAG_BOF
))

366 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

367 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

368 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

369 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

370 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

371 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

372 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

373 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

374 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

375 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

376 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

377 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

378 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

379 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

380 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

381 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

382 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

384 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

385 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

386 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

387 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

388 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

389 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

390 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

392 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

393 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

394 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

395 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

396 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

397 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

418 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

419 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

420 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

421 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

422 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

423 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

424 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

425 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

426 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

427 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

428 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

429 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

431 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

432 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

433 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

434 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

435 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

27 
	~"°m32f10x.h
"

65 
CRC_Re£tDR
();

66 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

67 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

68 
uöt32_t
 
CRC_GëCRC
();

69 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

70 
uöt8_t
 
CRC_GëIDRegi°î
();

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDAC_Triggî
;

48 
uöt32_t
 
	mDAC_WaveGíî©i⁄
;

49 
uöt32_t
 
	mDAC_LFSRUnmask_TrüngÀAm∂ôude
;

50 
uöt32_t
 
	mDAC_OuçutBuf„r
;

51 }
	tDAC_InôTy≥Def
;

65 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000)

	)

66 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004)

	)

67 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000C)

	)

68 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014)

	)

69 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001C)

	)

70 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024)

	)

71 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002C)

	)

72 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034)

	)

73 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003C)

	)

75 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

76 ((
	gTRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

77 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

78 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

79 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

80 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

81 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

82 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

83 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

93 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

94 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

95 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

96 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

97 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

98 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

107 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000)

	)

108 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100)

	)

109 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200)

	)

110 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300)

	)

111 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400)

	)

112 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500)

	)

113 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600)

	)

114 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700)

	)

115 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800)

	)

116 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900)

	)

117 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00)

	)

118 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00)

	)

119 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000)

	)

120 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100)

	)

121 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200)

	)

122 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300)

	)

123 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400)

	)

124 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500)

	)

125 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600)

	)

126 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700)

	)

127 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800)

	)

128 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900)

	)

129 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00)

	)

130 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00)

	)

132 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

133 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

134 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

135 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

136 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

137 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

138 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

139 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

140 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

141 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

142 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

143 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

144 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

145 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

146 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

147 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

148 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

149 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

150 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

151 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

152 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

153 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

154 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

155 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

164 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

165 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

166 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

167 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

176 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

177 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

178 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

179 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

188 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

189 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

190 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

192 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

193 ((
ALIGN
Ë=
DAC_Align_8b_R
))

202 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

203 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

204 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

205 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

214 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

235 
DAC_DeInô
();

236 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

237 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

238 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

239 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

240 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

241 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

242 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

243 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

244 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

245 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

246 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

27 
	~"°m32f10x.h
"

49 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

50 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

51 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

52 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

53 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

54 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

55 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

56 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

57 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

58 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

59 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

60 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

61 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

62 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

63 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

64 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

66 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFE000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

83 
uöt32_t
 
DBGMCU_GëREVID
();

84 
uöt32_t
 
DBGMCU_GëDEVID
();

85 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDMA_PîùhîÆBa£Addr
;

48 
uöt32_t
 
	mDMA_Mem‹yBa£Addr
;

49 
uöt32_t
 
	mDMA_DIR
;

50 
uöt32_t
 
	mDMA_Buf„rSize
;

51 
uöt32_t
 
	mDMA_PîùhîÆInc
;

52 
uöt32_t
 
	mDMA_Mem‹yInc
;

53 
uöt32_t
 
	mDMA_PîùhîÆD©aSize
;

54 
uöt32_t
 
	mDMA_Mem‹yD©aSize
;

55 
uöt32_t
 
	mDMA_Mode
;

56 
uöt32_t
 
	mDMA_Pri‹ôy
;

57 
uöt32_t
 
	mDMA_M2M
;

58 }
	tDMA_InôTy≥Def
;

68 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
DMA1_Ch™√l1_BASE
Ë|| \

	)

69 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
DMA1_Ch™√l2_BASE
) || \

70 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l3_BASE
) || \

71 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l4_BASE
) || \

72 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l5_BASE
) || \

73 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l6_BASE
) || \

74 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l7_BASE
) || \

75 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l1_BASE
) || \

76 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l5_BASE
))

85 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

86 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

87 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

88 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

97 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

98 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

99 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

100 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

109 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

110 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

111 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

112 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

121 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

122 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

123 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

124 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

125 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

126 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

135 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

136 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

137 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

138 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

139 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

140 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

149 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

150 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

151 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

160 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

161 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

162 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

163 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

164 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

165 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

166 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

167 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

176 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

177 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

188 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

189 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

190 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

197 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

198 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

199 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

200 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

201 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

202 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

203 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

204 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

205 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

206 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

207 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

208 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

209 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

210 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

211 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

212 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

213 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

214 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

215 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

216 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

217 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

218 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

219 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

220 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

221 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

222 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

223 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

224 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

230 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

231 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

232 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

233 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

234 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

235 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

236 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

237 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

238 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

239 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

240 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

241 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

242 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

243 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

244 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

245 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

246 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

247 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

248 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

249 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

251 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

253 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

254 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

255 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

256 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

257 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

258 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

259 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

260 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

261 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

262 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

263 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

264 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

265 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

266 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

267 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

268 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

269 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

270 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

271 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

272 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

273 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

274 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

275 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

276 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

290 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

293 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

294 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

295 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

296 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

297 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

298 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

299 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

300 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

301 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

302 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

303 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

304 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

305 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

306 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

307 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

308 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

309 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

310 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

311 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

312 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

313 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

314 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

315 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

316 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

317 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

323 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

324 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

325 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

326 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

327 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

328 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

329 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

330 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

331 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

332 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

333 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

334 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

335 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

336 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

337 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

338 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

339 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

340 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

341 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

342 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

344 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

346 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

347 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

348 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

349 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

350 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

351 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

352 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

353 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

354 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

355 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

356 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

360 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

361 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

362 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

363 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

364 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

365 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

366 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

367 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

368 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

378 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

400 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

401 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

402 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

403 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

405 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

406 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

407 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

408 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

409 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

27 
	~"°m32f10x.h
"

47 
	mEXTI_Mode_I¡îru±
 = 0x00,

48 
	mEXTI_Mode_Evít
 = 0x04

49 }
	tEXTIMode_Ty≥Def
;

51 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

59 
	mEXTI_Triggî_Risög
 = 0x08,

60 
	mEXTI_Triggî_FÆlög
 = 0x0C,

61 
	mEXTI_Triggî_Risög_FÆlög
 = 0x10

62 }
	tEXTITriggî_Ty≥Def
;

64 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

65 ((
	gTRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

66 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

73 
uöt32_t
 
EXTI_Löe
;

74 
EXTIMode_Ty≥Def
 
	mEXTI_Mode
;

75 
EXTITriggî_Ty≥Def
 
	mEXTI_Triggî
;

76 
Fun˘i⁄ÆSèã
 
	mEXTI_LöeCmd
;

77 }
	tEXTI_InôTy≥Def
;

91 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

92 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

93 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

94 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

95 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

96 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

97 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

98 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

99 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

100 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

101 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

102 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

103 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

104 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

105 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

106 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

107 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

109 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

111 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

115 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF80000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

117 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

118 ((
	gLINE
Ë=
EXTI_Löe2
Ë|| ((
LINE
Ë=
EXTI_Löe3
) || \

119 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

120 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

121 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

122 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

123 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

124 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

125 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

126 ((
LINE
Ë=
EXTI_Löe18
))

148 
EXTI_DeInô
();

149 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

150 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

151 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

152 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

153 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

154 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

155 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

27 
	~"°m32f10x.h
"

47 
	mFLASH_BUSY
 = 1,

48 
	mFLASH_ERROR_PG
,

49 
	mFLASH_ERROR_WRP
,

50 
	mFLASH_COMPLETE
,

51 
	mFLASH_TIMEOUT


52 }
	tFLASH_Sètus
;

66 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

67 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

68 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

69 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

70 ((
	gLATENCY
Ë=
FLASH_L©ícy_1
) || \

71 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

80 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

81 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

82 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

83 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

92 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

93 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

94 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

95 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

106 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

107 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

108 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

109 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

110 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

111 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

112 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

113 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

114 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

115 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

116 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

117 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

118 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

119 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

120 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

121 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

122 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

123 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

125 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

127 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

128 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

130 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

131 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

132 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

133 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

134 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

135 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

142 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

143 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

144 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

145 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

146 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

147 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

148 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

149 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

150 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

151 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

152 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

153 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

154 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

155 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

156 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

157 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

158 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

159 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

160 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

161 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

162 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

163 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

164 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

165 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

166 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

167 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

168 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

169 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

170 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

171 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

172 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

173 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

175 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

177 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x0807FFFF))

	)

179 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

189 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

190 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

191 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

201 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

202 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

203 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

213 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

214 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

215 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

225 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

226 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

227 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

237 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

238 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

239 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

240 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

241 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

243 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

244 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

245 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

246 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

268 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

269 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

270 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

271 
FLASH_U∆ock
();

272 
FLASH_Lock
();

273 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

274 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

275 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

276 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

277 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

278 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

279 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

280 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

282 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

283 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

284 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

285 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

286 
FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
);

288 
FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
);

289 
FLASH_Sètus
 
FLASH_GëSètus
();

290 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mFSMC_AddªssSëupTime
;

48 
uöt32_t
 
	mFSMC_AddªssHﬁdTime
;

49 
uöt32_t
 
	mFSMC_D©aSëupTime
;

50 
uöt32_t
 
	mFSMC_BusTu∫AroundDuøti⁄
;

51 
uöt32_t
 
	mFSMC_CLKDivisi⁄
;

52 
uöt32_t
 
	mFSMC_D©aL©ícy
;

53 
uöt32_t
 
	mFSMC_Ac˚ssMode
;

54 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

62 
uöt32_t
 
	mFSMC_B™k
;

63 
uöt32_t
 
	mFSMC_D©aAddªssMux
;

64 
uöt32_t
 
	mFSMC_Mem‹yTy≥
;

65 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

66 
uöt32_t
 
	mFSMC_Bur°Ac˚ssMode
;

67 
uöt32_t
 
	mFSMC_WaôSig«lPﬁ¨ôy
;

68 
uöt32_t
 
	mFSMC_WøpMode
;

69 
uöt32_t
 
	mFSMC_WaôSig«lA˘ive
;

70 
uöt32_t
 
	mFSMC_WrôeO≥øti⁄
;

71 
uöt32_t
 
	mFSMC_WaôSig«l
;

72 
uöt32_t
 
	mFSMC_ExãndedMode
;

73 
uöt32_t
 
	mFSMC_WrôeBur°
;

74 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_RódWrôeTimögSåu˘
;

75 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_WrôeTimögSåu˘
;

76 }
	tFSMC_NORSRAMInôTy≥Def
;

84 
uöt32_t
 
	mFSMC_SëupTime
;

85 
uöt32_t
 
	mFSMC_WaôSëupTime
;

86 
uöt32_t
 
	mFSMC_HﬁdSëupTime
;

87 
uöt32_t
 
	mFSMC_HiZSëupTime
;

88 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

96 
uöt32_t
 
	mFSMC_B™k
;

97 
uöt32_t
 
	mFSMC_Waô„©uª
;

98 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

99 
uöt32_t
 
	mFSMC_ECC
;

100 
uöt32_t
 
	mFSMC_ECCPageSize
;

101 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

102 
uöt32_t
 
	mFSMC_TARSëupTime
;

103 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

104 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

105 }
	tFSMC_NANDInôTy≥Def
;

113 
uöt32_t
 
	mFSMC_Waô„©uª
;

114 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

115 
uöt32_t
 
	mFSMC_TARSëupTime
;

116 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

117 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

118 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_IOS∑˚TimögSåu˘
;

119 }
	tFSMC_PCCARDInôTy≥Def
;

133 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

134 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

135 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

136 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

137 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

138 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

139 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

141 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

142 ((
	gBANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

143 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

144 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

146 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

147 ((
BANK
Ë=
FSMC_B™k3_NAND
))

149 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

150 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

151 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

153 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

154 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

155 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

168 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

169 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

170 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

171 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

181 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

182 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

183 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

184 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

185 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

186 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

196 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

197 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

199 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

209 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

210 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

211 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

212 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

221 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

222 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

223 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

224 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

234 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

235 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

236 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

237 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

247 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

249 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

250 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

260 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

261 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

262 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

263 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

273 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

274 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

275 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

276 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

285 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

286 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

288 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

289 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

299 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

300 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

301 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

302 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

311 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

321 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

331 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

341 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

351 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

361 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

371 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

372 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

373 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

374 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

375 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

376 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

377 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

378 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

396 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

397 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

398 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

399 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

408 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

409 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

410 
	#IS_FSMC_DATA_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

411 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

421 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

422 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

423 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

424 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

434 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

435 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

436 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

437 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

438 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

439 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

440 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

441 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

442 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

443 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

444 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

445 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

455 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

465 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

475 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

485 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

495 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

505 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

515 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

516 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

517 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

518 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

519 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

520 ((
IT
Ë=
FSMC_IT_Levñ
) || \

521 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

530 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

531 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

532 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

533 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

534 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

535 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

536 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

537 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

539 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

565 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

566 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

567 
FSMC_PCCARDDeInô
();

568 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

569 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

570 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

571 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

572 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

573 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

574 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

578 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

579 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

581 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

582 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

583 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
GPIOA_BASE
Ë|| \

	)

42 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
GPIOB_BASE
) || \

43 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOC_BASE
) || \

44 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOD_BASE
) || \

45 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOE_BASE
) || \

46 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOF_BASE
) || \

47 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOG_BASE
))

55 
GPIO_S≥ed_10MHz
 = 1,

56 
	mGPIO_S≥ed_2MHz
,

57 
	mGPIO_S≥ed_50MHz


58 }
	tGPIOS≥ed_Ty≥Def
;

59 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

60 ((
	gSPEED
Ë=
GPIO_S≥ed_50MHz
))

67 { 
GPIO_Mode_AIN
 = 0x0,

68 
	mGPIO_Mode_IN_FLOATING
 = 0x04,

69 
	mGPIO_Mode_IPD
 = 0x28,

70 
	mGPIO_Mode_IPU
 = 0x48,

71 
	mGPIO_Mode_Out_OD
 = 0x14,

72 
	mGPIO_Mode_Out_PP
 = 0x10,

73 
	mGPIO_Mode_AF_OD
 = 0x1C,

74 
	mGPIO_Mode_AF_PP
 = 0x18

75 }
	tGPIOMode_Ty≥Def
;

77 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

78 ((
	gMODE
Ë=
GPIO_Mode_IPD
Ë|| ((
MODE
Ë=
GPIO_Mode_IPU
) || \

79 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

80 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

88 
uöt16_t
 
GPIO_Pö
;

89 
GPIOS≥ed_Ty≥Def
 
	mGPIO_S≥ed
;

90 
GPIOMode_Ty≥Def
 
	mGPIO_Mode
;

91 }
	tGPIO_InôTy≥Def
;

98 { 
	mBô_RESET
 = 0,

99 
	mBô_SET


100 }
	tBôA˘i⁄
;

102 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

116 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

117 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

118 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

119 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

120 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

121 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

122 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

123 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

124 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

125 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

126 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

127 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

128 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

129 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

130 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

131 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

132 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

134 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

136 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

137 ((
	gPIN
Ë=
GPIO_Pö_1
) || \

138 ((
PIN
Ë=
GPIO_Pö_2
) || \

139 ((
PIN
Ë=
GPIO_Pö_3
) || \

140 ((
PIN
Ë=
GPIO_Pö_4
) || \

141 ((
PIN
Ë=
GPIO_Pö_5
) || \

142 ((
PIN
Ë=
GPIO_Pö_6
) || \

143 ((
PIN
Ë=
GPIO_Pö_7
) || \

144 ((
PIN
Ë=
GPIO_Pö_8
) || \

145 ((
PIN
Ë=
GPIO_Pö_9
) || \

146 ((
PIN
Ë=
GPIO_Pö_10
) || \

147 ((
PIN
Ë=
GPIO_Pö_11
) || \

148 ((
PIN
Ë=
GPIO_Pö_12
) || \

149 ((
PIN
Ë=
GPIO_Pö_13
) || \

150 ((
PIN
Ë=
GPIO_Pö_14
) || \

151 ((
PIN
Ë=
GPIO_Pö_15
))

161 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

162 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

163 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

164 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

165 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

166 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

167 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

168 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

169 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

170 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

171 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

172 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

173 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

174 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

175 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

176 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

177 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

179 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

180 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

181 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

182 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

183 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

184 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

185 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

187 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

188 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

189 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

190 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

191 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

192 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

193 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

194 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

195 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

196 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

197 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

198 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
)|| \

199 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
))

209 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

210 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

211 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

212 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

213 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

214 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

215 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

216 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

217 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

218 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

219 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

220 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

222 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

223 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

224 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

225 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

226 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

227 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

228 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

238 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

239 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

240 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

241 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

242 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

243 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

244 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

245 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

246 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

247 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

248 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

249 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

250 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

251 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

252 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

253 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

255 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

256 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

257 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

258 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

259 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

260 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

261 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

262 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

263 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

264 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

265 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

266 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

267 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

268 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

269 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

270 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

292 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

293 
GPIO_AFIODeInô
();

294 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

295 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

296 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

297 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

298 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

299 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

300 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

301 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

302 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

303 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

304 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

305 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

306 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

307 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

308 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mI2C_Mode
;

48 
uöt16_t
 
	mI2C_DutyCy˛e
;

49 
uöt16_t
 
	mI2C_OwnAddªss1
;

50 
uöt16_t
 
	mI2C_Ack
;

51 
uöt16_t
 
	mI2C_AcknowÀdgedAddªss
;

52 
uöt32_t
 
	mI2C_ClockS≥ed
;

53 }
	tI2C_InôTy≥Def
;

64 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
I2C1_BASE
Ë|| \

	)

65 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
I2C2_BASE
))

70 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

71 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

72 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

73 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

74 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

75 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

84 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000)

	)

85 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFF)

	)

86 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

87 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

96 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

97 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

98 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

108 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

109 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

110 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

111 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

120 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

121 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

122 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

123 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

132 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

133 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

134 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

135 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

136 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

137 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

138 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

139 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

140 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

141 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

142 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

143 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

144 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

145 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

146 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

147 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

148 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

149 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

158 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

159 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

160 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

161 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

170 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

171 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

172 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

173 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

182 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

183 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

184 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

185 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

194 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

195 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

196 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

197 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

198 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

199 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

200 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

201 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

202 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

203 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

204 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

205 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

206 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

207 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

209 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

211 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

212 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

213 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

214 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

215 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

216 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

217 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

230 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

231 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

232 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

233 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

234 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

235 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

236 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

242 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

243 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

244 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

245 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

246 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

247 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

248 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

249 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

250 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

251 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

252 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

253 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

254 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

255 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

257 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

259 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

260 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

261 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

262 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

263 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

264 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

265 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

266 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

267 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

268 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

269 ((
FLAG
Ë=
I2C_FLAG_SB
))

282 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

283 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

284 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

285 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

286 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

292 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

298 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

304 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

310 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

316 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

317 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

323 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

329 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

335 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

341 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

347 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

349 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

350 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

351 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

352 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

353 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

354 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

355 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

356 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

357 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

358 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

359 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

360 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

361 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

362 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

363 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

364 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

365 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

366 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

367 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

368 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

377 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

386 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

407 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

408 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

409 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

410 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

416 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

417 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

418 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

420 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

421 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

422 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

423 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

424 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

425 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

426 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

427 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

428 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

430 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

433 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

434 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

435 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

436 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

437 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

438 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

30 
vu32
 
L⁄gKeyTime
;

31 
vu32
 
Fa°AddTime
;

33 
vu32
 
MíuTime
;

34 
vu32
 
LogoTime
;

35 
vu32
 
AutoTime
;

36 
vu32
 
Com¥ess‹TimeCou¡
;

39 
	#Com¥ess‹DñayTime
 (10*120)

40 

	)

43 
NMI_H™dÀr
();

44 
H¨dFau…_H™dÀr
();

45 
MemM™age_H™dÀr
();

46 
BusFau…_H™dÀr
();

47 
UßgeFau…_H™dÀr
();

48 
SVC_H™dÀr
();

49 
DebugM⁄_H™dÀr
();

50 
PídSV_H™dÀr
();

51 
SysTick_H™dÀr
();

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

54 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

55 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

56 ((
	gACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

65 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

66 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

67 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

68 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

69 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

70 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

71 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

72 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

73 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

74 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

75 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

76 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

87 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

88 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

89 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

90 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

111 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

112 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

113 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

114 
IWDG_RñﬂdCou¡î
();

115 
IWDG_E«bÀ
();

116 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

27 
	~"°m32f10x.h
"

53 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

54 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

55 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

56 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

57 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

58 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

59 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

60 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

61 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

62 ((
	gLEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((
LEVEL
Ë=
PWR_PVDLevñ_2V5
)|| \

63 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

64 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

73 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

74 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

75 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

76 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

85 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

86 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

87 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

97 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

98 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

99 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

100 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

101 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

103 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

124 
PWR_DeInô
();

125 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

126 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

127 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

128 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

129 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

130 
PWR_E¡îSTANDBYMode
();

131 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

132 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

27 
	~"°m32f10x.h
"

43 
uöt32_t
 
	mSYSCLK_Fªquícy
;

44 
uöt32_t
 
	mHCLK_Fªquícy
;

45 
uöt32_t
 
	mPCLK1_Fªquícy
;

46 
uöt32_t
 
	mPCLK2_Fªquícy
;

47 
uöt32_t
 
	mADCCLK_Fªquícy
;

48 }
	tRCC_ClocksTy≥Def
;

62 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

63 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

64 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

65 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

66 ((
	gHSE
Ë=
RCC_HSE_By∑ss
))

76 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

77 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

78 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

79 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

80 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

81 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

90 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

91 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

92 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

93 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

94 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

95 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

96 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

97 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

98 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

99 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

100 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

101 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

102 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

103 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

104 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

105 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

106 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

107 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

108 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

109 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

110 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

111 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

112 ((
MUL
Ë=
RCC_PLLMul_16
))

121 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

122 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

123 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

124 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

125 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

126 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

135 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

136 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

137 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

138 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

139 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

140 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

141 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

142 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

143 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

144 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

145 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

146 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

147 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

148 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

157 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

158 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

159 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

160 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

161 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

162 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

163 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

164 ((
PCLK
Ë=
RCC_HCLK_Div16
))

173 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

174 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

175 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

176 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

177 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

178 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

179 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

180 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

181 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

182 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

184 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

193 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

194 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

195 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

196 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

205 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

207 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

208 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

209 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

210 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

219 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

220 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

221 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

222 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

223 ((
LSE
Ë=
RCC_LSE_By∑ss
))

232 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

233 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

235 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

236 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

237 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

246 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

247 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

248 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

249 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

250 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

251 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

252 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

253 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

262 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

263 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

264 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

265 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

266 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

267 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

268 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

269 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

270 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

271 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

272 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

273 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

274 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

275 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

276 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

277 
	#RCC_APB2Pîùh_ALL
 ((
uöt32_t
)0x0000FFFD)

	)

279 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFF0002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

288 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

289 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

290 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

291 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

292 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

293 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

294 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

295 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

296 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

297 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

298 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

299 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

300 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

301 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

302 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

303 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

304 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

305 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

306 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

307 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

308 
	#RCC_APB1Pîùh_ALL
 ((
uöt32_t
)0x3AFEC83F)

	)

310 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC50137C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

319 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

321 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

322 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

323 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

324 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

325 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

326 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

335 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

336 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

337 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

338 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

339 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

340 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

341 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

342 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

343 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

344 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

345 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

346 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

347 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

348 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

349 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

350 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

351 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

353 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

374 
RCC_DeInô
();

375 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

376 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

377 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

378 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

380 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

382 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

383 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

384 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

385 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

386 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

388 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

389 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

390 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

392 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

394 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

395 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

396 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

397 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

398 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

402 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

403 
RCC_CÀ¨Fœg
();

404 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

405 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

27 
	~"°m32f10x.h
"

53 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

54 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

55 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

56 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

57 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

58 ((
	gIT
Ë=
RTC_IT_SEC
))

67 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

68 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

69 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

70 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

71 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

72 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

73 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

74 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

75 ((
FLAG
Ë=
RTC_FLAG_SEC
))

76 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

98 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

99 
RTC_E¡îC⁄figMode
();

100 
RTC_ExôC⁄figMode
();

101 
uöt32_t
 
RTC_GëCou¡î
();

102 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

103 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

104 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

105 
uöt32_t
 
RTC_GëDividî
();

106 
RTC_WaôF‹La°Task
();

107 
RTC_WaôF‹Synchro
();

108 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

109 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

110 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

111 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

27 
	~"°m32f10x.h
"

43 
uöt8_t
 
	mSDIO_ClockDiv
;

44 
uöt32_t
 
	mSDIO_ClockEdge
;

45 
uöt32_t
 
	mSDIO_ClockBy∑ss
;

46 
uöt32_t
 
	mSDIO_ClockPowîSave
;

47 
uöt32_t
 
	mSDIO_BusWide
;

48 
uöt32_t
 
	mSDIO_H¨dw¨eFlowC⁄åﬁ
;

49 } 
	tSDIO_InôTy≥Def
;

53 
uöt32_t
 
	mSDIO_Argumít
;

54 
uöt32_t
 
	mSDIO_CmdIndex
;

55 
uöt32_t
 
	mSDIO_Re•⁄£
;

56 
uöt32_t
 
	mSDIO_Waô
;

57 
uöt32_t
 
	mSDIO_CPSM
;

58 } 
	tSDIO_CmdInôTy≥Def
;

62 
uöt32_t
 
	mSDIO_D©aTimeOut
;

63 
uöt32_t
 
	mSDIO_D©aLígth
;

64 
uöt32_t
 
	mSDIO_D©aBlockSize
;

65 
uöt32_t
 
	mSDIO_Tøns„rDú
;

66 
uöt32_t
 
	mSDIO_Tøns„rMode
;

67 
uöt32_t
 
	mSDIO_DPSM
;

68 } 
	tSDIO_D©aInôTy≥Def
;

82 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

83 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

84 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

85 ((
	gEDGE
Ë=
SDIO_ClockEdge_FÆlög
))

94 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

95 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

96 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

97 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

106 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

107 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

108 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

109 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

118 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

119 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

120 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

121 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

122 ((
WIDE
Ë=
SDIO_BusWide_8b
))

132 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

133 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

134 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

135 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

144 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

145 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

146 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

156 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

157 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

158 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

159 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

160 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

161 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

162 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

163 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

164 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

165 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

166 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

167 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

168 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

169 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

170 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

171 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

172 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

173 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

174 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

175 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

176 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

177 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

178 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

179 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

180 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

189 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

198 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

199 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

200 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

201 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

202 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

203 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

212 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

213 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

214 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

215 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

216 ((
WAIT
Ë=
SDIO_Waô_Píd
))

225 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

226 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

227 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

236 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

237 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

238 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

239 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

240 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

241 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

250 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

259 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

260 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

261 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

262 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

263 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

264 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

265 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

266 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

267 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

268 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

269 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

270 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

271 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

272 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

273 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

274 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

275 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

276 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

277 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

278 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

279 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

280 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

281 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

282 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

283 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

284 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

285 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

286 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

287 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

288 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

297 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

299 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

300 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

309 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

310 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

311 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

312 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

321 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

322 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

323 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

332 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

333 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

334 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

335 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

336 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

337 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

338 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

339 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

340 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

341 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

342 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

343 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

344 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

345 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

346 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

347 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

348 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

349 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

350 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

351 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

352 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

353 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

354 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

355 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

356 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

357 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

358 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

359 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

360 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

361 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

362 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

363 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

364 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

365 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

366 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

367 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

368 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

369 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

370 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

371 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

372 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

373 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

374 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

375 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

376 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

377 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

378 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

379 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

381 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

383 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

384 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

385 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

386 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

387 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

388 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

389 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

390 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

391 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

392 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

393 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

394 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

395 ((
IT
Ë=
SDIO_IT_TXACT
) || \

396 ((
IT
Ë=
SDIO_IT_RXACT
) || \

397 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

398 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

399 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

400 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

401 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

402 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

403 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

404 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

405 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

406 ((
IT
Ë=
SDIO_IT_CEATAEND
))

408 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

418 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

419 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

420 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

421 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

442 
SDIO_DeInô
();

443 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

444 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

445 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

447 
uöt32_t
 
SDIO_GëPowîSèã
();

448 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

451 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

452 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

453 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

454 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

455 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

456 
uöt32_t
 
SDIO_GëD©aCou¡î
();

457 
uöt32_t
 
SDIO_RódD©a
();

458 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

459 
uöt32_t
 
SDIO_GëFIFOCou¡
();

460 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

461 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

463 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

464 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

466 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

467 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

469 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

470 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

471 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mSPI_Dúe˘i⁄
;

48 
uöt16_t
 
	mSPI_Mode
;

49 
uöt16_t
 
	mSPI_D©aSize
;

50 
uöt16_t
 
	mSPI_CPOL
;

51 
uöt16_t
 
	mSPI_CPHA
;

52 
uöt16_t
 
	mSPI_NSS
;

53 
uöt16_t
 
	mSPI_BaudR©ePªsˇÀr
;

54 
uöt16_t
 
	mSPI_Fú°Bô
;

55 
uöt16_t
 
	mSPI_CRCPﬁynomül
;

56 }
	tSPI_InôTy≥Def
;

64 
uöt16_t
 
	mI2S_Mode
;

65 
uöt16_t
 
	mI2S_Sènd¨d
;

66 
uöt16_t
 
	mI2S_D©aF‹m©
;

67 
uöt16_t
 
	mI2S_MCLKOuçut
;

68 
uöt16_t
 
	mI2S_AudioFªq
;

69 
uöt16_t
 
	mI2S_CPOL
;

70 }
	tI2S_InôTy≥Def
;

80 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI1_BASE
Ë|| \

	)

81 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
SPI2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

83 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI2_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

90 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

91 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

92 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

93 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

94 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

95 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

96 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

97 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

106 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

107 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

108 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

109 ((
MODE
Ë=
SPI_Mode_Sœve
))

118 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

119 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

120 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

121 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

130 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

131 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

132 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

133 ((
CPOL
Ë=
SPI_CPOL_High
))

142 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

143 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

144 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

145 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

154 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

155 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

157 ((
NSS
Ë=
SPI_NSS_H¨d
))

166 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

167 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

168 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

169 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

170 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

171 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

172 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

173 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

174 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

175 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

176 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

177 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

178 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

179 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

180 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

181 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

190 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

191 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

192 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

193 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

202 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

203 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

204 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

205 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

206 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

207 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

208 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

209 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

218 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

219 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

220 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

221 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

222 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

223 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

224 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

225 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

226 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

227 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

236 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

237 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

238 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

239 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

240 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

241 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

242 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

243 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

252 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

253 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

254 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

255 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

264 
	#I2S_AudioFªq_48k
 ((
uöt16_t
)48000)

	)

265 
	#I2S_AudioFªq_44k
 ((
uöt16_t
)44100)

	)

266 
	#I2S_AudioFªq_22k
 ((
uöt16_t
)22050)

	)

267 
	#I2S_AudioFªq_16k
 ((
uöt16_t
)16000)

	)

268 
	#I2S_AudioFªq_8k
 ((
uöt16_t
)8000)

	)

269 
	#I2S_AudioFªq_DeÁu…
 ((
uöt16_t
)2)

	)

270 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_48k
Ë|| \

	)

271 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

272 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

273 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

274 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

275 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

284 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

285 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

286 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

287 ((
CPOL
Ë=
I2S_CPOL_High
))

296 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

297 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

298 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

307 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

308 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

309 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

310 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

319 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

320 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

321 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

330 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

331 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

332 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

333 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

342 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

343 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

344 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

345 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

346 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

347 ((
IT
Ë=
SPI_I2S_IT_ERR
))

348 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

349 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

350 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

351 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

352 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

353 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

354 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

355 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

364 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

365 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

366 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

367 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

368 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

369 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

370 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

371 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

372 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

373 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

374 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

375 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

376 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

385 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

406 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

407 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

408 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

409 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

410 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

411 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

416 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

417 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

418 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

420 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

421 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

422 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

423 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

424 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

425 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

426 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

427 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

428 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mTIM_PªsˇÀr
;

48 
uöt16_t
 
	mTIM_Cou¡îMode
;

49 
uöt16_t
 
	mTIM_Pîiod
;

50 
uöt16_t
 
	mTIM_ClockDivisi⁄
;

51 
uöt8_t
 
	mTIM_Rïëôi⁄Cou¡î
;

52 } 
	tTIM_TimeBa£InôTy≥Def
;

60 
uöt16_t
 
	mTIM_OCMode
;

61 
uöt16_t
 
	mTIM_OuçutSèã
;

62 
uöt16_t
 
	mTIM_OuçutNSèã
;

63 
uöt16_t
 
	mTIM_Pul£
;

64 
uöt16_t
 
	mTIM_OCPﬁ¨ôy
;

65 
uöt16_t
 
	mTIM_OCNPﬁ¨ôy
;

66 
uöt16_t
 
	mTIM_OCIdÀSèã
;

67 
uöt16_t
 
	mTIM_OCNIdÀSèã
;

68 } 
	tTIM_OCInôTy≥Def
;

76 
uöt16_t
 
	mTIM_Ch™√l
;

77 
uöt16_t
 
	mTIM_ICPﬁ¨ôy
;

78 
uöt16_t
 
	mTIM_ICSñe˘i⁄
;

79 
uöt16_t
 
	mTIM_ICPªsˇÀr
;

80 
uöt16_t
 
	mTIM_ICFûãr
;

81 } 
	tTIM_ICInôTy≥Def
;

89 
uöt16_t
 
	mTIM_OSSRSèã
;

90 
uöt16_t
 
	mTIM_OSSISèã
;

91 
uöt16_t
 
	mTIM_LOCKLevñ
;

92 
uöt16_t
 
	mTIM_DódTime
;

93 
uöt16_t
 
	mTIM_Bªak
;

94 
uöt16_t
 
	mTIM_BªakPﬁ¨ôy
;

95 
uöt16_t
 
	mTIM_Autom©icOuçut
;

96 } 
	tTIM_BDTRInôTy≥Def
;

102 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

103 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM2_BASE
) || \

104 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

105 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

106 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

107 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
) || \

108 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM7_BASE
) || \

109 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

110 
	#IS_TIM_18_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

111 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

112 
	#IS_TIM_123458_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

113 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
) || \

114 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

115 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

116 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

117 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

126 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

127 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

128 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

129 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

130 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

131 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

132 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

133 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

134 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

135 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

136 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

137 ((
MODE
Ë=
TIM_OCMode_PWM2
))

138 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

139 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

140 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

141 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

142 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

143 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

144 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

145 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

154 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

155 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

157 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

166 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

167 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

168 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

169 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

170 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

171 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

172 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

173 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

174 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

175 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

176 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

177 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

178 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

187 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

188 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

189 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

190 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

191 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

192 ((
DIV
Ë=
TIM_CKD_DIV4
))

201 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

202 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

203 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

204 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

205 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

206 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

207 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

208 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

209 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

210 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

219 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

220 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

221 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

222 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

231 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

232 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

233 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

234 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

243 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

244 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

245 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

246 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

255 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

256 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

257 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

258 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

267 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

268 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

269 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

270 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

279 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

280 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

281 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

282 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

291 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

292 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

293 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

294 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

303 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

305 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

306 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

315 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

316 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

318 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

327 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

329 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

330 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

331 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

332 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

333 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

334 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

343 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

344 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

345 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

346 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

355 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

356 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

357 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

358 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

367 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

368 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

369 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

370 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

379 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

380 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

381 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

382 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

391 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

392 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

393 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

394 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

403 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001)

	)

404 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002)

	)

405 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003)

	)

406 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

407 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

408 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

417 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004)

	)

419 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008)

	)

420 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000C)

	)

421 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

422 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

423 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

424 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

433 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

434 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

435 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

436 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

437 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

438 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

439 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

440 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

441 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

442 
	#IS_TIM_PERIPH_IT
(
PERIPH
, 
TIM_IT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

443 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

444 (((
TIM_IT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

445 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

446 (((
TIM_IT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

447 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

448 (((
TIM_IT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_IT) != 0x0000)))

449 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

450 ((
IT
Ë=
TIM_IT_CC1
) || \

451 ((
IT
Ë=
TIM_IT_CC2
) || \

452 ((
IT
Ë=
TIM_IT_CC3
) || \

453 ((
IT
Ë=
TIM_IT_CC4
) || \

454 ((
IT
Ë=
TIM_IT_COM
) || \

455 ((
IT
Ë=
TIM_IT_Triggî
) || \

456 ((
IT
Ë=
TIM_IT_Bªak
))

465 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

467 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

468 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

469 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

470 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

471 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

472 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

473 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

474 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

475 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

476 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

477 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

478 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

479 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

480 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

481 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

482 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

483 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

484 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

485 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

486 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

487 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

488 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

489 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

490 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

491 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

492 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

493 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

494 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

495 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

496 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

497 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

498 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

499 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

500 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

501 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

502 ((
BASE
Ë=
TIM_DMABa£_DCR
))

511 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

512 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

513 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

514 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

515 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

516 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

517 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

518 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

519 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

520 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

521 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

522 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

523 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

524 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

525 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

526 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

527 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

528 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

529 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

530 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

531 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

532 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

533 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

534 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

535 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

536 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

537 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

538 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

539 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

540 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

541 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

542 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

543 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

544 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

545 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

546 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

555 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

556 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

557 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

558 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

559 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

560 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

561 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

562 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

563 
	#IS_TIM_PERIPH_DMA
(
PERIPH
, 
SOURCE
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

564 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

565 (((
SOURCE
Ë& (
uöt16_t
)0xA0FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

566 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

567 (((
SOURCE
Ë& (
uöt16_t
)0x80FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

568 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

569 (((
SOURCE
Ë& (
uöt16_t
)0xFEFF) == 0x0000) && ((SOURCE) != 0x0000)))

578 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

579 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

580 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

581 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

582 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

583 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

584 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

585 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

594 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

595 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

597 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

598 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

599 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

600 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

601 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

602 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

603 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

604 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

605 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

606 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

607 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

608 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

609 ((
SELECTION
Ë=
TIM_TS_ETRF
))

610 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

611 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

612 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

613 ((
SELECTION
Ë=
TIM_TS_ITR3
))

622 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

623 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

624 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

625 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

626 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

627 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

635 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

636 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

637 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

638 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

647 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

648 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

649 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

650 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

659 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

660 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

661 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

662 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

671 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

672 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

673 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

674 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

675 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

676 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

686 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

687 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

688 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

689 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

690 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

691 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

692 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

693 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

694 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

695 
	#IS_TIM_PERIPH_EVENT
(
PERIPH
, 
EVENT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

696 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

697 (((
EVENT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((EVENT) != 0x0000)) ||\

698 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

699 (((
EVENT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((EVENT) != 0x0000)) ||\

700 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

701 (((
EVENT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((EVENT) != 0x0000)))

710 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000)

	)

711 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001)

	)

712 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

713 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

722 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

723 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

724 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

725 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

734 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

735 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

736 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

737 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

747 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

748 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

749 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

750 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

759 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

760 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

761 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

762 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

763 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

764 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

765 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

766 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

767 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

768 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

769 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

770 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

771 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

772 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

773 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

774 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

775 
	#IS_TIM_PERIPH_TRGO
(
PERIPH
, 
TRGO
Ë(((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

	)

776 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM3_BASE
))||(((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
))|| \

777 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

778 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

779 ((
TRGO
Ë=
TIM_TRGOSour˚_Re£t
)) ||\

780 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

781 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

782 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

783 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

784 ((
TRGO
Ë=
TIM_TRGOSour˚_E«bÀ
)) ||\

785 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

786 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

787 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

788 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

789 ((
TRGO
Ë=
TIM_TRGOSour˚_Upd©e
)) ||\

790 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

791 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

792 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

793 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1
)) ||\

794 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

795 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

796 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

797 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1Ref
)) ||\

798 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

799 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

800 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

801 ((
TRGO
Ë=
TIM_TRGOSour˚_OC2Ref
)) ||\

802 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

803 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

804 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

805 ((
TRGO
Ë=
TIM_TRGOSour˚_OC3Ref
)) ||\

806 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

807 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

808 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

809 ((
TRGO
Ë=
TIM_TRGOSour˚_OC4Ref
)))

818 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

819 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

820 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

821 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

822 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

823 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

824 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

825 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

834 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

835 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

836 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

837 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

846 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

847 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

848 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

849 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

850 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

851 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

852 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

853 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

854 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

855 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

856 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

857 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

858 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

859 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

860 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

861 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

862 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

863 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

864 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

865 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

866 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

867 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

868 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

869 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

870 
	#IS_TIM_CLEAR_FLAG
(
PERIPH
, 
TIM_FLAG
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

871 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

872 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE1A0) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

873 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

874 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE100) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

875 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

876 (((
TIM_FLAG
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_FLAG) != 0x0000)))

877 
	#IS_TIM_PERIPH_FLAG
(
PERIPH
, 
TIM_FLAG
Ë(((((*(
uöt32_t
*)&(PERIPH))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
Ë||\

	)

878 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
Ë|| ((*(
uöt32_t
*)&(
PERIPH
))==
TIM5_BASE
) || \

879 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

880 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2
) ||\

881 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4
) || \

882 ((
TIM_FLAG
Ë=
TIM_FLAG_Triggî
))) ||\

883 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

884 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) ||\

885 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
)|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
) || \

886 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM7_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM6_BASE
)) && \

887 (((
TIM_FLAG
Ë=
TIM_FLAG_Upd©e
))) ||\

888 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
)) &&\

889 (((
TIM_FLAG
Ë=
TIM_FLAG_COM
Ë|| ((TIM_FLAGË=
TIM_FLAG_Bªak
))) ||\

890 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

891 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) || \

892 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

893 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2OF
) ||\

894 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4OF
))))

904 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

913 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

934 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

935 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

936 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

937 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

938 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

939 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

940 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

941 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

942 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

943 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

944 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

945 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

946 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

947 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

948 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

949 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

950 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

951 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

952 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

953 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

954 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

955 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

956 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

957 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

958 
uöt16_t
 
ExtTRGFûãr
);

959 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

960 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

961 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

962 
uöt16_t
 
ExtTRGFûãr
);

963 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

964 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

965 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

966 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

967 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

968 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

969 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

970 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

971 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

972 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

973 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

974 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

975 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

976 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

977 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

978 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

979 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

980 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

981 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

982 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

983 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

984 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

985 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

986 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

987 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

988 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

989 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

990 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

991 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

992 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

993 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

994 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

995 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

996 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

997 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

998 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

999 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1000 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1001 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1002 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1003 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1004 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1005 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1006 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1007 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1008 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1009 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1010 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1011 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1012 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1013 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1014 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1015 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1016 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1017 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1018 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1019 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1020 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1021 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1022 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1023 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1024 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1025 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mUSART_BaudR©e
;

48 
uöt16_t
 
	mUSART_W‹dLígth
;

49 
uöt16_t
 
	mUSART_St›Bôs
;

50 
uöt16_t
 
	mUSART_P¨ôy
;

51 
uöt16_t
 
	mUSART_Mode
;

52 
uöt16_t
 
	mUSART_H¨dw¨eFlowC⁄åﬁ
;

53 } 
	tUSART_InôTy≥Def
;

61 
uöt16_t
 
	mUSART_Clock
;

62 
uöt16_t
 
	mUSART_CPOL
;

63 
uöt16_t
 
	mUSART_CPHA
;

64 
uöt16_t
 
	mUSART_La°Bô
;

65 } 
	tUSART_ClockInôTy≥Def
;

75 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

76 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
USART2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART5_BASE
))

80 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

81 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
))

83 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

85 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

86 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
))

91 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

92 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

94 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

95 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

104 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

105 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

106 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

107 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

108 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

109 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

110 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

111 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

120 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

121 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

122 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

123 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

124 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

125 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

134 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

135 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

136 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

144 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

145 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

146 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

147 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

148 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

149 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

150 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

151 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

152 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

153 
	#IS_USART_PERIPH_HFC
(
PERIPH
, 
HFC
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

154 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

155 || ((
HFC
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
))

163 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

164 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

165 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

166 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

175 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

176 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

177 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

187 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

188 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

189 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

199 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

200 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

201 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

202 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

211 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

212 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

213 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

214 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

215 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

216 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

217 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

218 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

219 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

220 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

221 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

222 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

223 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

224 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

225 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

226 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

227 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

228 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

229 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

230 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

231 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

232 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

233 
	#IS_USART_PERIPH_IT
(
PERIPH
, 
USART_IT
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

234 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

235 || ((
USART_IT
Ë!
USART_IT_CTS
))

244 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

245 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

246 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

256 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

257 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

258 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

259 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

268 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

269 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

270 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

271 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

272 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

281 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

282 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

283 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

284 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

293 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

294 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

295 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

296 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

297 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

298 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

299 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

300 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

301 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

302 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

303 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

304 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

305 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

306 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

307 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

309 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

310 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

311 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

312 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

313 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

314 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

315 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

337 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

338 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

339 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

340 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

341 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

342 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

343 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

344 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

345 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

346 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

347 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

348 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

349 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

350 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

351 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

352 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

353 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

354 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

355 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

356 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

357 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

359 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

360 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

361 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

362 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

363 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

	@ChillerFWlib/USER/STM32FW/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

54 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

55 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

56 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

57 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

58 ((
	gPRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

59 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

60 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

61 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

62 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

83 
WWDG_DeInô
();

84 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

85 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

86 
WWDG_E«bÀIT
();

87 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

88 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

89 
FœgSètus
 
WWDG_GëFœgSètus
();

90 
WWDG_CÀ¨Fœg
();

	@ChillerFWlib/USER/STM32FW/stm32f10x.h

32 #i‚de‡
__STM32F10x_H


33 
	#__STM32F10x_H


	)

43 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_HD
)

46 
	#STM32F10X_HD


	)

59 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


72 
	#HSE_VÆue
 ((
uöt32_t
)8000000Ë

	)

77 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500Ë

	)

79 
	#HSI_VÆue
 ((
uöt32_t
)8000000Ë

	)

83 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03)

	)

85 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x00)

	)

87 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00)

	)

89 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

	)

90 | (
	g__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

91 | 
	g__STM32F10X_STDPERIPH_VERSION_SUB2
)

104 
	#__MPU_PRESENT
 0

	)

105 
	#__NVIC_PRIO_BITS
 4

	)

106 
	#__Víd‹_SysTickC⁄fig
 0

	)

109 
	eIRQn


112 
	mN⁄MaskabÀI¡_IRQn
 = -14,

113 
	mMem‹yM™agemít_IRQn
 = -12,

114 
	mBusFau…_IRQn
 = -11,

115 
	mUßgeFau…_IRQn
 = -10,

116 
	mSVCÆl_IRQn
 = -5,

117 
	mDebugM⁄ô‹_IRQn
 = -4,

118 
	mPídSV_IRQn
 = -2,

119 
	mSysTick_IRQn
 = -1,

122 
	mWWDG_IRQn
 = 0,

123 
	mPVD_IRQn
 = 1,

124 
	mTAMPER_IRQn
 = 2,

125 
	mRTC_IRQn
 = 3,

126 
	mFLASH_IRQn
 = 4,

127 
	mRCC_IRQn
 = 5,

128 
	mEXTI0_IRQn
 = 6,

129 
	mEXTI1_IRQn
 = 7,

130 
	mEXTI2_IRQn
 = 8,

131 
	mEXTI3_IRQn
 = 9,

132 
	mEXTI4_IRQn
 = 10,

133 
	mDMA1_Ch™√l1_IRQn
 = 11,

134 
	mDMA1_Ch™√l2_IRQn
 = 12,

135 
	mDMA1_Ch™√l3_IRQn
 = 13,

136 
	mDMA1_Ch™√l4_IRQn
 = 14,

137 
	mDMA1_Ch™√l5_IRQn
 = 15,

138 
	mDMA1_Ch™√l6_IRQn
 = 16,

139 
	mDMA1_Ch™√l7_IRQn
 = 17,

140 
	mADC1_2_IRQn
 = 18,

141 
	mUSB_HP_CAN1_TX_IRQn
 = 19,

142 
	mUSB_LP_CAN1_RX0_IRQn
 = 20,

143 
	mCAN1_RX1_IRQn
 = 21,

144 
	mCAN1_SCE_IRQn
 = 22,

145 
	mEXTI9_5_IRQn
 = 23,

146 
	mTIM1_BRK_IRQn
 = 24,

147 
	mTIM1_UP_IRQn
 = 25,

148 
	mTIM1_TRG_COM_IRQn
 = 26,

149 
	mTIM1_CC_IRQn
 = 27,

150 
	mTIM2_IRQn
 = 28,

151 
	mTIM3_IRQn
 = 29,

152 #i‚de‡
STM32F10X_LD


153 
	mTIM4_IRQn
 = 30,

155 
	mI2C1_EV_IRQn
 = 31,

156 
	mI2C1_ER_IRQn
 = 32,

157 #i‚de‡
STM32F10X_LD


158 
	mI2C2_EV_IRQn
 = 33,

159 
	mI2C2_ER_IRQn
 = 34,

161 
	mSPI1_IRQn
 = 35,

162 
	mSPI2_IRQn
 = 36,

163 
	mUSART1_IRQn
 = 37,

164 
	mUSART2_IRQn
 = 38,

165 #i‚de‡
STM32F10X_LD


166 
	mUSART3_IRQn
 = 39,

168 
	mEXTI15_10_IRQn
 = 40,

169 
	mRTCAœrm_IRQn
 = 41,

170 
	mUSBWakeUp_IRQn
 = 42,

171 #ifde‡
STM32F10X_HD


172 
	mTIM8_BRK_IRQn
 = 43,

173 
	mTIM8_UP_IRQn
 = 44,

174 
	mTIM8_TRG_COM_IRQn
 = 45,

175 
	mTIM8_CC_IRQn
 = 46,

176 
	mADC3_IRQn
 = 47,

177 
	mFSMC_IRQn
 = 48,

178 
	mSDIO_IRQn
 = 49,

179 
	mTIM5_IRQn
 = 50,

180 
	mSPI3_IRQn
 = 51,

181 
	mUART4_IRQn
 = 52,

182 
	mUART5_IRQn
 = 53,

183 
	mTIM6_IRQn
 = 54,

184 
	mTIM7_IRQn
 = 55,

185 
	mDMA2_Ch™√l1_IRQn
 = 56,

186 
	mDMA2_Ch™√l2_IRQn
 = 57,

187 
	mDMA2_Ch™√l3_IRQn
 = 58,

188 
	mDMA2_Ch™√l4_5_IRQn
 = 59

190 } 
	tIRQn_Ty≥
;

196 
	~"c‹e_cm3.h
"

197 
	~"sy°em_°m32f10x.h
"

198 
	~<°döt.h
>

205 
öt32_t
 
	ts32
;

206 
öt16_t
 
	ts16
;

207 
öt8_t
 
	ts8
;

209 c⁄° 
	töt32_t
 
	tsc32
;

210 c⁄° 
	töt16_t
 
	tsc16
;

211 c⁄° 
	töt8_t
 
	tsc8
;

213 
__IO
 
	töt32_t
 
	tvs32
;

214 
__IO
 
	töt16_t
 
	tvs16
;

215 
__IO
 
	töt8_t
 
	tvs8
;

217 
__I
 
	töt32_t
 
	tvsc32
;

218 
__I
 
	töt16_t
 
	tvsc16
;

219 
__I
 
	töt8_t
 
	tvsc8
;

221 
uöt32_t
 
	tu32
;

222 
uöt16_t
 
	tu16
;

223 
uöt8_t
 
	tu8
;

225 c⁄° 
	tuöt32_t
 
	tuc32
;

226 c⁄° 
	tuöt16_t
 
	tuc16
;

227 c⁄° 
	tuöt8_t
 
	tuc8
;

229 
__IO
 
	tuöt32_t
 
	tvu32
;

230 
__IO
 
	tuöt16_t
 
	tvu16
;

231 
__IO
 
	tuöt8_t
 
	tvu8
;

233 
__I
 
	tuöt32_t
 
	tvuc32
;

234 
__I
 
	tuöt16_t
 
	tvuc16
;

235 
__I
 
	tuöt8_t
 
	tvuc8
;

237 íum {
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE
} 
	tboﬁ
;

239 íum {
	mRESET
 = 0, 
	mSET
 = !
RESET
} 
	tFœgSètus
, 
	tITSètus
;

241 íum {
	mDISABLE
 = 0, 
	mENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

242 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

244 íum {
	mERROR
 = 0, 
	mSUCCESS
 = !
ERROR
} 
	tEº‹Sètus
;

260 
__IO
 
uöt32_t
 
	mSR
;

261 
__IO
 
uöt32_t
 
	mCR1
;

262 
__IO
 
uöt32_t
 
	mCR2
;

263 
__IO
 
uöt32_t
 
	mSMPR1
;

264 
__IO
 
uöt32_t
 
	mSMPR2
;

265 
__IO
 
uöt32_t
 
	mJOFR1
;

266 
__IO
 
uöt32_t
 
	mJOFR2
;

267 
__IO
 
uöt32_t
 
	mJOFR3
;

268 
__IO
 
uöt32_t
 
	mJOFR4
;

269 
__IO
 
uöt32_t
 
	mHTR
;

270 
__IO
 
uöt32_t
 
	mLTR
;

271 
__IO
 
uöt32_t
 
	mSQR1
;

272 
__IO
 
uöt32_t
 
	mSQR2
;

273 
__IO
 
uöt32_t
 
	mSQR3
;

274 
__IO
 
uöt32_t
 
	mJSQR
;

275 
__IO
 
uöt32_t
 
	mJDR1
;

276 
__IO
 
uöt32_t
 
	mJDR2
;

277 
__IO
 
uöt32_t
 
	mJDR3
;

278 
__IO
 
uöt32_t
 
	mJDR4
;

279 
__IO
 
uöt32_t
 
	mDR
;

280 } 
	tADC_Ty≥Def
;

288 
uöt32_t
 
	mRESERVED0
;

289 
__IO
 
uöt16_t
 
	mDR1
;

290 
uöt16_t
 
	mRESERVED1
;

291 
__IO
 
uöt16_t
 
	mDR2
;

292 
uöt16_t
 
	mRESERVED2
;

293 
__IO
 
uöt16_t
 
	mDR3
;

294 
uöt16_t
 
	mRESERVED3
;

295 
__IO
 
uöt16_t
 
	mDR4
;

296 
uöt16_t
 
	mRESERVED4
;

297 
__IO
 
uöt16_t
 
	mDR5
;

298 
uöt16_t
 
	mRESERVED5
;

299 
__IO
 
uöt16_t
 
	mDR6
;

300 
uöt16_t
 
	mRESERVED6
;

301 
__IO
 
uöt16_t
 
	mDR7
;

302 
uöt16_t
 
	mRESERVED7
;

303 
__IO
 
uöt16_t
 
	mDR8
;

304 
uöt16_t
 
	mRESERVED8
;

305 
__IO
 
uöt16_t
 
	mDR9
;

306 
uöt16_t
 
	mRESERVED9
;

307 
__IO
 
uöt16_t
 
	mDR10
;

308 
uöt16_t
 
	mRESERVED10
;

309 
__IO
 
uöt16_t
 
	mRTCCR
;

310 
uöt16_t
 
	mRESERVED11
;

311 
__IO
 
uöt16_t
 
	mCR
;

312 
uöt16_t
 
	mRESERVED12
;

313 
__IO
 
uöt16_t
 
	mCSR
;

314 
uöt16_t
 
	mRESERVED13
[5];

315 
__IO
 
uöt16_t
 
	mDR11
;

316 
uöt16_t
 
	mRESERVED14
;

317 
__IO
 
uöt16_t
 
	mDR12
;

318 
uöt16_t
 
	mRESERVED15
;

319 
__IO
 
uöt16_t
 
	mDR13
;

320 
uöt16_t
 
	mRESERVED16
;

321 
__IO
 
uöt16_t
 
	mDR14
;

322 
uöt16_t
 
	mRESERVED17
;

323 
__IO
 
uöt16_t
 
	mDR15
;

324 
uöt16_t
 
	mRESERVED18
;

325 
__IO
 
uöt16_t
 
	mDR16
;

326 
uöt16_t
 
	mRESERVED19
;

327 
__IO
 
uöt16_t
 
	mDR17
;

328 
uöt16_t
 
	mRESERVED20
;

329 
__IO
 
uöt16_t
 
	mDR18
;

330 
uöt16_t
 
	mRESERVED21
;

331 
__IO
 
uöt16_t
 
	mDR19
;

332 
uöt16_t
 
	mRESERVED22
;

333 
__IO
 
uöt16_t
 
	mDR20
;

334 
uöt16_t
 
	mRESERVED23
;

335 
__IO
 
uöt16_t
 
	mDR21
;

336 
uöt16_t
 
	mRESERVED24
;

337 
__IO
 
uöt16_t
 
	mDR22
;

338 
uöt16_t
 
	mRESERVED25
;

339 
__IO
 
uöt16_t
 
	mDR23
;

340 
uöt16_t
 
	mRESERVED26
;

341 
__IO
 
uöt16_t
 
	mDR24
;

342 
uöt16_t
 
	mRESERVED27
;

343 
__IO
 
uöt16_t
 
	mDR25
;

344 
uöt16_t
 
	mRESERVED28
;

345 
__IO
 
uöt16_t
 
	mDR26
;

346 
uöt16_t
 
	mRESERVED29
;

347 
__IO
 
uöt16_t
 
	mDR27
;

348 
uöt16_t
 
	mRESERVED30
;

349 
__IO
 
uöt16_t
 
	mDR28
;

350 
uöt16_t
 
	mRESERVED31
;

351 
__IO
 
uöt16_t
 
	mDR29
;

352 
uöt16_t
 
	mRESERVED32
;

353 
__IO
 
uöt16_t
 
	mDR30
;

354 
uöt16_t
 
	mRESERVED33
;

355 
__IO
 
uöt16_t
 
	mDR31
;

356 
uöt16_t
 
	mRESERVED34
;

357 
__IO
 
uöt16_t
 
	mDR32
;

358 
uöt16_t
 
	mRESERVED35
;

359 
__IO
 
uöt16_t
 
	mDR33
;

360 
uöt16_t
 
	mRESERVED36
;

361 
__IO
 
uöt16_t
 
	mDR34
;

362 
uöt16_t
 
	mRESERVED37
;

363 
__IO
 
uöt16_t
 
	mDR35
;

364 
uöt16_t
 
	mRESERVED38
;

365 
__IO
 
uöt16_t
 
	mDR36
;

366 
uöt16_t
 
	mRESERVED39
;

367 
__IO
 
uöt16_t
 
	mDR37
;

368 
uöt16_t
 
	mRESERVED40
;

369 
__IO
 
uöt16_t
 
	mDR38
;

370 
uöt16_t
 
	mRESERVED41
;

371 
__IO
 
uöt16_t
 
	mDR39
;

372 
uöt16_t
 
	mRESERVED42
;

373 
__IO
 
uöt16_t
 
	mDR40
;

374 
uöt16_t
 
	mRESERVED43
;

375 
__IO
 
uöt16_t
 
	mDR41
;

376 
uöt16_t
 
	mRESERVED44
;

377 
__IO
 
uöt16_t
 
	mDR42
;

378 
uöt16_t
 
	mRESERVED45
;

379 } 
	tBKP_Ty≥Def
;

387 
__IO
 
uöt32_t
 
	mTIR
;

388 
__IO
 
uöt32_t
 
	mTDTR
;

389 
__IO
 
uöt32_t
 
	mTDLR
;

390 
__IO
 
uöt32_t
 
	mTDHR
;

391 } 
	tCAN_TxMaûBox_Ty≥Def
;

399 
__IO
 
uöt32_t
 
	mRIR
;

400 
__IO
 
uöt32_t
 
	mRDTR
;

401 
__IO
 
uöt32_t
 
	mRDLR
;

402 
__IO
 
uöt32_t
 
	mRDHR
;

403 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

411 
__IO
 
uöt32_t
 
	mFR1
;

412 
__IO
 
uöt32_t
 
	mFR2
;

413 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

421 
__IO
 
uöt32_t
 
	mMCR
;

422 
__IO
 
uöt32_t
 
	mMSR
;

423 
__IO
 
uöt32_t
 
	mTSR
;

424 
__IO
 
uöt32_t
 
	mRF0R
;

425 
__IO
 
uöt32_t
 
	mRF1R
;

426 
__IO
 
uöt32_t
 
	mIER
;

427 
__IO
 
uöt32_t
 
	mESR
;

428 
__IO
 
uöt32_t
 
	mBTR
;

429 
uöt32_t
 
	mRESERVED0
[88];

430 
CAN_TxMaûBox_Ty≥Def
 
	msTxMaûBox
[3];

431 
CAN_FIFOMaûBox_Ty≥Def
 
	msFIFOMaûBox
[2];

432 
uöt32_t
 
	mRESERVED1
[12];

433 
__IO
 
uöt32_t
 
	mFMR
;

434 
__IO
 
uöt32_t
 
	mFM1R
;

435 
uöt32_t
 
	mRESERVED2
;

436 
__IO
 
uöt32_t
 
	mFS1R
;

437 
uöt32_t
 
	mRESERVED3
;

438 
__IO
 
uöt32_t
 
	mFFA1R
;

439 
uöt32_t
 
	mRESERVED4
;

440 
__IO
 
uöt32_t
 
	mFA1R
;

441 
uöt32_t
 
	mRESERVED5
[8];

442 
CAN_FûãrRegi°î_Ty≥Def
 
	msFûãrRegi°î
[14];

443 } 
	tCAN_Ty≥Def
;

451 
__IO
 
uöt32_t
 
	mDR
;

452 
__IO
 
uöt8_t
 
	mIDR
;

453 
uöt8_t
 
	mRESERVED0
;

454 
uöt16_t
 
	mRESERVED1
;

455 
__IO
 
uöt32_t
 
	mCR
;

456 } 
	tCRC_Ty≥Def
;

464 
__IO
 
uöt32_t
 
	mCR
;

465 
__IO
 
uöt32_t
 
	mSWTRIGR
;

466 
__IO
 
uöt32_t
 
	mDHR12R1
;

467 
__IO
 
uöt32_t
 
	mDHR12L1
;

468 
__IO
 
uöt32_t
 
	mDHR8R1
;

469 
__IO
 
uöt32_t
 
	mDHR12R2
;

470 
__IO
 
uöt32_t
 
	mDHR12L2
;

471 
__IO
 
uöt32_t
 
	mDHR8R2
;

472 
__IO
 
uöt32_t
 
	mDHR12RD
;

473 
__IO
 
uöt32_t
 
	mDHR12LD
;

474 
__IO
 
uöt32_t
 
	mDHR8RD
;

475 
__IO
 
uöt32_t
 
	mDOR1
;

476 
__IO
 
uöt32_t
 
	mDOR2
;

477 } 
	tDAC_Ty≥Def
;

485 
__IO
 
uöt32_t
 
	mIDCODE
;

486 
__IO
 
uöt32_t
 
	mCR
;

487 }
	tDBGMCU_Ty≥Def
;

495 
__IO
 
uöt32_t
 
	mCCR
;

496 
__IO
 
uöt32_t
 
	mCNDTR
;

497 
__IO
 
uöt32_t
 
	mCPAR
;

498 
__IO
 
uöt32_t
 
	mCMAR
;

499 } 
	tDMA_Ch™√l_Ty≥Def
;

503 
__IO
 
uöt32_t
 
	mISR
;

504 
__IO
 
uöt32_t
 
	mIFCR
;

505 } 
	tDMA_Ty≥Def
;

513 
__IO
 
uöt32_t
 
	mIMR
;

514 
__IO
 
uöt32_t
 
	mEMR
;

515 
__IO
 
uöt32_t
 
	mRTSR
;

516 
__IO
 
uöt32_t
 
	mFTSR
;

517 
__IO
 
uöt32_t
 
	mSWIER
;

518 
__IO
 
uöt32_t
 
	mPR
;

519 } 
	tEXTI_Ty≥Def
;

527 
__IO
 
uöt32_t
 
	mACR
;

528 
__IO
 
uöt32_t
 
	mKEYR
;

529 
__IO
 
uöt32_t
 
	mOPTKEYR
;

530 
__IO
 
uöt32_t
 
	mSR
;

531 
__IO
 
uöt32_t
 
	mCR
;

532 
__IO
 
uöt32_t
 
	mAR
;

533 
__IO
 
uöt32_t
 
	mRESERVED
;

534 
__IO
 
uöt32_t
 
	mOBR
;

535 
__IO
 
uöt32_t
 
	mWRPR
;

536 } 
	tFLASH_Ty≥Def
;

544 
__IO
 
uöt16_t
 
	mRDP
;

545 
__IO
 
uöt16_t
 
	mUSER
;

546 
__IO
 
uöt16_t
 
	mD©a0
;

547 
__IO
 
uöt16_t
 
	mD©a1
;

548 
__IO
 
uöt16_t
 
	mWRP0
;

549 
__IO
 
uöt16_t
 
	mWRP1
;

550 
__IO
 
uöt16_t
 
	mWRP2
;

551 
__IO
 
uöt16_t
 
	mWRP3
;

552 } 
	tOB_Ty≥Def
;

560 
__IO
 
uöt32_t
 
	mBTCR
[8];

561 } 
	tFSMC_B™k1_Ty≥Def
;

569 
__IO
 
uöt32_t
 
	mBWTR
[7];

570 } 
	tFSMC_B™k1E_Ty≥Def
;

578 
__IO
 
uöt32_t
 
	mPCR2
;

579 
__IO
 
uöt32_t
 
	mSR2
;

580 
__IO
 
uöt32_t
 
	mPMEM2
;

581 
__IO
 
uöt32_t
 
	mPATT2
;

582 
uöt32_t
 
	mRESERVED0
;

583 
__IO
 
uöt32_t
 
	mECCR2
;

584 } 
	tFSMC_B™k2_Ty≥Def
;

592 
__IO
 
uöt32_t
 
	mPCR3
;

593 
__IO
 
uöt32_t
 
	mSR3
;

594 
__IO
 
uöt32_t
 
	mPMEM3
;

595 
__IO
 
uöt32_t
 
	mPATT3
;

596 
uöt32_t
 
	mRESERVED0
;

597 
__IO
 
uöt32_t
 
	mECCR3
;

598 } 
	tFSMC_B™k3_Ty≥Def
;

606 
__IO
 
uöt32_t
 
	mPCR4
;

607 
__IO
 
uöt32_t
 
	mSR4
;

608 
__IO
 
uöt32_t
 
	mPMEM4
;

609 
__IO
 
uöt32_t
 
	mPATT4
;

610 
__IO
 
uöt32_t
 
	mPIO4
;

611 } 
	tFSMC_B™k4_Ty≥Def
;

619 
__IO
 
uöt32_t
 
	mCRL
;

620 
__IO
 
uöt32_t
 
	mCRH
;

621 
__IO
 
uöt32_t
 
	mIDR
;

622 
__IO
 
uöt32_t
 
	mODR
;

623 
__IO
 
uöt32_t
 
	mBSRR
;

624 
__IO
 
uöt32_t
 
	mBRR
;

625 
__IO
 
uöt32_t
 
	mLCKR
;

626 } 
	tGPIO_Ty≥Def
;

634 
__IO
 
uöt32_t
 
	mEVCR
;

635 
__IO
 
uöt32_t
 
	mMAPR
;

636 
__IO
 
uöt32_t
 
	mEXTICR
[4];

637 } 
	tAFIO_Ty≥Def
;

644 
__IO
 
uöt16_t
 
	mCR1
;

645 
uöt16_t
 
	mRESERVED0
;

646 
__IO
 
uöt16_t
 
	mCR2
;

647 
uöt16_t
 
	mRESERVED1
;

648 
__IO
 
uöt16_t
 
	mOAR1
;

649 
uöt16_t
 
	mRESERVED2
;

650 
__IO
 
uöt16_t
 
	mOAR2
;

651 
uöt16_t
 
	mRESERVED3
;

652 
__IO
 
uöt16_t
 
	mDR
;

653 
uöt16_t
 
	mRESERVED4
;

654 
__IO
 
uöt16_t
 
	mSR1
;

655 
uöt16_t
 
	mRESERVED5
;

656 
__IO
 
uöt16_t
 
	mSR2
;

657 
uöt16_t
 
	mRESERVED6
;

658 
__IO
 
uöt16_t
 
	mCCR
;

659 
uöt16_t
 
	mRESERVED7
;

660 
__IO
 
uöt16_t
 
	mTRISE
;

661 
uöt16_t
 
	mRESERVED8
;

662 } 
	tI2C_Ty≥Def
;

670 
__IO
 
uöt32_t
 
	mKR
;

671 
__IO
 
uöt32_t
 
	mPR
;

672 
__IO
 
uöt32_t
 
	mRLR
;

673 
__IO
 
uöt32_t
 
	mSR
;

674 } 
	tIWDG_Ty≥Def
;

682 
__IO
 
uöt32_t
 
	mCR
;

683 
__IO
 
uöt32_t
 
	mCSR
;

684 } 
	tPWR_Ty≥Def
;

692 
__IO
 
uöt32_t
 
	mCR
;

693 
__IO
 
uöt32_t
 
	mCFGR
;

694 
__IO
 
uöt32_t
 
	mCIR
;

695 
__IO
 
uöt32_t
 
	mAPB2RSTR
;

696 
__IO
 
uöt32_t
 
	mAPB1RSTR
;

697 
__IO
 
uöt32_t
 
	mAHBENR
;

698 
__IO
 
uöt32_t
 
	mAPB2ENR
;

699 
__IO
 
uöt32_t
 
	mAPB1ENR
;

700 
__IO
 
uöt32_t
 
	mBDCR
;

701 
__IO
 
uöt32_t
 
	mCSR
;

702 } 
	tRCC_Ty≥Def
;

710 
__IO
 
uöt16_t
 
	mCRH
;

711 
uöt16_t
 
	mRESERVED0
;

712 
__IO
 
uöt16_t
 
	mCRL
;

713 
uöt16_t
 
	mRESERVED1
;

714 
__IO
 
uöt16_t
 
	mPRLH
;

715 
uöt16_t
 
	mRESERVED2
;

716 
__IO
 
uöt16_t
 
	mPRLL
;

717 
uöt16_t
 
	mRESERVED3
;

718 
__IO
 
uöt16_t
 
	mDIVH
;

719 
uöt16_t
 
	mRESERVED4
;

720 
__IO
 
uöt16_t
 
	mDIVL
;

721 
uöt16_t
 
	mRESERVED5
;

722 
__IO
 
uöt16_t
 
	mCNTH
;

723 
uöt16_t
 
	mRESERVED6
;

724 
__IO
 
uöt16_t
 
	mCNTL
;

725 
uöt16_t
 
	mRESERVED7
;

726 
__IO
 
uöt16_t
 
	mALRH
;

727 
uöt16_t
 
	mRESERVED8
;

728 
__IO
 
uöt16_t
 
	mALRL
;

729 
uöt16_t
 
	mRESERVED9
;

730 } 
	tRTC_Ty≥Def
;

738 
__IO
 
uöt32_t
 
	mPOWER
;

739 
__IO
 
uöt32_t
 
	mCLKCR
;

740 
__IO
 
uöt32_t
 
	mARG
;

741 
__IO
 
uöt32_t
 
	mCMD
;

742 
__I
 
uöt32_t
 
	mRESPCMD
;

743 
__I
 
uöt32_t
 
	mRESP1
;

744 
__I
 
uöt32_t
 
	mRESP2
;

745 
__I
 
uöt32_t
 
	mRESP3
;

746 
__I
 
uöt32_t
 
	mRESP4
;

747 
__IO
 
uöt32_t
 
	mDTIMER
;

748 
__IO
 
uöt32_t
 
	mDLEN
;

749 
__IO
 
uöt32_t
 
	mDCTRL
;

750 
__I
 
uöt32_t
 
	mDCOUNT
;

751 
__I
 
uöt32_t
 
	mSTA
;

752 
__IO
 
uöt32_t
 
	mICR
;

753 
__IO
 
uöt32_t
 
	mMASK
;

754 
uöt32_t
 
	mRESERVED0
[2];

755 
__I
 
uöt32_t
 
	mFIFOCNT
;

756 
uöt32_t
 
	mRESERVED1
[13];

757 
__IO
 
uöt32_t
 
	mFIFO
;

758 } 
	tSDIO_Ty≥Def
;

766 
__IO
 
uöt16_t
 
	mCR1
;

767 
uöt16_t
 
	mRESERVED0
;

768 
__IO
 
uöt16_t
 
	mCR2
;

769 
uöt16_t
 
	mRESERVED1
;

770 
__IO
 
uöt16_t
 
	mSR
;

771 
uöt16_t
 
	mRESERVED2
;

772 
__IO
 
uöt16_t
 
	mDR
;

773 
uöt16_t
 
	mRESERVED3
;

774 
__IO
 
uöt16_t
 
	mCRCPR
;

775 
uöt16_t
 
	mRESERVED4
;

776 
__IO
 
uöt16_t
 
	mRXCRCR
;

777 
uöt16_t
 
	mRESERVED5
;

778 
__IO
 
uöt16_t
 
	mTXCRCR
;

779 
uöt16_t
 
	mRESERVED6
;

780 
__IO
 
uöt16_t
 
	mI2SCFGR
;

781 
uöt16_t
 
	mRESERVED7
;

782 
__IO
 
uöt16_t
 
	mI2SPR
;

783 
uöt16_t
 
	mRESERVED8
;

784 } 
	tSPI_Ty≥Def
;

792 
__IO
 
uöt16_t
 
	mCR1
;

793 
uöt16_t
 
	mRESERVED0
;

794 
__IO
 
uöt16_t
 
	mCR2
;

795 
uöt16_t
 
	mRESERVED1
;

796 
__IO
 
uöt16_t
 
	mSMCR
;

797 
uöt16_t
 
	mRESERVED2
;

798 
__IO
 
uöt16_t
 
	mDIER
;

799 
uöt16_t
 
	mRESERVED3
;

800 
__IO
 
uöt16_t
 
	mSR
;

801 
uöt16_t
 
	mRESERVED4
;

802 
__IO
 
uöt16_t
 
	mEGR
;

803 
uöt16_t
 
	mRESERVED5
;

804 
__IO
 
uöt16_t
 
	mCCMR1
;

805 
uöt16_t
 
	mRESERVED6
;

806 
__IO
 
uöt16_t
 
	mCCMR2
;

807 
uöt16_t
 
	mRESERVED7
;

808 
__IO
 
uöt16_t
 
	mCCER
;

809 
uöt16_t
 
	mRESERVED8
;

810 
__IO
 
uöt16_t
 
	mCNT
;

811 
uöt16_t
 
	mRESERVED9
;

812 
__IO
 
uöt16_t
 
	mPSC
;

813 
uöt16_t
 
	mRESERVED10
;

814 
__IO
 
uöt16_t
 
	mARR
;

815 
uöt16_t
 
	mRESERVED11
;

816 
__IO
 
uöt16_t
 
	mRCR
;

817 
uöt16_t
 
	mRESERVED12
;

818 
__IO
 
uöt16_t
 
	mCCR1
;

819 
uöt16_t
 
	mRESERVED13
;

820 
__IO
 
uöt16_t
 
	mCCR2
;

821 
uöt16_t
 
	mRESERVED14
;

822 
__IO
 
uöt16_t
 
	mCCR3
;

823 
uöt16_t
 
	mRESERVED15
;

824 
__IO
 
uöt16_t
 
	mCCR4
;

825 
uöt16_t
 
	mRESERVED16
;

826 
__IO
 
uöt16_t
 
	mBDTR
;

827 
uöt16_t
 
	mRESERVED17
;

828 
__IO
 
uöt16_t
 
	mDCR
;

829 
uöt16_t
 
	mRESERVED18
;

830 
__IO
 
uöt16_t
 
	mDMAR
;

831 
uöt16_t
 
	mRESERVED19
;

832 } 
	tTIM_Ty≥Def
;

840 
__IO
 
uöt16_t
 
	mSR
;

841 
uöt16_t
 
	mRESERVED0
;

842 
__IO
 
uöt16_t
 
	mDR
;

843 
uöt16_t
 
	mRESERVED1
;

844 
__IO
 
uöt16_t
 
	mBRR
;

845 
uöt16_t
 
	mRESERVED2
;

846 
__IO
 
uöt16_t
 
	mCR1
;

847 
uöt16_t
 
	mRESERVED3
;

848 
__IO
 
uöt16_t
 
	mCR2
;

849 
uöt16_t
 
	mRESERVED4
;

850 
__IO
 
uöt16_t
 
	mCR3
;

851 
uöt16_t
 
	mRESERVED5
;

852 
__IO
 
uöt16_t
 
	mGTPR
;

853 
uöt16_t
 
	mRESERVED6
;

854 } 
	tUSART_Ty≥Def
;

862 
__IO
 
uöt32_t
 
	mCR
;

863 
__IO
 
uöt32_t
 
	mCFR
;

864 
__IO
 
uöt32_t
 
	mSR
;

865 } 
	tWWDG_Ty≥Def
;

875 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

876 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

878 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

879 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

881 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

884 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

885 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

886 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

888 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

889 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

890 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

891 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

892 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

893 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

894 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

895 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

896 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

897 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

898 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

899 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

900 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

901 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

902 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

903 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

904 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

905 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

906 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

907 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

908 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

910 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

911 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

912 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

913 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

914 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

915 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

916 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

917 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

918 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

919 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

920 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

921 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

922 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

923 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

924 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

925 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

927 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

929 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

930 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

931 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

932 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

933 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

934 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

935 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

936 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

937 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

938 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

939 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

940 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

941 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

942 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

943 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

944 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

946 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

947 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

949 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

950 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

951 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

952 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

953 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

955 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

965 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

966 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

967 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

968 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

969 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

970 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

971 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

972 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

973 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

974 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

975 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

976 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

977 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

978 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

979 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

980 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

981 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

982 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

983 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

984 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

985 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

986 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

987 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

988 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

989 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

990 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

991 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

992 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

993 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

994 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

995 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

996 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

997 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

998 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

999 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1000 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1001 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1002 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1003 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1004 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1005 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1006 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1007 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1008 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1009 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1010 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1011 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1012 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1013 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1014 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1015 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1016 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1017 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1018 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1019 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1020 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1021 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1022 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1023 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1024 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1025 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1026 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1051 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1055 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1059 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1068 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1069 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1070 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1071 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1072 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1074 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1075 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1076 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1077 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1080 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1081 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1082 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1083 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1084 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1085 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1086 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1087 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1089 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1093 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1094 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1095 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1096 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1105 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1108 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1111 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1114 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1117 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1120 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1123 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1126 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1129 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1132 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1135 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1138 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1141 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1144 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1147 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1150 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1153 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1156 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1159 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1162 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1165 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1168 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1171 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1174 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1177 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1180 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1183 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1186 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1189 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1192 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1195 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1198 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1201 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1204 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1207 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1210 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1213 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1216 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1219 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1222 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1225 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1228 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1231 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1232 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1233 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1234 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1237 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1238 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1241 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1242 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1243 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1244 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1245 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1254 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1255 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1256 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1257 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1258 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1259 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1260 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1261 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1262 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1263 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1266 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1267 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1268 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1271 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1272 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1273 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1275 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1276 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1277 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1280 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1281 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1282 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1284 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1285 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1286 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1287 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1288 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1291 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1292 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1293 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1294 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1295 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1296 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1297 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1298 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1299 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1301 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1302 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1303 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1304 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1307 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1308 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1309 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1310 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1311 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1313 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1314 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1315 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1316 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1319 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1320 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1321 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1322 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1323 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1325 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1326 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1327 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1330 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1331 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1332 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1333 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1335 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1336 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1338 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1339 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1340 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1341 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1342 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1345 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1346 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1347 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1348 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1349 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1350 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1351 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1352 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1353 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1354 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1355 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1356 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1357 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1358 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1359 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1361 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1363 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1364 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1365 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1366 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1369 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1370 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1371 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1372 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1373 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1376 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1377 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1378 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1379 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1380 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1381 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1382 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1383 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1384 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1385 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1386 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1387 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1388 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1389 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1390 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1391 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1392 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1395 
	#RCC_APB2RSTR_AFIORST
 ((
uöt16_t
)0x0001Ë

	)

1396 
	#RCC_APB2RSTR_IOPARST
 ((
uöt16_t
)0x0004Ë

	)

1397 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt16_t
)0x0008Ë

	)

1398 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt16_t
)0x0010Ë

	)

1399 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt16_t
)0x0020Ë

	)

1400 
	#RCC_APB2RSTR_IOPERST
 ((
uöt16_t
)0x0040Ë

	)

1401 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt16_t
)0x0080Ë

	)

1402 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt16_t
)0x0100Ë

	)

1403 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt16_t
)0x0200Ë

	)

1404 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt16_t
)0x0400Ë

	)

1405 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt16_t
)0x0800Ë

	)

1406 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt16_t
)0x1000Ë

	)

1407 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt16_t
)0x2000Ë

	)

1408 
	#RCC_APB2RSTR_USART1RST
 ((
uöt16_t
)0x4000Ë

	)

1409 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt16_t
)0x8000Ë

	)

1412 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1413 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1414 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1415 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1416 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1417 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1418 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1419 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1420 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1421 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1422 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1423 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1424 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1425 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1426 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1427 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1428 
	#RCC_APB1RSTR_CANRST
 ((
uöt32_t
)0x02000000Ë

	)

1429 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1430 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1431 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1434 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1435 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1436 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1437 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1438 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1439 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1440 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1443 
	#RCC_APB2ENR_AFIOEN
 ((
uöt16_t
)0x0001Ë

	)

1444 
	#RCC_APB2ENR_IOPAEN
 ((
uöt16_t
)0x0004Ë

	)

1445 
	#RCC_APB2ENR_IOPBEN
 ((
uöt16_t
)0x0008Ë

	)

1446 
	#RCC_APB2ENR_IOPCEN
 ((
uöt16_t
)0x0010Ë

	)

1447 
	#RCC_APB2ENR_IOPDEN
 ((
uöt16_t
)0x0020Ë

	)

1448 
	#RCC_APB2ENR_IOPEEN
 ((
uöt16_t
)0x0040Ë

	)

1449 
	#RCC_APB2ENR_IOPFEN
 ((
uöt16_t
)0x0080Ë

	)

1450 
	#RCC_APB2ENR_IOPGEN
 ((
uöt16_t
)0x0100Ë

	)

1451 
	#RCC_APB2ENR_ADC1EN
 ((
uöt16_t
)0x0200Ë

	)

1452 
	#RCC_APB2ENR_ADC2EN
 ((
uöt16_t
)0x0400Ë

	)

1453 
	#RCC_APB2ENR_TIM1EN
 ((
uöt16_t
)0x0800Ë

	)

1454 
	#RCC_APB2ENR_SPI1EN
 ((
uöt16_t
)0x1000Ë

	)

1455 
	#RCC_APB2ENR_TIM8EN
 ((
uöt16_t
)0x2000Ë

	)

1456 
	#RCC_APB2ENR_USART1EN
 ((
uöt16_t
)0x4000Ë

	)

1457 
	#RCC_APB2ENR_ADC3EN
 ((
uöt16_t
)0x8000Ë

	)

1460 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

1461 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

1462 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

1463 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

1464 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

1465 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

1466 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

1467 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

1468 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

1469 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

1470 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

1471 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

1472 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

1473 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

1474 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

1475 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

1476 
	#RCC_APB1ENR_CANEN
 ((
uöt32_t
)0x02000000Ë

	)

1477 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

1478 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

1479 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

1482 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

1483 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

1484 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

1486 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

1487 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

1488 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

1491 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1492 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

1493 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

1494 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

1496 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

1497 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

1500 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

1501 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1502 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

1503 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

1504 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

1505 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

1506 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

1507 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

1508 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

1517 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1519 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

1520 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

1521 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

1523 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

1524 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

1525 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

1527 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

1528 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

1529 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

1531 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

1532 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

1533 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

1535 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

1536 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

1537 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

1539 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

1540 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

1541 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

1543 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

1544 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

1545 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

1547 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

1548 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

1549 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

1551 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1553 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

1554 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

1555 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

1557 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

1558 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

1559 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

1561 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

1562 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

1563 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

1565 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

1566 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

1567 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

1569 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

1570 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

1571 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

1573 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

1574 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

1575 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

1577 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

1578 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

1579 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

1581 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

1582 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

1583 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

1586 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1588 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

1589 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

1590 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

1592 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

1593 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

1594 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

1596 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

1597 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

1598 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

1600 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

1601 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

1602 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

1604 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

1605 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

1606 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

1608 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

1609 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

1610 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

1612 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

1613 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

1614 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

1616 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

1617 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

1618 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

1620 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1622 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

1623 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

1624 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

1626 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

1627 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

1628 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

1630 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

1631 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

1632 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

1634 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

1635 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

1636 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

1638 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

1639 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

1640 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

1642 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

1643 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

1644 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

1646 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

1647 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

1648 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

1650 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

1651 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

1652 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

1655 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

1656 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

1657 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

1658 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

1659 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

1660 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

1661 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

1662 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

1663 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

1664 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

1665 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

1666 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

1667 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

1668 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

1669 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

1670 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

1673 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

1674 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

1675 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

1676 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

1677 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

1678 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

1679 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

1680 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

1681 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

1682 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

1683 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

1684 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

1685 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

1686 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

1687 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

1688 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

1691 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

1692 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

1693 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

1694 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

1695 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

1696 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

1697 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

1698 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

1699 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

1700 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

1701 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

1702 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

1703 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

1704 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

1705 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

1706 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

1708 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

1709 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

1710 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

1711 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

1712 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

1713 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

1714 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

1715 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

1716 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

1717 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

1718 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

1719 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

1720 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

1721 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

1722 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

1723 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

1726 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

1727 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

1728 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

1729 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

1730 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

1731 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

1732 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

1733 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

1734 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

1735 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

1736 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

1737 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

1738 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

1739 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

1740 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

1741 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

1744 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

1745 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

1746 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

1747 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

1748 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

1749 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

1750 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

1751 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

1752 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

1753 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

1754 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

1755 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

1756 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

1757 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

1758 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

1759 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

1760 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

1765 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

1766 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

1767 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

1768 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

1769 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

1772 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

1773 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

1774 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

1775 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

1776 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

1777 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

1778 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

1779 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

1780 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

1781 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

1782 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

1783 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

1784 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

1785 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

1786 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

1787 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

1789 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

1790 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

1791 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

1792 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

1795 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

1796 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

1797 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

1798 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

1799 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

1801 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

1804 
	#AFIO_MAPR_SPI1
 
	`_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

1805 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

1806 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

1807 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

1809 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

1810 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

1811 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

1814 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1815 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

1816 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

1818 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1819 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

1820 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

1823 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1824 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

1825 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1827 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

1828 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

1829 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

1832 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1833 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

1834 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

1835 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

1837 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1838 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

1839 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

1842 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1843 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

1844 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1846 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

1848 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

1849 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

1850 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

1853 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

1854 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

1855 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

1857 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

1858 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

1859 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

1860 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

1861 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

1862 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

1864 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

1865 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

1866 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

1867 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

1870 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

1871 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

1872 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

1873 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

1876 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

1877 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

1878 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

1879 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

1882 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

1883 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

1884 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

1885 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

1886 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

1887 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

1888 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

1891 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

1892 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

1893 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

1894 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

1895 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

1896 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

1897 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

1900 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

1901 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

1902 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

1903 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

1904 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

1905 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

1906 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

1909 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

1910 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

1911 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

1912 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

1913 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

1914 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

1915 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

1918 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

1919 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

1920 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

1921 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

1924 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

1925 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

1926 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

1927 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

1928 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

1929 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

1930 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

1933 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

1934 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

1935 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

1936 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

1937 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

1938 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

1939 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

1942 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

1943 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

1944 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

1945 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

1946 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

1947 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

1948 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

1951 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

1952 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

1953 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

1954 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

1955 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

1956 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

1957 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

1960 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

1961 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

1962 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

1963 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

1966 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

1967 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

1968 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

1969 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

1970 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

1971 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

1972 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

1975 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

1976 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

1977 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

1978 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

1979 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

1980 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

1981 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

1984 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

1985 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

1986 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

1987 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

1988 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

1989 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

1990 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

1993 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

1994 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

1995 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

1996 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

1997 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

1998 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

1999 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2002 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2003 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2004 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2005 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2008 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2009 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2010 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2011 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2012 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2013 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2014 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2017 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2018 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2019 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2020 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2021 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2022 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2023 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2026 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2027 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2028 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2029 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2030 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2031 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2032 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2035 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2036 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2037 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2038 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2039 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2040 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2041 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2050 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2051 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2052 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2053 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2056 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2059 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2062 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2063 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2064 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2073 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2074 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2075 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2076 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2077 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2078 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2079 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2080 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2081 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2082 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2083 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2084 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2085 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2086 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2087 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2088 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2089 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2090 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2091 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2092 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2093 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2094 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2095 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2096 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2097 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2098 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2099 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2100 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2101 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2102 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2103 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2104 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2105 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2108 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2109 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2110 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2111 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2112 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2113 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2114 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2115 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2116 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2117 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2118 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2119 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2120 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2121 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2122 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2123 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2124 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2125 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2126 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2127 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2128 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2129 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2130 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2131 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2132 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2133 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2134 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2135 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2136 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2137 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2138 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2139 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2140 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2143 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2144 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2145 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2146 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2147 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2148 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2149 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2150 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2151 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2152 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2153 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2154 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2155 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2156 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2157 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2158 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2160 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2161 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2162 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2163 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2164 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2165 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2166 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2167 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2168 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2169 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2170 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2171 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2172 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2173 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2174 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2175 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2178 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2179 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2180 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2181 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2182 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2183 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2184 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2185 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2186 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2187 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2188 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2189 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2190 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2191 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2192 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2193 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2194 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2195 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2196 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2197 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2198 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2199 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2200 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2201 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2202 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2203 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2204 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2205 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2206 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2207 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2208 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2209 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2210 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2213 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2214 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2215 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2216 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2217 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2218 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2219 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2220 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2221 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2222 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2223 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2224 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2225 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2226 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2227 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2228 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2229 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2230 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2231 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2232 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2233 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2234 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2235 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2236 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2237 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2238 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2239 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2240 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2241 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2242 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2243 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2244 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2245 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2248 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2249 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2250 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2251 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2254 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2255 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2256 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2257 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2260 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2261 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2262 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2263 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

2266 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

2267 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

2268 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

2269 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

2272 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

2273 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

2274 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

2275 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

2278 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

2279 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

2280 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

2281 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

2284 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

2285 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

2286 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

2287 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

2290 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

2291 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

2292 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

2293 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

2296 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

2297 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

2298 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

2299 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

2300 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

2303 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

2304 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

2305 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

2306 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

2307 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

2308 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

2309 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

2310 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

2311 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

2312 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

2315 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

2316 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

2319 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

2320 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

2321 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

2323 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

2324 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

2325 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

2326 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

2329 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

2330 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

2331 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

2332 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

2333 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

2334 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

2335 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

2336 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

2338 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

2339 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

2342 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

2343 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

2344 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

2347 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

2348 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

2349 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

2350 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

2351 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

2352 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

2355 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

2356 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

2357 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

2358 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

2361 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

2362 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

2363 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

2364 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

2365 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

2366 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

2367 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

2368 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

2369 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

2370 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

2371 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

2372 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

2373 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

2374 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

2378 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

2379 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

2380 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

2381 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

2382 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

2384 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

2385 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

2386 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

2387 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

2388 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

2389 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

2391 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

2392 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

2393 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

2394 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

2395 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

2396 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

2399 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

2400 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

2401 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

2404 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

2405 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

2406 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

2407 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

2408 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

2411 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2414 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2417 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

2426 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2427 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2428 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2429 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2430 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2431 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2432 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2433 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2434 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2435 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2436 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2437 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2438 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2439 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2440 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2441 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2442 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2443 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2444 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2447 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2448 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2449 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2450 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2451 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2452 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2453 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2454 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2455 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2456 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2457 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2458 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2459 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2460 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2461 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2462 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2463 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2464 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2465 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2468 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2469 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2470 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2471 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2472 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2473 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2474 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2475 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2476 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2477 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2478 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2479 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2480 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2481 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2482 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2483 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2484 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2485 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2486 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2489 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2490 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2491 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2492 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2493 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2494 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2495 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2496 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2497 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2498 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2499 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2500 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2501 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2502 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2503 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2504 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2505 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2506 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2507 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2510 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

2511 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

2512 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

2513 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

2514 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

2515 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

2516 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

2517 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

2518 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

2519 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

2520 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

2521 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

2522 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

2523 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

2524 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

2525 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

2526 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

2527 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

2528 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

2531 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

2532 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

2533 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

2534 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

2535 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

2536 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

2537 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

2538 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

2539 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

2540 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

2541 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

2542 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

2543 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

2544 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

2545 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

2546 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

2547 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

2548 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

2549 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

2558 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

2559 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2560 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2561 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2562 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

2563 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2564 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2565 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2566 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

2567 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2568 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2569 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2570 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

2571 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2572 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2573 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2574 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

2575 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2576 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2577 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2578 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

2579 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2580 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2581 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2582 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

2583 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2584 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2585 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2588 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

2589 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2590 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2591 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2592 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

2593 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2594 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2595 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2596 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

2597 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2598 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2599 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2600 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

2601 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2602 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2603 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2604 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

2605 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2606 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2607 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2608 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

2609 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2610 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2611 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2612 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

2613 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2614 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2615 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2618 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

2619 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2620 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2621 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2622 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

2623 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2624 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

2625 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

2627 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2628 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2629 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2631 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2632 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2633 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2635 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

2636 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2637 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2639 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2642 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

2643 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2644 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2645 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2646 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

2647 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2648 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

2649 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

2651 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2652 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2653 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2655 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2656 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2657 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2659 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

2660 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2661 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2663 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2666 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

2667 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2668 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2669 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2670 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

2671 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2672 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

2673 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

2675 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2676 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2677 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2679 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2680 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2681 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2683 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

2684 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2685 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2687 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2690 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

2691 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2692 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2693 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2694 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

2695 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2696 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

2697 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

2699 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2700 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2701 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2703 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2704 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2705 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2707 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

2708 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2709 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2711 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2714 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

2715 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2716 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2717 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2718 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

2719 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2720 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

2721 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

2723 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2724 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2725 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2727 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2728 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2729 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2731 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

2732 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2733 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2735 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2738 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

2739 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2740 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2741 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2742 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

2743 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2744 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

2745 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

2747 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2748 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2749 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2751 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2752 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2753 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2755 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

2756 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2757 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2759 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2762 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

2763 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2764 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2765 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2766 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

2767 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2768 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

2769 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

2771 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

2772 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2773 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2775 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2776 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2777 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2779 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

2780 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2781 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2783 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2786 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

2789 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

2792 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

2795 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

2798 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

2801 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

2804 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

2807 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2810 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2813 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2817 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2820 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2823 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2827 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2830 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2833 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2836 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2840 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2843 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2846 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2849 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2858 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

2859 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

2860 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

2861 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

2862 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

2865 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2866 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2867 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2868 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2869 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2870 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2872 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2873 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2874 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2875 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2876 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2877 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2878 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2879 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2881 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2882 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2883 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2884 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2886 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

2887 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

2888 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

2889 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

2890 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

2892 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2893 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2897 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2898 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2899 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

2900 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

2901 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2902 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2904 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

2905 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2906 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2907 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

2909 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

2911 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

2912 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

2913 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

2914 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

2916 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

2917 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

2918 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2919 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2922 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2923 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2924 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2925 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2927 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2928 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2929 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2930 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2932 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2933 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2934 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2935 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2937 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2938 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2939 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2940 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2942 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2943 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2944 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2945 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2947 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2948 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2949 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2950 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2952 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2953 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2954 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2955 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2957 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2958 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2959 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2960 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2963 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2964 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2965 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2966 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2968 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2969 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2970 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2971 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2973 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2974 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2975 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2976 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2978 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2979 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2980 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2981 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2983 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2984 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2985 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2986 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2988 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2989 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2990 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2991 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2993 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2994 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2995 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2996 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2998 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2999 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3000 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3001 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3003 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3004 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3005 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3006 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3008 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3009 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3010 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3011 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3014 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3017 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3020 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3023 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3026 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3029 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3032 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3033 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3034 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3035 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3036 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3037 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3039 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3040 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3041 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3042 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3043 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3044 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3046 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3047 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3048 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3049 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3050 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3051 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3053 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3054 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3055 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3056 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3057 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3058 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3060 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3061 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3062 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3063 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3064 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3067 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3068 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3069 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3070 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3071 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3072 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3074 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3075 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3076 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3077 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3078 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3079 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3081 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3082 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3083 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3084 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3085 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3086 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3088 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3089 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3090 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3091 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3092 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3093 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3095 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3096 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3097 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3098 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3099 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3100 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3102 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3103 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3104 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3105 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3106 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3107 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3110 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3111 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3112 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3113 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3114 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3115 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3117 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3118 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3119 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3120 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3121 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3122 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3124 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3125 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3126 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3127 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3128 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3129 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3131 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3132 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3133 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3134 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3135 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3136 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3138 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3139 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3140 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3141 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3142 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3143 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3145 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3146 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3147 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3148 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3149 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3150 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3153 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3154 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3155 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3156 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3157 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3158 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3160 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3161 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3162 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3163 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3164 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3165 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3167 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3168 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3169 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3170 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3171 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3172 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3174 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3175 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3176 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3177 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3178 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3179 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3181 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3182 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3183 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3186 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3189 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3192 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3195 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3198 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3199 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3208 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3209 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3210 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3212 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3213 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3214 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3215 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3217 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3218 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3219 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3221 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3222 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3223 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3224 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3225 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3227 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3228 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3229 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3230 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3232 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3233 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3235 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3237 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3238 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3239 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3241 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3242 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3243 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3244 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3245 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3247 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3250 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3251 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3254 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3257 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3260 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3263 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3266 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3269 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3272 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3273 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3276 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3277 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3280 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3281 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3284 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3287 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3296 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

3297 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

3298 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

3299 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

3300 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3302 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

3303 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

3304 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

3306 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

3308 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

3309 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

3310 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

3313 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

3314 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

3315 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

3317 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

3318 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

3319 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

3320 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

3322 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

3323 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

3324 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

3325 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

3326 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

3327 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

3328 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

3329 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

3332 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

3333 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

3334 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

3335 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

3337 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

3338 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

3339 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

3340 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

3342 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

3344 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

3345 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

3346 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

3347 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

3348 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

3350 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

3351 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

3352 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

3354 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

3355 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

3358 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

3359 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

3360 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

3361 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

3362 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

3363 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

3364 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

3365 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

3366 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

3367 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

3368 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

3369 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

3370 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

3371 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

3372 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

3375 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

3376 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

3377 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

3378 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

3379 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

3380 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

3381 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

3382 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

3383 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

3384 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

3385 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

3386 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

3389 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

3390 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

3391 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

3392 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

3393 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

3394 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

3395 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

3396 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

3399 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

3400 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

3401 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

3403 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

3404 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

3406 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

3407 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

3408 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

3409 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

3411 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

3413 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

3414 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

3415 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

3417 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

3418 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

3420 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

3421 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

3422 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

3423 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

3425 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

3429 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

3430 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3431 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3433 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

3434 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

3435 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

3436 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

3437 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

3439 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

3440 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3441 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3443 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

3444 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

3445 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

3446 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

3447 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

3450 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

3451 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

3452 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

3454 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

3455 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

3457 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

3458 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

3459 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

3460 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

3462 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

3464 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

3465 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

3466 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

3468 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

3469 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

3471 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

3472 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

3473 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

3474 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

3476 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

3480 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

3481 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3482 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3484 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

3485 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

3486 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

3487 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

3488 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

3490 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

3491 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3492 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3494 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

3495 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

3496 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

3497 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

3498 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

3501 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

3502 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

3503 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

3504 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

3505 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

3506 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

3507 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

3508 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

3509 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

3510 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

3511 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

3512 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

3513 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

3514 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

3517 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

3520 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

3523 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

3526 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

3529 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

3532 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

3535 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

3538 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

3541 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

3542 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

3543 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

3544 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

3545 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

3546 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

3547 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

3548 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

3549 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

3551 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

3552 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

3553 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

3555 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

3556 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

3557 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

3558 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

3559 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

3560 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

3563 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

3564 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

3565 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

3566 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

3567 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

3568 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

3570 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

3571 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

3572 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

3573 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

3574 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

3575 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

3578 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

3587 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

3588 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

3589 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

3592 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

3593 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

3594 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

3595 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

3596 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

3597 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

3600 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

3603 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

3606 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

3609 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

3612 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

3615 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

3618 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

3621 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

3630 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

3633 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

3634 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

3635 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

3636 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

3639 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

3642 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

3643 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

3652 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

3653 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

3654 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

3655 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

3656 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

3657 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

3658 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

3659 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

3661 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

3664 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

3665 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

3666 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

3667 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

3668 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

3669 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

3670 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

3671 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

3673 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

3674 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

3675 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

3677 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

3680 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

3689 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3690 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3692 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3693 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3694 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3696 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3697 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3698 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3700 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3701 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3702 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3703 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3704 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3705 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3706 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3707 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3708 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3711 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3712 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3714 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3715 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3716 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3718 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3719 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3720 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3722 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3723 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3724 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3725 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3726 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3727 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3728 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3729 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3730 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3733 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3734 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3736 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3737 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3738 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3740 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3741 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3742 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3744 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3745 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3746 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3747 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3748 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3749 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3750 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3751 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3752 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3755 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3756 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3758 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3759 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3760 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3762 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3763 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3764 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3766 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3767 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3768 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3769 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3770 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3771 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3772 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3773 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3774 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3777 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3778 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3779 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3780 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3781 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3783 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3784 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3785 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3786 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3787 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3789 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3790 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3791 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3792 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3793 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3795 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3796 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3797 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3798 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3799 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3801 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3802 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3803 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3804 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3805 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3807 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3808 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3809 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3810 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3811 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3813 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3814 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3815 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3818 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3819 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3820 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3821 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3822 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3824 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3825 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3826 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3827 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3828 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3830 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3831 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3832 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3833 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3834 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3836 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3837 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3838 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3839 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3840 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3842 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3843 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3844 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3845 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3846 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3848 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3849 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3850 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3851 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3852 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3854 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3855 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3856 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3859 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3860 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3861 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3862 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3863 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3865 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3866 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3867 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3868 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3869 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3871 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3872 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3873 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3874 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3875 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3877 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3878 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3879 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3880 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3881 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3883 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3884 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3885 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3886 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3887 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3889 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3890 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3891 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3892 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3893 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3895 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3896 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3897 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3900 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3901 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3902 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3903 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3904 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3906 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3907 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3908 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3909 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3910 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3912 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3913 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3914 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3915 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3916 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3918 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3919 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3920 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3921 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3922 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3924 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3925 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3926 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3927 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3928 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3930 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3931 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3932 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3933 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3934 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3936 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3937 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3938 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3941 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3942 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3943 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3944 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3945 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3947 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3948 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3949 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3950 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3951 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3953 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3954 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3955 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3956 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3957 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3959 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3960 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3961 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3962 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3963 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3965 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3966 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3967 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3968 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3969 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3971 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3972 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3973 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3976 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3977 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3978 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3979 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3980 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3982 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3983 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3984 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3985 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3986 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3988 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3989 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3990 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3991 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3992 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3994 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3995 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3996 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3997 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3998 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4000 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4001 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4002 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4003 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4004 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4006 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4007 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4008 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4011 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4012 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4013 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4014 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4015 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4017 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4018 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4019 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4020 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4021 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4023 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4024 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4025 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4026 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4027 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4029 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4030 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4031 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4032 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4033 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4035 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4036 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4037 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4038 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4039 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4041 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4042 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4043 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4046 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4047 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4048 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4049 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4050 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4052 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4053 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4054 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4055 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4056 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4058 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4059 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4060 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4061 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4062 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4064 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4065 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4066 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4067 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4068 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4070 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4071 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4072 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4073 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4074 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4076 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4077 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4078 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4081 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4082 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4083 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4085 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4086 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4087 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4089 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4091 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4092 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4093 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4094 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4095 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4097 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4098 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4099 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4100 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4101 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4103 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4104 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4105 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4106 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4109 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4110 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4111 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4113 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4114 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4115 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4117 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4119 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4120 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4121 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4122 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4123 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4125 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4126 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4127 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4128 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4129 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4131 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4132 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4133 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4134 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4137 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4138 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4139 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4141 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4142 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4143 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4145 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4147 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4148 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4149 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4150 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4151 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4153 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4154 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4155 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4156 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4157 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4159 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4160 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4161 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4162 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4165 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4166 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4167 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4168 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4169 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4170 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4171 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4174 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4175 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4176 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4177 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4178 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4179 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4180 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4183 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4184 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4185 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4186 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4187 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4188 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4189 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4192 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4193 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4194 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4195 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4196 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4197 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4198 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4199 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4200 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4202 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4203 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4204 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4205 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4206 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4207 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4208 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4209 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4210 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4212 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4213 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4214 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4215 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4216 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4217 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4218 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4219 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4220 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4222 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4223 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4224 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4225 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4226 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4227 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4228 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4229 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4230 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4233 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4234 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4235 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4236 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4237 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4238 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4239 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4240 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4241 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4243 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4244 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4245 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4246 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4247 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4248 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4249 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4250 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4251 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4253 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4254 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4255 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4256 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4257 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4258 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4259 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4260 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4261 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4263 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4264 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4265 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4266 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4267 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4268 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4269 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4270 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4271 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4274 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4275 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4276 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4277 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4278 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4279 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4280 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4281 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4282 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4284 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4285 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4286 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4287 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4288 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4289 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4290 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4291 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4292 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4294 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4295 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4296 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4297 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4298 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4299 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4300 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4301 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4302 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4304 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4305 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4306 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4307 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4308 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4309 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4310 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4311 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4312 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4315 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4316 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4317 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4318 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4319 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4320 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4321 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4322 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4323 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4325 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4326 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4327 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4328 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4329 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4330 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4331 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4332 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4333 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4335 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4336 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4337 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4338 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4339 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4340 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4341 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4342 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4343 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4345 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4346 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4347 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4348 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4349 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4350 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4351 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4352 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4353 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4356 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4357 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4358 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4359 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4360 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4361 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4362 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4363 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4364 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4366 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4367 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4368 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4369 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4370 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4371 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4372 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4373 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4374 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4376 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4377 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4378 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4379 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4380 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4381 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4382 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4383 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4384 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4386 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4387 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4388 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4389 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4390 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4391 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4392 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4393 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4394 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4397 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4398 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4399 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4400 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4401 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4402 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4403 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4404 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4405 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4407 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4408 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4409 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4410 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4411 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4412 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4413 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4414 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4415 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4417 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4418 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4419 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4420 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4421 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4422 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4423 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4424 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4425 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4427 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4428 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4429 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4430 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4431 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4432 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4433 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4434 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4435 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4438 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4439 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4440 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4441 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4442 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4443 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4444 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4445 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4446 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4448 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4449 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4450 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4451 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4452 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4453 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4454 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4455 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4456 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4458 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4459 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4460 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4461 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4462 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4463 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4464 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4465 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4466 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4468 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4469 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4470 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4471 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4472 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4473 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4474 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4475 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4476 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4479 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4482 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4491 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

4492 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

4493 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

4496 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

4497 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

4498 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

4499 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

4501 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

4502 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

4503 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

4505 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

4506 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

4509 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

4512 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

4514 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

4515 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

4516 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

4518 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

4519 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

4520 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

4521 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

4522 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

4523 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

4524 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

4527 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

4530 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

4533 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

4536 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4539 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4542 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

4545 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

4548 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

4551 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

4552 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

4553 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

4554 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

4556 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

4557 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

4558 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

4559 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

4560 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

4562 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

4563 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

4564 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

4565 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

4568 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

4571 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

4572 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

4573 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

4574 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

4575 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

4576 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

4577 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

4578 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

4579 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

4580 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

4581 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

4582 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

4583 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

4584 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

4585 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

4586 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

4587 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

4588 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

4589 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

4590 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

4591 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

4592 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

4593 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

4594 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

4597 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

4598 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

4599 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

4600 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

4601 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

4602 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

4603 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

4604 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

4605 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

4606 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

4607 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

4608 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

4609 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

4612 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

4613 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

4614 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

4615 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

4616 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

4617 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

4618 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

4619 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

4620 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

4621 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

4622 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

4623 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

4625 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

4626 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

4627 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

4628 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

4629 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

4630 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

4631 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

4632 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

4633 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

4634 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

4635 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

4638 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

4641 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4651 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

4653 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4654 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4655 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4657 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4658 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4659 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4661 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4662 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4663 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4665 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4667 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4668 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4669 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4671 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4672 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4675 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

4677 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4678 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4679 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4681 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4682 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4683 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4685 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4686 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4687 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4689 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4691 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4692 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4693 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4695 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4696 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4699 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

4701 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4702 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4703 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4705 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4706 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4707 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4709 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4710 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4711 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4713 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4715 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4716 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4717 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4719 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4720 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4723 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

4725 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4726 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4727 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4729 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4730 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4731 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4733 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4734 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4735 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4737 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4739 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4740 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4741 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4743 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4744 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4747 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

4749 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4750 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4751 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4753 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4754 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4755 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4757 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4758 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4759 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4761 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4763 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4764 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4765 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4767 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4768 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4771 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

4773 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4774 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4775 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4777 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4778 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4779 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4781 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4782 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4783 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4785 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4787 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4788 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4789 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4791 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4792 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4795 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

4797 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4798 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4799 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4801 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4802 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4803 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4805 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4806 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4807 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4809 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4811 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4812 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4813 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4815 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4816 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4819 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

4821 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4822 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4823 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4825 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4826 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4827 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4829 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4830 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4831 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4833 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4835 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4836 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4837 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4839 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4840 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4844 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

4845 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

4846 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

4847 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

4848 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

4849 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

4850 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

4851 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

4852 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

4853 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

4854 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

4855 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

4856 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

4859 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

4860 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

4861 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

4862 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

4863 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

4864 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

4865 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

4866 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

4867 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

4868 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

4871 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

4872 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

4873 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

4874 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

4875 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

4878 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

4879 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

4880 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

4881 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

4882 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

4883 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

4884 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

4885 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

4887 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

4890 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

4894 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

4897 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

4900 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

4903 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

4906 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

4909 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

4912 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

4915 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

4920 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

4923 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

4926 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

4929 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

4932 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

4935 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

4938 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

4941 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

4946 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4949 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4952 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4955 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4958 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4961 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4964 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

4967 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

4970 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4973 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4976 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4979 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4982 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4985 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4988 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4991 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4996 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

4999 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5002 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5005 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5008 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5011 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5014 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5017 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5022 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5024 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5025 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5026 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5027 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5028 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5029 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5031 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5034 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5036 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5037 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5038 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5039 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5040 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5041 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5043 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5046 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5048 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5049 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5050 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5051 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5052 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5053 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5055 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5058 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5060 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5061 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5062 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5063 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5064 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5065 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5067 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5070 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5072 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5073 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5074 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5075 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5076 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5077 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5079 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5082 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5084 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5085 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5086 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5087 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5088 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5089 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5091 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5094 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5096 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5097 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5098 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5099 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5100 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5101 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5103 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5106 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5108 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5109 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5110 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5111 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5112 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5113 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5115 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5120 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5122 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5123 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5124 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5125 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5126 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5127 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5129 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5132 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5134 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5135 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5136 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5137 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5138 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5139 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5141 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5144 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5146 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5147 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5148 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5149 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5150 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5151 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5153 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5156 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5158 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5159 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5160 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5161 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5162 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5163 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5165 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5168 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5170 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5171 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5172 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5173 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5174 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5175 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5177 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5180 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5182 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5183 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5184 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5185 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5186 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5187 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5189 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5192 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5194 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5195 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5196 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5197 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5198 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5199 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5201 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5204 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5206 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5207 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5208 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5209 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5210 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5213 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5216 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5218 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5219 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5220 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5221 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5222 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5223 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5225 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5228 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5230 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5231 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5232 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5233 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5234 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5235 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5237 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5240 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5242 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5243 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5244 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5245 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5246 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5247 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5249 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5252 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5254 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5255 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5256 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5257 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5258 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5259 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5261 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5264 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5266 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5267 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5268 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5269 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5270 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5271 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5273 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5276 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5278 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5279 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5280 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5281 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5282 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5283 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5285 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5288 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5290 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5291 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5292 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5293 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5294 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5295 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5297 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5300 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5302 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5303 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5304 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5305 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5306 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5307 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5309 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5319 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

5320 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

5321 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

5322 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

5323 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

5324 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

5325 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

5326 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

5327 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

5330 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

5331 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

5332 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

5333 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

5334 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

5335 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

5336 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

5337 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

5338 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

5341 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

5342 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

5343 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

5344 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

5345 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

5346 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

5347 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

5348 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

5349 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

5350 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

5351 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

5352 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

5353 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

5354 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

5355 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

5356 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

5358 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

5359 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

5360 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

5361 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

5363 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

5364 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

5365 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

5366 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

5369 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

5370 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

5371 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

5372 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

5375 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

5376 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

5377 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

5378 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

5381 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

5382 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

5383 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

5384 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

5385 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

5386 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

5387 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

5388 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

5389 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

5390 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

5391 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

5392 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

5393 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

5394 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

5397 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

5398 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

5399 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

5401 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

5402 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

5403 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

5404 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

5406 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

5407 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

5410 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

5411 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

5412 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

5413 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

5414 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

5415 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

5419 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5420 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5421 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5422 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5423 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5426 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5427 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5428 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5431 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5432 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5433 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5434 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5437 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5438 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5439 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5440 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5443 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5444 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5445 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5446 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5447 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5450 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5451 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5452 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5455 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5456 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5457 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5458 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5461 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5462 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5463 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5464 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5467 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5468 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5469 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5470 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5471 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5474 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5475 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5476 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5479 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5480 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5481 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5482 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5485 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5486 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5487 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5488 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5491 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5492 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5493 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5494 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5497 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5498 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5499 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5502 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5503 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5504 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5505 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5508 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5509 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5510 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5511 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5514 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5515 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5516 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5517 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5520 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5521 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5522 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5525 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5526 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5527 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5528 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5531 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5532 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5533 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5534 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5538 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

5541 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

5542 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

5543 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

5544 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

5545 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

5546 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

5547 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

5548 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

5549 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

5550 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

5551 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

5552 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

5553 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

5554 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

5555 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

5558 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

5559 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

5560 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

5561 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

5562 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

5563 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

5564 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

5565 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

5566 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

5567 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

5568 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

5569 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

5570 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

5571 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

5572 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

5575 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

5576 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

5577 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

5578 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

5579 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

5580 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

5581 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

5582 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

5583 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

5584 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

5585 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

5586 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

5587 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

5588 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

5589 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

5592 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

5593 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

5594 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

5595 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

5596 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

5597 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

5598 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

5599 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

5600 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

5601 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

5602 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

5603 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

5604 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

5605 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

5606 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

5609 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5610 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5611 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5612 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5613 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5614 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5615 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5616 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5617 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5618 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5619 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5620 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5621 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5622 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5623 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5624 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5625 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5626 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5627 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5628 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5629 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5630 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5631 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5632 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5633 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5634 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5635 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5636 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5637 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5638 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5639 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5640 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5643 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5644 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5645 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5646 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5647 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5648 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5649 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5650 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5651 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5652 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5653 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5654 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5655 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5656 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5657 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5658 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5659 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5660 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5661 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5662 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5663 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5664 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5665 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5666 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5667 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5668 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5669 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5670 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5671 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5672 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5673 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5674 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5677 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5678 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5679 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5680 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5681 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5682 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5683 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5684 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5685 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5686 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5687 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5688 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5689 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5690 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5691 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5692 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5693 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5694 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5695 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5696 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5697 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5698 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5699 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5700 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5701 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5702 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5703 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5704 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5705 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5706 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5707 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5708 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5711 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5712 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5713 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5714 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5715 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5716 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5717 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5718 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5719 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5720 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5721 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5722 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5723 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5724 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5725 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5726 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5727 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5728 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5729 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5730 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5731 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5732 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5733 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5734 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5735 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5736 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5737 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5738 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5739 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5740 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5741 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5742 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5745 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5746 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5747 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5748 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5749 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5750 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5751 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5752 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5753 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5754 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5755 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5756 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5757 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5758 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5759 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5760 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5761 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5762 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5763 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5764 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5765 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5766 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5767 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5768 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5769 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5770 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5771 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5772 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5773 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5774 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5775 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5776 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5779 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5780 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5781 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5782 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5783 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5784 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5785 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5786 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5787 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5788 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5789 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5790 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5791 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5792 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5793 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5794 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5795 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5796 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5797 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5798 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5799 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5800 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5801 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5802 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5803 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5804 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5805 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5806 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5807 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5808 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5809 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5810 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5813 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5814 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5815 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5816 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5817 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5818 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5819 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5820 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5821 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5822 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5823 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5824 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5825 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5826 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5827 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5828 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5829 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5830 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5831 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5832 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5833 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5834 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5835 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5836 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5837 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5838 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5839 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5840 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5841 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5842 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5843 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5844 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5847 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5848 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5849 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5850 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5851 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5852 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5853 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5854 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5855 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5856 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5857 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5858 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5859 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5860 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5861 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5862 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5863 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5864 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5865 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5866 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5867 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5868 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5869 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5870 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5871 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5872 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5873 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5874 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5875 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5876 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5877 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5878 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5881 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5882 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5883 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5884 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5885 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5886 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5887 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5888 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5889 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5890 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5891 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5892 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5893 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5894 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5895 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5896 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5897 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5898 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5899 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5900 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5901 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5902 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5903 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5904 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5905 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5906 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5907 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5908 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5909 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5910 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5911 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5912 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5915 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5916 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5917 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5918 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5919 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5920 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5921 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5922 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5923 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5924 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5925 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5926 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5927 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5928 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5929 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5930 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5931 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5932 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5933 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5934 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5935 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5936 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5937 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5938 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5939 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5940 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5941 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5942 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5943 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5944 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5945 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5946 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5949 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5950 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5951 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5952 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5953 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5954 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5955 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5956 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5957 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5958 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5959 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5960 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5961 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5962 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5963 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5964 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5965 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5966 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5967 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5968 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5969 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5970 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5971 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5972 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5973 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5974 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5975 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5976 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5977 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5978 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5979 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5980 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5983 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5984 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5985 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5986 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5987 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5988 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5989 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5990 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5991 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5992 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5993 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5994 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5995 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5996 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5997 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5998 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5999 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6000 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6001 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6002 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6003 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6004 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6005 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6006 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6007 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6008 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6009 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6010 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6011 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6012 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6013 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6014 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6017 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6018 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6019 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6020 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6021 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6022 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6023 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6024 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6025 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6026 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6027 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6028 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6029 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6030 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6031 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6032 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6033 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6034 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6035 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6036 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6037 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6038 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6039 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6040 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6041 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6042 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6043 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6044 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6045 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6046 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6047 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6048 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6051 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6052 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6053 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6054 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6055 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6056 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6057 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6058 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6059 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6060 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6061 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6062 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6063 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6064 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6065 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6066 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6067 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6068 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6069 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6070 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6071 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6072 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6073 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6074 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6075 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6076 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6077 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6078 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6079 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6080 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6081 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6082 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6085 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6086 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6087 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6088 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6089 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6090 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6091 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6092 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6093 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6094 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6095 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6096 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6097 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6098 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6099 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6100 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6101 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6102 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6103 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6104 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6105 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6106 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6107 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6108 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6109 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6110 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6111 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6112 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6113 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6114 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6115 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6116 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6119 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6120 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6121 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6122 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6123 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6124 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6125 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6126 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6127 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6128 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6129 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6130 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6131 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6132 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6133 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6134 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6135 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6136 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6137 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6138 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6139 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6140 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6141 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6142 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6143 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6144 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6145 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6146 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6147 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6148 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6149 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6150 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6153 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6154 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6155 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6156 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6157 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6158 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6159 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6160 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6161 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6162 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6163 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6164 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6165 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6166 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6167 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6168 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6169 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6170 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6171 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6172 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6173 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6174 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6175 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6176 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6177 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6178 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6179 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6180 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6181 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6182 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6183 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6184 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6187 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6188 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6189 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6190 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6191 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6192 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6193 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6194 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6195 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6196 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6197 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6198 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6199 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6200 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6201 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6202 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6203 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6204 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6205 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6206 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6207 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6208 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6209 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6210 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6211 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6212 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6213 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6214 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6215 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6216 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6217 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6218 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6221 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6222 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6223 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6224 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6225 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6226 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6227 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6228 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6229 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6230 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6231 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6232 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6233 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6234 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6235 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6236 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6237 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6238 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6239 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6240 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6241 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6242 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6243 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6244 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6245 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6246 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6247 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6248 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6249 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6250 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6251 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6252 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6255 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6256 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6257 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6258 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6259 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6260 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6261 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6262 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6263 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6264 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6265 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6266 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6267 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6268 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6269 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6270 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6271 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6272 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6273 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6274 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6275 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6276 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6277 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6278 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6279 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6280 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6281 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6282 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6283 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6284 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6285 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6286 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6289 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6290 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6291 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6292 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6293 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6294 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6295 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6296 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6297 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6298 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6299 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6300 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6301 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6302 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6303 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6304 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6305 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6306 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6307 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6308 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6309 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6310 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6311 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6312 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6313 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6314 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6315 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6316 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6317 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6318 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6319 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6320 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6323 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6324 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6325 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6326 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6327 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6328 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6329 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6330 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6331 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6332 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6333 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6334 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6335 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6336 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6337 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6338 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6339 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6340 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6341 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6342 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6343 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6344 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6345 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6346 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6347 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6348 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6349 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6350 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6351 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6352 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6353 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6354 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6357 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6358 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6359 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6360 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6361 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6362 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6363 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6364 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6365 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6366 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6367 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6368 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6369 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6370 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6371 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6372 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6373 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6374 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6375 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6376 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6377 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6378 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6379 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6380 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6381 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6382 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6383 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6384 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6385 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6386 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6387 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6388 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6391 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6392 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6393 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6394 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6395 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6396 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6397 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6398 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6399 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6400 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6401 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6402 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6403 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6404 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6405 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6406 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6407 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6408 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6409 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6410 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6411 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6412 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6413 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6414 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6415 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6416 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6417 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6418 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6419 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6420 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6421 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6422 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6425 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6426 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6427 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6428 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6429 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6430 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6431 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6432 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6433 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6434 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6435 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6436 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6437 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6438 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6439 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6440 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6441 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6442 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6443 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6444 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6445 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6446 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6447 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6448 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6449 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6450 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6451 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6452 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6453 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6454 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6455 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6456 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6459 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6460 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6461 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6462 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6463 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6464 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6465 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6466 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6467 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6468 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6469 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6470 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6471 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6472 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6473 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6474 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6475 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6476 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6477 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6478 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6479 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6480 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6481 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6482 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6483 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6484 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6485 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6486 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6487 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6488 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6489 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6490 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6493 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6494 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6495 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6496 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6497 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6498 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6499 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6500 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6501 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6502 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6503 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6504 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6505 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6506 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6507 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6508 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6509 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6510 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6511 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6512 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6513 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6514 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6515 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6516 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6517 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6518 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6519 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6520 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6521 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6522 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6523 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6524 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6527 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6528 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6529 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6530 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6531 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6532 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6533 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6534 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6535 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6536 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6537 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6538 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6539 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6540 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6541 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6542 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6543 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6544 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6545 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6546 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6547 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6548 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6549 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6550 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6551 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6552 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6553 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6554 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6555 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6556 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6557 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6558 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6567 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

6568 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

6569 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

6571 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

6572 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

6573 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

6574 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

6576 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

6577 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

6578 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

6579 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

6580 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

6581 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

6582 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

6583 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

6584 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

6585 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

6588 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

6589 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

6590 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

6591 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

6592 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

6593 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

6596 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

6597 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

6598 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

6599 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

6600 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

6601 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

6602 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

6603 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

6606 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

6609 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

6612 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

6615 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

6618 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

6620 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

6621 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

6622 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

6624 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

6626 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

6627 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

6628 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

6630 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

6632 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

6633 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

6634 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

6636 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

6637 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

6640 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

6641 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

6642 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

6651 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6652 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6653 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6654 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6655 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6656 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6657 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6658 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6659 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6660 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6661 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6662 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6663 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6664 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6667 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6668 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6669 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6670 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6671 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6672 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6673 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6675 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6676 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6677 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6678 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6679 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6682 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6683 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6685 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6686 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6687 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6688 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6689 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6690 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6691 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6692 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6693 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6694 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6696 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6699 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6700 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6703 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6706 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6707 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6708 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6709 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6710 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6711 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6712 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6713 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6714 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6715 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6716 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6717 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6718 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6719 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6722 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6723 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6724 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6725 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6726 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6727 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6728 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6729 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6732 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6733 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6734 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6737 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6746 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

6747 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

6748 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

6749 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

6750 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

6751 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

6752 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

6753 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

6754 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

6755 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

6758 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

6761 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

6762 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

6765 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

6766 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

6767 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

6768 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

6769 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

6770 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

6771 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

6772 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

6773 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

6774 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

6775 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

6776 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

6777 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

6778 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

6781 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

6782 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

6783 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

6784 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

6785 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

6786 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

6787 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

6789 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

6790 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

6791 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

6793 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

6796 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

6797 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

6798 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

6799 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

6800 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

6801 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

6802 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

6803 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

6804 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

6805 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

6806 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

6809 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

6810 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

6811 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

6812 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

6813 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

6814 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

6815 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

6816 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

6817 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

6819 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

6828 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

6830 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

6831 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

6832 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

6833 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

6834 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

6835 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

6836 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

6837 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

6838 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

6839 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

6840 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

6841 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

6842 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

6843 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

6844 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

6845 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

6846 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

6849 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

6850 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

6851 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

6852 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

6854 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

6855 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

6856 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

6858 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

6859 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

6860 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

6861 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

6862 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

6863 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

6864 
	#DBGMCU_CR_DBG_CAN_STOP
 ((
uöt32_t
)0x00004000Ë

	)

6865 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

6866 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

6867 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00020000Ë

	)

6868 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00040000Ë

	)

6869 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00080000Ë

	)

6870 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00100000Ë

	)

6879 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

6880 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

6881 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

6882 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

6884 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

6885 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

6886 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

6889 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6892 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6895 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

6896 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

6897 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

6898 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

6901 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

6902 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

6903 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

6904 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

6905 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

6906 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

6907 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

6908 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

6909 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

6910 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

6913 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6916 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

6917 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

6919 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

6920 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

6921 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

6922 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

6923 
	#FLASH_OBR_NŸu£d
 ((
uöt16_t
)0x03E0Ë

	)

6926 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6931 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

6932 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

6935 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

6936 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

6939 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

6940 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

6943 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

6944 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

6947 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

6948 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

6951 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

6952 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

6955 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

6956 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

6959 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

6960 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

6970 #ifde‡
USE_STDPERIPH_DRIVER


6971 
	~"°m32f10x_c⁄f.h
"

6978 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

6980 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

6982 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

6984 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

6986 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

6988 
	#READ_REG
(
REG
Ë((REG))

	)

6990 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~CLEARMASK)Ë| (SETMASK)))

	)

	@ChillerFWlib/USER/STM32FW/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

27 
	~"°m32f10x_adc.h
"

33 
	~"°m32f10x_dma.h
"

35 
	~"°m32f10x_Êash.h
"

37 
	~"°m32f10x_gpio.h
"

41 
	~"°m32f10x_rcc.h
"

45 
	~"°m32f10x_tim.h
"

48 
	~"misc.h
"

49 
	~"°m32f10x_ô.h
"

57 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@ChillerFWlib/USER/inc/ChillerFWincs.h

16 #i‚de‡ 
__ChûÀrFWöcs_H__


17 
	#__ChûÀrFWöcs_H__


	)

32 
	~"°m32f10x.h
"

46 
	~"J12864.h
"

47 
	~"Dñay_Timî.h
"

49 
	~"Timî.h
"

52 
	~"STM32Fœsh.h
"

	@ChillerFWlib/USER/inc/Delay_Timer.h

1 #i‚de‡
__DELAY_TIMER_H


2 
	#__DELAY_TIMER_H


	)

4 
	#DWT_CR
 *(vﬁ©ûê*)0xE0001000

	)

5 
	#DWT_CYCCNT
 *(vﬁ©ûê*)0xE0001004

	)

6 
	#DEM_CR
 *(vﬁ©ûê*)0xE000EDFC

	)

7 
	#DBGMCU_CR
 *(vﬁ©ûê*)0xE0042004

	)

8 
	#DEM_CR_TRCENA
 (1 << 24)

	)

9 
	#DWT_CR_CYCCNTENA
 (1 << 0)

	)

11 
	#Dñayms
(
m£c
Ë
	`Dñayus
(m£c*1000Ë

	)

13 
	g˝u˛k„q
;

14 
DñayInô
(
˛k
);

15 
Dñayus
(
u£c
);

	@ChillerFWlib/USER/inc/J12864.h

11 #i‚de‡
__J12864_H


12 
	#__J12864_H


	)

14 
	~"°m32f10x.h
"

17 
	#LCD_CONTROL
 
GPIOB


18 
	#LCD_DATAPORT
 
GPIOB


19 

	)

20 
	#LCD_RESET_Pö
 
GPIO_Pö_0


21 
	#LCD_RS_Pö
 
GPIO_Pö_5


22 
	#LCD_RW_Pö
 
GPIO_Pö_6


23 
	#LCD_EN_Pö
 
GPIO_Pö_7


24 
	#LCD_BF_Pö
 15

25 

	)

26 
	#LCD_CONTROL_CLOCK
 
RCC_APB2Pîùh_GPIOB


27 
	#LCD_DATAPORT_CLOCK
 
RCC_APB2Pîùh_GPIOB


28 

	)

29 
	#LCD_RS_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_RS_Pö
;LCD_CONTROL->BSRR |=LCD_RS_Pin

30 
	#LCD_RS_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_RS_Pö
;LCD_CONTROL->BRR |=LCD_RS_Pin

31 
	#LCD_RW_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_RW_Pö
;LCD_CONTROL->BSRR |=LCD_RW_Pin

32 
	#LCD_RW_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_RW_Pö
;LCD_CONTROL->BRR |=LCD_RW_Pin

33 
	#LCD_EN_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_EN_Pö
;LCD_CONTROL->BSRR |=LCD_EN_Pin

34 
	#LCD_EN_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_EN_Pö
;LCD_CONTROL->BRR |=LCD_EN_Pin

35 

	)

36 
	#LCD_RESET_0
 
LCD_CONTROL
->
BRR
 = 
LCD_RESET_Pö


37 
	#LCD_RESET_1
 
LCD_CONTROL
->
BSRR
 = 
LCD_RESET_Pö


38 
	#DATAOUT
 
LCD_DATAPORT
->
ODR
 &=0x00ff;LCD_DATAPORT->ODR

39 
	#DATAIN
 
LCD_DATAPORT
->
IDR


40 
	#LCD_BF
 ((
DATAIN
)& 0x8000)

41 

	)

42 
	#LCD_BF_IN
 
LCD_DATAPORT
->
CRH
 &~(3<<(14<<1));LCD_DATAPORT->CRH &~(3<<(
LCD_BF_Pö
<<1))

43 

	)

44 
	#LCD_BF_OUT
 
LCD_DATAPORT
->
CRH
 |(3<<(14<<1));LCD_DATAPORT->CRH |(0<<(
LCD_BF_Pö
<<1))

45 

	)

47 
LCD_WrôeInôCmd
(
uöt16_t
 
öôcmd
);

48 
LCD_WaôLaisuª
();

49 
LCD_WrôeCmd
(
uöt16_t
 
cmd
);

50 
LCD_WrôeByã
(
uöt16_t
 
byã
);

51 
LCD_pos
(
uöt16_t
 
pos
);

52 
LCD_Sëpos
(
uöt16_t
 
row
,uöt16_à
cﬁ
);

53 
LCD_Di•Ch¨
(
ch
);

54 
LCD_Sëpos_Di•Ch¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
ch
);

55 
LCD_Di•Såög
(
°r
[]);

56 
LCD_Sëpos_Di•Såög
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
°r
[]);

57 
LCD_Di•num
(
uöt32_t
 
num
);

58 
LCD_Sëpos_Di•num
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
);

59 
LCD_Di•DecimÆ
(
uöt32_t
 
num
,
uöt16_t
 
dŸ
);

60 
LCD_Sëpos_Di•DecimÆ
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
,uöt16_à
dŸ
);

61 
LCD_Di•D©eTime
(
uöt32_t
 
yór
,
uöt16_t
 
m⁄th
,uöt16_à
day
,uöt16_à
hour
,uöt16_à
mö
,uöt16_à
£c
);

62 
LCD_Di•Pi˘uª
(c⁄° 
pi˘uª
[]);

63 
LCD_Shi·Le·
();

64 
LCD_Shi·Right
();

65 
LCD_CÀ¨
();

66 
LCD_Rëu∫
();

67 
LCD_Clo£
();

68 
LCD_O≥n
();

69 
LCD_FlickîCh¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
);

70 
LCD_Clo£Flickî
();

71 
LCD_FlickîS¸ìn
();

72 
LCD_PORT_Inô
();

73 
LCD_Inô
();

	@ChillerFWlib/USER/inc/STM32Flash.h

2 #i‚de‡
__STM32FLASH_H


3 
	#__STM32FLASH_H


	)

4 
	~"°m32f10x.h
"

6 
	#STM32_FLASH_SIZE
 256

7 
	#STM32_FLASH_WREN
 1

8 
	#STM32_FLASH_BASE
 0x08000000

9 
	#STM_SECTOR_SIZE
 2048

	)

12 
u16
 
STMFLASH_BUF
[
STM_SECTOR_SIZE
/2];

15 
u16
 
STMFLASH_RódHÆfW‹d
(
u32
 
Áddr
);

16 
STMFLASH_WrôeLíByã
(
u32
 
WrôeAddr
,u32 
D©aToWrôe
,
u16
 
Lí
);

17 
u32
 
STMFLASH_RódLíByã
(u32 
RódAddr
,
u16
 
Lí
);

18 
STMFLASH_Wrôe
(
u32
 
WrôeAddr
,
u16
 *
pBuf„r
,u16 
NumToWrôe
);

19 
STMFLASH_Ród
(
u32
 
RódAddr
,
u16
 *
pBuf„r
,u16 
NumToRód
);

	@ChillerFWlib/USER/inc/Timer.h

1 #i‚de‡
__TIMER_H


2 
	#__TIMER_H


	)

4 
	~"°m32f10x.h
"

8 
	#TIM2_ARR
 ( 7200 - 1 )

9 
	#TIM2_PSC
 ( ( ( 72000000 / 10 ) / ( 
TIM2_ARR
 + 1 ) ) - 1 )

10 

	)

11 
	#START_TIME
 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , 
ENABLE
);
	`TIM_Cmd
(
TIM2
, ENABLE)

	)

12 
	#STOP_TIME
 
	`TIM_Cmd
(
TIM2
, 
DISABLE
);
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , DISABLE)

	)

14 
NVIC_C⁄figuøti⁄
();

15 
TIM2_C⁄figuøti⁄
();

16 
TIM1_Mode_C⁄fig
();

	@ChillerFWlib/USER/src/Delay_Timer.c

10 
	~"Dñay_Timî.h
"

12 
	$DñayInô
(
˛k
){

13 
˝u˛k„q
 = 
˛k
;

14 
DEM_CR
 |
DEM_CR_TRCENA
;

16 
DWT_CR
 |
DWT_CR_CYCCNTENA
;

17 
	}
}

19 
	$Dñayus
(
u£c
){

20 
°¨âs
,
ídts
,
ts
;

21 
°¨âs
 = 
DWT_CYCCNT
;

22 
ts
 = 
u£c
 * (
˝u˛k„q
 /(1000*1000) );

24 
ídts
 = 
°¨âs
 + 
ts
;

26 if(
ídts
 > 
°¨âs
){

27 
DWT_CYCCNT
 < 
ídts
);

30 
DWT_CYCCNT
 > 
ídts
);

31 
DWT_CYCCNT
 < 
ídts
);

34 
	}
}

	@ChillerFWlib/USER/src/J12864.c

12 
	~"ChûÀrFWöcs.h
"

18 
	$LCD_WrôeInôCmd
(
uöt16_t
 
öôcmd
){

19 
LCD_RS_0
;

20 
LCD_RW_0
;

21 
	`Dñayus
(1);

22 
LCD_EN_1
;

23 
	`Dñayus
(1);

24 
DATAOUT
 |(
öôcmd
<<8);

25 
	`Dñayus
(800);

26 
LCD_EN_0
;

27 
LCD_RW_1
;

28 
	`Dñayus
(1);

29 
	}
}

35 
	$LCD_WaôLaisuª
(){

36 
uöt16_t
 
Êag
=0x00;

37 
LCD_BF_IN
;

38 
	`Dñayus
(1);

39 
LCD_RS_0
;

40 
LCD_RW_1
;

41 
	`Dñayus
(1);

43 
LCD_EN_0
;

44 
	`Dñayus
(500);

45 
LCD_EN_1
;

46 
	`Dñayus
(500);

47 
Êag
=(
uöt16_t
)
LCD_BF
;

48 }
Êag
);

49 
LCD_BF_OUT
;

50 
	`Dñayus
(1);

51 
	}
}

58 
	$LCD_WrôeCmd
(
uöt16_t
 
cmd
){

59 
	`LCD_WaôLaisuª
();

60 
LCD_RS_0
;

61 
LCD_RW_0
;

62 
	`Dñayus
(1);

63 
LCD_EN_1
;

64 
	`Dñayus
(1);

65 
DATAOUT
 |(
cmd
<<8);

66 
	`Dñayus
(800);

67 
LCD_EN_0
;

68 
LCD_RW_1
;

69 
	`Dñayus
(1);

70 
	}
}

76 
	$LCD_WrôeByã
(
uöt16_t
 
byã
){

77 
	`LCD_WaôLaisuª
();

78 
LCD_RS_1
;

79 
LCD_RW_0
;

80 
	`Dñayus
(1);

81 
LCD_EN_1
;

82 
	`Dñayus
(1);

83 
DATAOUT
 |(
byã
<<8);

84 
	`Dñayus
(800);

85 
LCD_EN_0
;

86 
LCD_RW_1
;

87 
	`Dñayus
(1);

88 
DATAOUT
 |= (0<<8);

89 
	}
}

96 
	$LCD_pos
(
uöt16_t
 
pos
){

97 
	`LCD_WrôeCmd
(
pos
);

98 
	}
}

104 
	$LCD_Sëpos
(
uöt16_t
 
row
,uöt16_à
cﬁ
){

106 
uöt16_t
 
pos
;

107 
pos
=0x00;

108 if(
row
+1>3)

109 
pos
=0x08;

110 if(
row
 & 0x01)

111 
pos
 |= 0x80;

113 
pos
 |= 0x90;

114 
pos
 +
cﬁ
-1;

115 
	`LCD_WrôeCmd
(
pos
);

116 
	}
}

122 
	$LCD_Di•Ch¨
(
ch
){

123 
	`LCD_WrôeByã
(
ch
);

124 
	}
}

130 
	$LCD_Sëpos_Di•Ch¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
ch
){

131 
	`LCD_Sëpos
(
row
,
cﬁ
);

132 
	`LCD_WrôeByã
(
ch
);

133 
	}
}

139 
	$LCD_Di•Såög
(
°r
[]){

140 
uöt16_t
 
i
;

141 
i
=0;

142 
i
=0;
°r
[i]!='\0';i++)

143 
	`LCD_WrôeByã
(
°r
[
i
]);

144 
	}
}

151 
	$LCD_Sëpos_Di•Såög
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
°r
[]){

152 
	`LCD_Sëpos
(
row
,
cﬁ
);

153 
	`LCD_Di•Såög
(
°r
);

154 
	}
}

161 
	$LCD_Di•num
(
uöt32_t
 
num
)

163 
°r
[12];

164 
uöt32_t
 
q
;

165 
uöt16_t
 
wei
,
i
,
j
,
k
;

166 if(
num
>=10000000)
wei
=8;

167 if(
num
>=1000000)
wei
=7;

168 if(
num
>=100000)
wei
=6;

169 if(
num
>=10000)
wei
=5;

170 if(
num
>=1000Ë
wei
=4;

171 if(
num
>=100)
wei
=3;

172 if(
num
>=10Ë
wei
=2;

173 
wei
=1;

174 
k
=0;

175 
i
=
wei
;i>0;i--)

176 { 
q
=1;

177 
j
=1;

178 ;
j
<
i
;j++)
q
 *=10;

179 
°r
[
k
++]=
num
/
q
 +'0';

180 
num
 %
q
;

182 
°r
[
k
] = '\0';

183 
	`LCD_Di•Såög
(
°r
);

184 
	}
}

191 
	$LCD_Sëpos_Di•num
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
)

193 
	`LCD_Sëpos
(
row
,
cﬁ
);

194 
	`LCD_Di•num
(
num
);

195 
	}
}

201 
	$LCD_Di•DecimÆ
(
uöt32_t
 
num
,
uöt16_t
 
dŸ
){

203 
uöt32_t
 
i
,
j
,
k
,
wei
;

204 
uöt32_t
 
q
;

205 
°r
[10];

206 
i
=0;

207 
j
=0;

208 
k
=0;

209 
wei
=0;

210 
q
=0;

211 if(
num
>=10000000)

212 
wei
=8;

213 if(
num
>=1000000)

214 
wei
=7;

215 if(
num
>=100000)

216 
wei
=6;

217 if(
num
>=10000)

218 
wei
=5;

219 if(
num
>=1000)

220 
wei
=4;

221 if(
num
>=100)

222 
wei
=3;

223 if(
num
>=10)

224 
wei
=2;

226 
wei
=1;

227 
i
=
wei
;i>0;i--){

228 
q
=1;

229 
j
=1;

230 ;
j
<
i
;j++)

231 
q
 *=10;

232 
°r
[
k
++]=
num
/
q
 +'0';

233 
num
 %
q
;

236 
i
=8;i>0;i--){

237 if((
°r
[
i
]>='0')&&(str[i]<='9'))

240 
i
=
wei
-1;

242 
j
=0;j<
dŸ
;j++,
i
--){

243 
°r
[
i
+1]=str[i];

245 
°r
[
wei
-
dŸ
]='.';

246 
°r
[
wei
+1]='\0';

247 
	`LCD_Di•Såög
(
°r
);

248 
	}
}

255 
	$LCD_Sëpos_Di•DecimÆ
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
,uöt16_à
dŸ
){

256 
	`LCD_Sëpos
(
row
,
cﬁ
);

257 
	`LCD_Di•DecimÆ
(
num
,
dŸ
);

258 
	}
}

265 
	$LCD_Di•D©eTime
(
uöt32_t
 
yór
,
uöt16_t
 
m⁄th
,uöt16_à
day
,uöt16_à
hour
,uöt16_à
mö
,uöt16_à
£c
){

267 
	`LCD_Sëpos
(1,0);

268 
	`LCD_Di•Såög
("Date:");

269 
	`LCD_Di•num
((
uöt32_t
)
yór
);

270 
	`LCD_Di•Ch¨
('-');

271 
	`LCD_Di•num
((
uöt32_t
)
m⁄th
);

272 
	`LCD_Di•Ch¨
('-');

273 
	`LCD_Di•num
((
uöt32_t
)
day
);

274 if((
m⁄th
<10)&&(
day
<10))

276 
	`LCD_Di•Ch¨
(' ');

277 
	`LCD_Di•Ch¨
(' ');

279 if(((
m⁄th
<10)&&(
day
>9))||((month>9)&&(day<10)))

280 
	`LCD_Di•Ch¨
(' ');

281 
	`LCD_Sëpos
(1,15);

285 
	`LCD_Di•Ch¨
('*');

286 
	`LCD_Sëpos
(2,0);

287 
	`LCD_Di•Såög
("Time:");

288 
	`LCD_Di•num
((
uöt32_t
)
hour
);

289 
	`LCD_Di•Ch¨
(':');

290 
	`LCD_Di•num
((
uöt32_t
)
mö
);

291 
	`LCD_Di•Ch¨
(':');

292 
	`LCD_Di•num
((
uöt32_t
)
£c
);

293 if(
£c
==0)

294 
	`LCD_Di•Ch¨
('0');

295 
	`LCD_Di•Ch¨
(' ');

296 
	`LCD_Di•Ch¨
(' ');

297 if((
hour
<10)&&(
mö
<10)&&(
£c
>0)&&(sec<10))

298 
	`LCD_Di•Ch¨
(' ');

299 
	`LCD_Sëpos
(2,15);

303 
	`LCD_Di•Ch¨
('*');

304 
	}
}

311 
	$LCD_Di•Pi˘uª
(c⁄° 
pi˘uª
[]){

312 
uöt16_t
 
i
,
j
;

313 
	`LCD_WrôeCmd
(0x34);

314 
	`Dñayms
(20);

315 
i
=0;i<32;i++)

317 
	`LCD_WrôeCmd
(0x80+
i
);

318 
	`Dñayms
(150);

319 
	`LCD_WrôeCmd
(0x80);

320 
	`Dñayms
(150);

321 
j
=0;j<16;j++)

323 
	`LCD_WrôeByã
(
pi˘uª
[
j
]);

324 
	`Dñayms
(150);

326 
	`Dñayms
(150);

328 
	`LCD_WrôeCmd
(0x36);

329 
	`Dñayms
(50);

330 
	}
}

336 
	$LCD_Shi·Le·
()

338 
	`LCD_WrôeCmd
(0x18);

339 
	}
}

345 
	$LCD_Shi·Right
()

347 
	`LCD_WrôeCmd
(0x1C);

348 
	}
}

354 
	$LCD_CÀ¨
(){

355 
	`LCD_WrôeCmd
(0x01);

356 
	}
}

362 
	$LCD_Rëu∫
(){

363 
	`LCD_WrôeCmd
(0x02);

364 
	}
}

370 
	$LCD_Clo£
(){

371 
	`LCD_WrôeCmd
(0x08);

372 
	}
}

378 
	$LCD_O≥n
(){

379 
	`LCD_WrôeCmd
(0x0C);

380 
	}
}

386 
	$LCD_FlickîCh¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
){

387 
	`LCD_WrôeCmd
(0x0D);

388 
	`LCD_Sëpos
(
row
,
cﬁ
);

389 
	}
}

395 
	$LCD_Clo£Flickî
(){

396 
	`LCD_WrôeCmd
(0x0C);

397 
	}
}

403 
	$LCD_FlickîS¸ìn
(){

404 
	`LCD_WrôeCmd
(0x08);

405 
	`Dñayms
(500);

406 
	`LCD_WrôeCmd
(0x0C);

407 
	`Dñayms
(500);

408 
	}
}

414 
	$LCD_PORT_Inô
(){

415 
GPIO_InôTy≥Def
 
LCD_p‹t
;

416 
	`RCC_APB2PîùhClockCmd
(
LCD_CONTROL_CLOCK
 ,
ENABLE
);

417 
	`RCC_APB2PîùhClockCmd
(
LCD_DATAPORT_CLOCK
 ,
ENABLE
);

419 
LCD_p‹t
.
GPIO_Pö
 = (
uöt16_t
)0xff00;

420 
LCD_p‹t
.
GPIO_S≥ed

GPIO_S≥ed_50MHz
;

422 
LCD_p‹t
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

423 
	`GPIO_Inô
(
LCD_DATAPORT
,&
LCD_p‹t
);

425 
LCD_p‹t
.
GPIO_Pö
 |(
LCD_RESET_Pö
 | 
LCD_RS_Pö
 | 
LCD_RW_Pö
 | 
LCD_EN_Pö
);

426 
LCD_p‹t
.
GPIO_S≥ed

GPIO_S≥ed_50MHz
;

428 
LCD_p‹t
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

429 
	`GPIO_Inô
(
LCD_CONTROL
,&
LCD_p‹t
);

430 
	}
}

436 
	$LCD_Inô
(){

437 
LCD_RESET_0
;

438 
	`Dñayms
(300);

439 
LCD_RESET_1
;

440 
	`Dñayms
(300);

441 
	`LCD_WrôeInôCmd
(0x30);

442 
	`LCD_WrôeInôCmd
(0x0C);

443 
	`LCD_WrôeInôCmd
(0x01);

444 
	`LCD_WrôeInôCmd
(0x02);

445 
	`LCD_WrôeInôCmd
(0x06);

446 
	}
}

	@ChillerFWlib/USER/src/STM32Flash.c

2 
	~"ChûÀrFWöcs.h
"

3 
u16
 
	gSTMFLASH_BUF
[
STM_SECTOR_SIZE
/2];

10 
u16
 
	$STMFLASH_RódHÆfW‹d
(
u32
 
Áddr
)

12  *(
vu16
*)
Áddr
;

13 
	}
}

22 
	$STMFLASH_Wrôe_NoCheck
(
u32
 
WrôeAddr
,
u16
 *
pBuf„r
,u16 
NumToWrôe
)

24 
u16
 
i
;

25 
i
=0;i<
NumToWrôe
;i++)

27 
	`FLASH_ProgømHÆfW‹d
(
WrôeAddr
,
pBuf„r
[
i
]);

28 
WrôeAddr
+=2;

30 
	}
}

39 
	$STMFLASH_Wrôe
(
u32
 
WrôeAddr
,
u16
 *
pBuf„r
,u16 
NumToWrôe
)

41 
u32
 
£˝os
;

42 
u16
 
£coff
;

43 
u16
 
£¸emaö
;

44 
u16
 
i
;

45 
u32
 
ofÁddr
;

46 if((
WrôeAddr
<
STM32_FLASH_BASE
)||(WrôeAddr>=(STM32_FLASH_BASE+1024*
STM32_FLASH_SIZE
)))

48 
	`FLASH_U∆ock
();

49 
ofÁddr
=
WrôeAddr
-
STM32_FLASH_BASE
;

50 
£˝os
=
ofÁddr
/
STM_SECTOR_SIZE
;

51 
£coff
=(
ofÁddr
%
STM_SECTOR_SIZE
)/2;

52 
£¸emaö
=
STM_SECTOR_SIZE
/2-
£coff
;

53 if(
NumToWrôe
<=
£¸emaö
)

54 
£¸emaö
=
NumToWrôe
;

57 
	`STMFLASH_Ród
(
£˝os
*
STM_SECTOR_SIZE
+
STM32_FLASH_BASE
,
STMFLASH_BUF
,STM_SECTOR_SIZE/2);

58 
i
=0;i<
£¸emaö
;i++)

60 if(
STMFLASH_BUF
[
£coff
+
i
]!=0XFFFF)

63 if(
i
<
£¸emaö
)

65 
	`FLASH_Eø£Page
(
£˝os
*
STM_SECTOR_SIZE
+
STM32_FLASH_BASE
);

66 
i
=0;i<
£¸emaö
;i++)

68 
STMFLASH_BUF
[
i
+
£coff
]=
pBuf„r
[i];

70 
	`STMFLASH_Wrôe_NoCheck
(
£˝os
*
STM_SECTOR_SIZE
+
STM32_FLASH_BASE
,
STMFLASH_BUF
,STM_SECTOR_SIZE/2);

73 
	`STMFLASH_Wrôe_NoCheck
(
WrôeAddr
,
pBuf„r
,
£¸emaö
);

74 if(
NumToWrôe
==
£¸emaö
)

78 
£˝os
++;

79 
£coff
=0;

80 
pBuf„r
+=
£¸emaö
;

81 
WrôeAddr
+=
£¸emaö
;

82 
NumToWrôe
-=
£¸emaö
;

83 if(
NumToWrôe
>(
STM_SECTOR_SIZE
/2))

84 
£¸emaö
=
STM_SECTOR_SIZE
/2;

86 
£¸emaö
=
NumToWrôe
;

89 
	`FLASH_Lock
();

90 
	}
}

99 
	$STMFLASH_Ród
(
u32
 
RódAddr
,
u16
 *
pBuf„r
,u16 
NumToRód
)

101 
u16
 
i
;

102 
i
=0;i<(
NumToRód
-5);i++)

104 
pBuf„r
[
i
]=
	`STMFLASH_RódHÆfW‹d
(
RódAddr
);

105 
RódAddr
+=2;

107 
	}
}

	@ChillerFWlib/USER/src/Timer.c

11 
	~"ChûÀrFWöcs.h
"

17 
	$NVIC_C⁄figuøti⁄
()

19 
NVIC_InôTy≥Def
 
TIM2_NVIC_InôSåu˘uª
,
DMA1_NVIC_InôSåu˘uª
;

23 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_0
);

24 
TIM2_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM2_IRQn
;

25 
TIM2_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

26 
TIM2_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 3;

27 
TIM2_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

28 
	`NVIC_Inô
(&
TIM2_NVIC_InôSåu˘uª
);

32 
DMA1_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
DMA1_Ch™√l1_IRQn
;

33 
DMA1_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

34 
DMA1_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

35 
DMA1_NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

36 
	`NVIC_Inô
(&
DMA1_NVIC_InôSåu˘uª
);

37 
	}
}

45 
	$TIM2_C⁄figuøti⁄
()

47 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

48 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , 
ENABLE
);

49 
	`TIM_DeInô
(
TIM2
);

50 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
=
TIM2_ARR
;

52 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr

TIM2_PSC
;

53 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
=
TIM_Cou¡îMode_Up
;

54 
	`TIM_TimeBa£Inô
(
TIM2
, &
TIM_TimeBa£Såu˘uª
);

55 
	`TIM_CÀ¨Fœg
(
TIM2
, 
TIM_FLAG_Upd©e
);

56 
	`TIM_ITC⁄fig
(
TIM2
,
TIM_IT_Upd©e
,
ENABLE
);

57 
	`TIM_Cmd
(
TIM2
, 
ENABLE
);

58 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , 
DISABLE
);

59 
	}
}

65 
	$TIM1_Mode_C⁄fig
()

67 
vu16
 
c¸1
=5000;

68 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

69 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘uª
;

70 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_TIM1
 , 
ENABLE
);

81 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 10000;

82 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = (3600-1);

83 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 0;

84 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

85 
	`TIM_TimeBa£Inô
(
TIM1
, &
TIM_TimeBa£Såu˘uª
);

88 
TIM_OCInôSåu˘uª
.
TIM_OCMode
 = 
TIM_OCMode_PWM2
;

89 
TIM_OCInôSåu˘uª
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

90 
TIM_OCInôSåu˘uª
.
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_E«bÀ
;

91 
TIM_OCInôSåu˘uª
.
TIM_Pul£
 = 
c¸1
;

92 
TIM_OCInôSåu˘uª
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

93 
TIM_OCInôSåu˘uª
.
TIM_OCNPﬁ¨ôy
 = 
TIM_OCNPﬁ¨ôy_Low
;

94 
TIM_OCInôSåu˘uª
.
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Së
;

95 
TIM_OCInôSåu˘uª
.
TIM_OCNIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

97 
	`TIM_OC1Inô
(
TIM1
, &
TIM_OCInôSåu˘uª
);

98 
	`TIM_OC1PªlﬂdC⁄fig
(
TIM1
, 
TIM_OCPªlﬂd_E«bÀ
);

99 
	`TIM_ARRPªlﬂdC⁄fig
(
TIM1
, 
ENABLE
);

101 
	`TIM_Cmd
(
TIM1
, 
ENABLE
);

102 
	`TIM_CålPWMOuçuts
(
TIM1
, 
ENABLE
);

103 
	}
}

	@ChillerMonitorRev2.0/CMSIS/core_cm3.c

24 
	~<°döt.h
>

28 #i‡
deföed
 ( 
__CC_ARM
 )

29 
	#__ASM
 
__asm


	)

30 
	#__INLINE
 
__ölöe


	)

32 #ñi‡
deföed
 ( 
__ICCARM__
 )

33 
	#__ASM
 
__asm


	)

34 
	#__INLINE
 
ölöe


	)

35 
	#__n›
 
__no_›î©i⁄


	)

37 #ñi‡
deföed
 ( 
__GNUC__
 )

38 
	#__ASM
 
asm


	)

39 
	#__INLINE
 
ölöe


	)

44 #i‡
deföed
 ( 
__CC_ARM
 )

54 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

56 
mrs
 
r0
, 
p•


57 
bx
 
Ã


58 
	}
}

69 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

71 
m§
 
p•
, 
r0


72 
bx
 
Ã


73 
	}
}

84 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

86 
mrs
 
r0
, 
m•


87 
bx
 
Ã


88 
	}
}

99 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

101 
m§
 
m•
, 
r0


102 
bx
 
Ã


103 
	}
}

113 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

115 
ªv16
 
r0
,Ñ0

116 
bx
 
Ã


117 
	}
}

127 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

129 
ªvsh
 
r0
,Ñ0

130 
bx
 
Ã


131 
	}
}

134 #i‡(
__ARMCC_VERSION
 < 400000)

144 
__ASM
 
	$__CLREX
()

146 
˛ªx


147 
	}
}

157 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

159 
mrs
 
r0
, 
ba£¥i


160 
bx
 
Ã


161 
	}
}

171 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

173 
m§
 
ba£¥i
, 
r0


174 
bx
 
Ã


175 
	}
}

186 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

188 
mrs
 
r0
, 
¥imask


189 
bx
 
Ã


190 
	}
}

200 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

202 
m§
 
¥imask
, 
r0


203 
bx
 
Ã


204 
	}
}

214 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

216 
mrs
 
r0
, 
Áu…mask


217 
bx
 
Ã


218 
	}
}

228 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

230 
m§
 
Áu…mask
, 
r0


231 
bx
 
Ã


232 
	}
}

242 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

244 
mrs
 
r0
, 
c⁄åﬁ


245 
bx
 
Ã


246 
	}
}

256 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

258 
m§
 
c⁄åﬁ
, 
r0


259 
bx
 
Ã


260 
	}
}

265 #ñi‡(
deföed
 (
__ICCARM__
))

266 #¥agm®
düg_suµªss
=
Pe940


276 
uöt32_t
 
	$__gë_PSP
()

278 
	`__ASM
("mrsÑ0,Ösp");

279 
	`__ASM
("bxÜr");

280 
	}
}

291 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

293 
	`__ASM
("msrÖsp,Ñ0");

294 
	`__ASM
("bxÜr");

295 
	}
}

306 
uöt32_t
 
	$__gë_MSP
()

308 
	`__ASM
("mrsÑ0, msp");

309 
	`__ASM
("bxÜr");

310 
	}
}

321 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

323 
	`__ASM
("msr msp,Ñ0");

324 
	`__ASM
("bxÜr");

325 
	}
}

335 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

337 
	`__ASM
("rev16Ñ0,Ñ0");

338 
	`__ASM
("bxÜr");

339 
	}
}

349 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

351 
	`__ASM
("rbitÑ0,Ñ0");

352 
	`__ASM
("bxÜr");

353 
	}
}

363 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

365 
	`__ASM
("ldrexbÑ0, [r0]");

366 
	`__ASM
("bxÜr");

367 
	}
}

377 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

379 
	`__ASM
("ldrexhÑ0, [r0]");

380 
	`__ASM
("bxÜr");

381 
	}
}

391 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

393 
	`__ASM
("ldrexÑ0, [r0]");

394 
	`__ASM
("bxÜr");

395 
	}
}

406 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

408 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

409 
	`__ASM
("bxÜr");

410 
	}
}

421 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

423 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

424 
	`__ASM
("bxÜr");

425 
	}
}

436 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

438 
	`__ASM
("strexÑ0,Ñ0, [r1]");

439 
	`__ASM
("bxÜr");

440 
	}
}

442 #¥agm®
düg_deÁu…
=
Pe940


445 #ñi‡(
deföed
 (
__GNUC__
))

455 
uöt32_t
 
	$__gë_PSP
()

457 
uöt32_t
 
ªsu…
=0;

459 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

460 (
ªsu…
);

461 
	}
}

472 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

474 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) );

475 
	}
}

486 
uöt32_t
 
	$__gë_MSP
()

488 
uöt32_t
 
ªsu…
=0;

490 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

491 (
ªsu…
);

492 
	}
}

503 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

505 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) );

506 
	}
}

516 
uöt32_t
 
	$__gë_BASEPRI
()

518 
uöt32_t
 
ªsu…
=0;

520 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

521 (
ªsu…
);

522 
	}
}

532 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

534 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

535 
	}
}

546 
uöt32_t
 
	$__gë_PRIMASK
()

548 
uöt32_t
 
ªsu…
=0;

550 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

551 (
ªsu…
);

552 
	}
}

562 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

564 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

565 
	}
}

575 
uöt32_t
 
	$__gë_FAULTMASK
()

577 
uöt32_t
 
ªsu…
=0;

579 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

580 (
ªsu…
);

581 
	}
}

591 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

593 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

594 
	}
}

604 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

606 
uöt32_t
 
ªsu…
=0;

608 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

609 (
ªsu…
);

610 
	}
}

620 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

622 
uöt32_t
 
ªsu…
=0;

624 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

625 (
ªsu…
);

626 
	}
}

636 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

638 
uöt32_t
 
ªsu…
=0;

640 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

641 (
ªsu…
);

642 
	}
}

652 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

654 
uöt32_t
 
ªsu…
=0;

656 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

657 (
ªsu…
);

658 
	}
}

668 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

670 
uöt8_t
 
ªsu…
=0;

672 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

673 (
ªsu…
);

674 
	}
}

684 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

686 
uöt16_t
 
ªsu…
=0;

688 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

689 (
ªsu…
);

690 
	}
}

700 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

702 
uöt32_t
 
ªsu…
=0;

704 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

705 (
ªsu…
);

706 
	}
}

717 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

719 
uöt32_t
 
ªsu…
=0;

721 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

722 (
ªsu…
);

723 
	}
}

734 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

736 
uöt32_t
 
ªsu…
=0;

738 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

739 (
ªsu…
);

740 
	}
}

751 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

753 
uöt32_t
 
ªsu…
=0;

755 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

756 (
ªsu…
);

757 
	}
}

767 
uöt32_t
 
	$__gë_CONTROL
()

769 
uöt32_t
 
ªsu…
=0;

771 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

772 (
ªsu…
);

773 
	}
}

783 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

785 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

786 
	}
}

	@ChillerMonitorRev2.0/CMSIS/core_cm3.h

25 #i‚de‡
__CM3_CORE_H__


26 
	#__CM3_CORE_H__


	)

29 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

30 
	#__CM3_CMSIS_VERSION_SUB
 (0x10Ë

	)

31 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

33 
	#__CORTEX_M
 (0x03Ë

	)

85 
	~<°döt.h
>

87 #i‡
deföed
 (
__ICCARM__
)

88 
	~<öåösics.h
>

92 #i‚de‡
__NVIC_PRIO_BITS


93 
	#__NVIC_PRIO_BITS
 4

	)

105 
	#__I
 vﬁ©ûêc⁄°

	)

106 
	#__O
 vﬁ©ûê

	)

107 
	#__IO
 vﬁ©ûê

	)

117 
	#NVIC_VECTRESET
 0

	)

118 
	#NVIC_SYSRESETREQ
 2

	)

119 
	#NVIC_AIRCR_VECTKEY
 (0x5FA << 16Ë

	)

120 
	#NVIC_AIRCR_ENDIANESS
 15

	)

123 
	#C‹eDebug_DEMCR_TRCENA
 (1 << 24Ë

	)

124 
	#ITM_TCR_ITMENA
 1

	)

132 
__IO
 
uöt32_t
 
	mISER
[8];

133 
uöt32_t
 
	mRESERVED0
[24];

134 
__IO
 
uöt32_t
 
	mICER
[8];

135 
uöt32_t
 
	mRSERVED1
[24];

136 
__IO
 
uöt32_t
 
	mISPR
[8];

137 
uöt32_t
 
	mRESERVED2
[24];

138 
__IO
 
uöt32_t
 
	mICPR
[8];

139 
uöt32_t
 
	mRESERVED3
[24];

140 
__IO
 
uöt32_t
 
	mIABR
[8];

141 
uöt32_t
 
	mRESERVED4
[56];

142 
__IO
 
uöt8_t
 
	mIP
[240];

143 
uöt32_t
 
	mRESERVED5
[644];

144 
__O
 
uöt32_t
 
	mSTIR
;

145 } 
	tNVIC_Ty≥
;

151 
__I
 
uöt32_t
 
	mCPUID
;

152 
__IO
 
uöt32_t
 
	mICSR
;

153 
__IO
 
uöt32_t
 
	mVTOR
;

154 
__IO
 
uöt32_t
 
	mAIRCR
;

155 
__IO
 
uöt32_t
 
	mSCR
;

156 
__IO
 
uöt32_t
 
	mCCR
;

157 
__IO
 
uöt8_t
 
	mSHP
[12];

158 
__IO
 
uöt32_t
 
	mSHCSR
;

159 
__IO
 
uöt32_t
 
	mCFSR
;

160 
__IO
 
uöt32_t
 
	mHFSR
;

161 
__IO
 
uöt32_t
 
	mDFSR
;

162 
__IO
 
uöt32_t
 
	mMMFAR
;

163 
__IO
 
uöt32_t
 
	mBFAR
;

164 
__IO
 
uöt32_t
 
	mAFSR
;

165 
__I
 
uöt32_t
 
	mPFR
[2];

166 
__I
 
uöt32_t
 
	mDFR
;

167 
__I
 
uöt32_t
 
	mADR
;

168 
__I
 
uöt32_t
 
	mMMFR
[4];

169 
__I
 
uöt32_t
 
	mISAR
[5];

170 } 
	tSCB_Ty≥
;

176 
__IO
 
uöt32_t
 
	mCTRL
;

177 
__IO
 
uöt32_t
 
	mLOAD
;

178 
__IO
 
uöt32_t
 
	mVAL
;

179 
__I
 
uöt32_t
 
	mCALIB
;

180 } 
	tSysTick_Ty≥
;

186 
__O
 union

188 
__O
 
uöt8_t
 
	mu8
;

189 
__O
 
uöt16_t
 
	mu16
;

190 
__O
 
uöt32_t
 
	mu32
;

191 } 
	mPORT
 [32];

192 
uöt32_t
 
	mRESERVED0
[864];

193 
__IO
 
uöt32_t
 
	mTER
;

194 
uöt32_t
 
	mRESERVED1
[15];

195 
__IO
 
uöt32_t
 
	mTPR
;

196 
uöt32_t
 
	mRESERVED2
[15];

197 
__IO
 
uöt32_t
 
	mTCR
;

198 
uöt32_t
 
	mRESERVED3
[29];

199 
__IO
 
uöt32_t
 
	mIWR
;

200 
__IO
 
uöt32_t
 
	mIRR
;

201 
__IO
 
uöt32_t
 
	mIMCR
;

202 
uöt32_t
 
	mRESERVED4
[43];

203 
__IO
 
uöt32_t
 
	mLAR
;

204 
__IO
 
uöt32_t
 
	mLSR
;

205 
uöt32_t
 
	mRESERVED5
[6];

206 
__I
 
uöt32_t
 
	mPID4
;

207 
__I
 
uöt32_t
 
	mPID5
;

208 
__I
 
uöt32_t
 
	mPID6
;

209 
__I
 
uöt32_t
 
	mPID7
;

210 
__I
 
uöt32_t
 
	mPID0
;

211 
__I
 
uöt32_t
 
	mPID1
;

212 
__I
 
uöt32_t
 
	mPID2
;

213 
__I
 
uöt32_t
 
	mPID3
;

214 
__I
 
uöt32_t
 
	mCID0
;

215 
__I
 
uöt32_t
 
	mCID1
;

216 
__I
 
uöt32_t
 
	mCID2
;

217 
__I
 
uöt32_t
 
	mCID3
;

218 } 
	tITM_Ty≥
;

224 
uöt32_t
 
	mRESERVED0
;

225 
__I
 
uöt32_t
 
	mICTR
;

226 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

227 
__IO
 
uöt32_t
 
	mACTLR
;

229 
uöt32_t
 
	mRESERVED1
;

231 } 
	tI¡îru±Ty≥_Ty≥
;

235 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

238 
__I
 
uöt32_t
 
	mTYPE
;

239 
__IO
 
uöt32_t
 
	mCTRL
;

240 
__IO
 
uöt32_t
 
	mRNR
;

241 
__IO
 
uöt32_t
 
	mRBAR
;

242 
__IO
 
uöt32_t
 
	mRASR
;

243 
__IO
 
uöt32_t
 
	mRBAR_A1
;

244 
__IO
 
uöt32_t
 
	mRASR_A1
;

245 
__IO
 
uöt32_t
 
	mRBAR_A2
;

246 
__IO
 
uöt32_t
 
	mRASR_A2
;

247 
__IO
 
uöt32_t
 
	mRBAR_A3
;

248 
__IO
 
uöt32_t
 
	mRASR_A3
;

249 } 
	tMPU_Ty≥
;

256 
__IO
 
uöt32_t
 
	mDHCSR
;

257 
__O
 
uöt32_t
 
	mDCRSR
;

258 
__IO
 
uöt32_t
 
	mDCRDR
;

259 
__IO
 
uöt32_t
 
	mDEMCR
;

260 } 
	tC‹eDebug_Ty≥
;

264 
	#SCS_BASE
 (0xE000E000Ë

	)

265 
	#ITM_BASE
 (0xE0000000Ë

	)

266 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

267 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

268 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

269 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

271 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

272 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

273 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

274 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

275 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

276 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

278 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

279 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

280 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

290 #i‡
deföed
 ( 
__CC_ARM
 )

291 
	#__ASM
 
__asm


	)

292 
	#__INLINE
 
__ölöe


	)

294 #ñi‡
deföed
 ( 
__ICCARM__
 )

295 
	#__ASM
 
__asm


	)

296 
	#__INLINE
 
ölöe


	)

297 
	#__NOP
 
__no_›î©i⁄


	)

299 #ñi‡
deföed
 ( 
__GNUC__
 )

300 
	#__ASM
 
asm


	)

301 
	#__INLINE
 
ölöe


	)

308 #i‡
deföed
 ( 
__CC_ARM
 )

311 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

312 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

314 
	#__NOP
 
__n›


	)

315 
	#__WFI
 
__wfi


	)

316 
	#__WFE
 
__w„


	)

317 
	#__SEV
 
__£v


	)

318 
	#__ISB
(Ë
	`__isb
(0)

	)

319 
	#__DSB
(Ë
	`__dsb
(0)

	)

320 
	#__DMB
(Ë
	`__dmb
(0)

	)

321 
	#__REV
 
__ªv


	)

322 
	#__RBIT
 
__rbô


	)

323 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

324 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

325 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

326 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

327 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

328 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

345 
uöt32_t
 
__gë_PSP
();

356 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

367 
uöt32_t
 
__gë_MSP
();

378 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

388 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

398 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

401 #i‡(
__ARMCC_VERSION
 < 400000)

411 
__CLREX
();

421 
uöt32_t
 
__gë_BASEPRI
();

431 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

442 
uöt32_t
 
__gë_PRIMASK
();

452 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

462 
uöt32_t
 
__gë_FAULTMASK
();

472 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

482 
uöt32_t
 
__gë_CONTROL
();

492 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

505 
	#__CLREX
 
__˛ªx


	)

515 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

517 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

518 (
__ªgBa£Pri
);

519 
	}
}

529 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

531 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

532 
__ªgBa£Pri
 = (
ba£Pri
 & 0x1ff);

533 
	}
}

544 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

546 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

547 (
__ªgPriMask
);

548 
	}
}

558 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

560 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

561 
__ªgPriMask
 = (
¥iMask
);

562 
	}
}

572 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

574 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

575 (
__ªgFau…Mask
);

576 
	}
}

586 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

588 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

589 
__ªgFau…Mask
 = (
Áu…Mask
 & 1);

590 
	}
}

600 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

602 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

603 (
__ªgC⁄åﬁ
);

604 
	}
}

614 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

616 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

617 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

618 
	}
}

624 #ñi‡(
deföed
 (
__ICCARM__
))

627 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

628 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

630 
__INLINE
 
	$__íabÀ_Áu…_úq
(Ë{ 
	`__ASM
 ("˝sõ f"); 
	}
}

631 
__INLINE
 
	$__dißbÀ_Áu…_úq
(Ë{ 
	`__ASM
 ("˝sid f"); 
	}
}

633 
__INLINE
 
	$__WFI
(Ë{ 
	`__ASM
 ("wfi"); 
	}
}

634 
__INLINE
 
	$__WFE
(Ë{ 
	`__ASM
 ("w„"); 
	}
}

635 
__INLINE
 
	$__SEV
(Ë{ 
	`__ASM
 ("£v"); 
	}
}

636 
__INLINE
 
	$__CLREX
(Ë{ 
	`__ASM
 ("˛ªx"); 
	}
}

646 
uöt32_t
 
__gë_PSP
();

657 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

668 
uöt32_t
 
__gë_MSP
();

679 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

689 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

699 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

709 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

719 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

729 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

740 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

751 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

762 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

776 #ñi‡(
deföed
 (
__GNUC__
))

779 
__INLINE
 
	$__NOP
(Ë{ 
__ASM
 vﬁ©ûê("n›"); 
	}
}

780 
__INLINE
 
	$__íabÀ_úq
(Ë{ 
__ASM
 vﬁ©ûê("˝sõ i"); 
	}
}

781 
__INLINE
 
	$__dißbÀ_úq
(Ë{ 
__ASM
 vﬁ©ûê("˝sid i"); 
	}
}

783 
__INLINE
 
	$__íabÀ_Áu…_úq
(Ë{ 
__ASM
 vﬁ©ûê("˝sõ f"); 
	}
}

784 
__INLINE
 
	$__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 vﬁ©ûê("˝sid f"); 
	}
}

786 
__INLINE
 
	$__WFI
(Ë{ 
__ASM
 vﬁ©ûê("wfi"); 
	}
}

787 
__INLINE
 
	$__WFE
(Ë{ 
__ASM
 vﬁ©ûê("w„"); 
	}
}

788 
__INLINE
 
	$__SEV
(Ë{ 
__ASM
 vﬁ©ûê("£v"); 
	}
}

789 
__INLINE
 
	$__ISB
(
¨g
Ë{ 
__ASM
 vﬁ©ûê("isb"); 
	}
}

790 
__INLINE
 
	$__DSB
(
¨g
Ë{ 
__ASM
 vﬁ©ûê("dsb"); 
	}
}

791 
__INLINE
 
	$__DMB
(
¨g
Ë{ 
__ASM
 vﬁ©ûê("dmb"); 
	}
}

792 
__INLINE
 
	$__CLREX
(Ë{ 
__ASM
 vﬁ©ûê("˛ªx"); 
	}
}

803 
uöt32_t
 
__gë_PSP
();

814 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

825 
uöt32_t
 
__gë_MSP
();

836 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

846 
uöt32_t
 
__gë_BASEPRI
();

856 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

867 
uöt32_t
 
__gë_PRIMASK
();

877 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

887 
uöt32_t
 
__gë_FAULTMASK
();

897 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

907 
uöt32_t
 
__gë_CONTROL
();

917 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

927 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

937 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

947 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

957 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

967 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

977 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

987 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

998 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1009 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1020 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1039 
__INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
¥i‹ôy_groupög
)

1041 
uöt32_t
 
ªg_vÆue
=0;

1043 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1044 
ªg_vÆue
 &= ~((0xFFFFU << 16) | (0x0F << 8));

1045 
ªg_vÆue
 = (‘eg_vÆuê| 
NVIC_AIRCR_VECTKEY
 | (
¥i‹ôy_groupög
 << 8)));

1046 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1047 
	}
}

1058 
__INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1060 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1061 
	}
}

1072 
__INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1075 
	}
}

1087 
__INLINE
 
IRQn_Ty≥
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1089 ((
IRQn_Ty≥
Ë(
NVIC
->
ISPR
[(
uöt32_t
)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F))));

1090 
	}
}

1101 
__INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1103 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1104 
	}
}

1115 
__INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1117 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1118 
	}
}

1130 
__INLINE
 
IRQn_Ty≥
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1132 ((
IRQn_Ty≥
)(
NVIC
->
IABR
[(
uöt32_t
)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F))));

1133 
	}
}

1148 
__INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
öt32_t
 
¥i‹ôy
)

1150 if(
IRQn
 < 0) {

1151 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1153 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1154 
	}
}

1171 
__INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1174 if(
IRQn
 < 0) {

1175 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1177 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1178 
	}
}

1184 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1187 
	#SYSTICK_ENABLE
 0

	)

1188 
	#SYSTICK_TICKINT
 1

	)

1189 
	#SYSTICK_CLKSOURCE
 2

	)

1190 
	#SYSTICK_MAXCOUNT
 ((1<<24Ë-1Ë

	)

1202 
__INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1204 i‡(
ticks
 > 
SYSTICK_MAXCOUNT
)  (1);

1206 
SysTick
->
LOAD
 = (
ticks
 & 
SYSTICK_MAXCOUNT
) - 1;

1207 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1208 
SysTick
->
VAL
 = (0x00);

1209 
SysTick
->
CTRL
 = (1 << 
SYSTICK_CLKSOURCE
Ë| (1<<
SYSTICK_ENABLE
Ë| (1<<
SYSTICK_TICKINT
);

1211 
	}
}

1229 
__INLINE
 
	$NVIC_Sy°emRe£t
()

1231 
SCB
->
AIRCR
 = (
NVIC_AIRCR_VECTKEY
 | (SCB->AIRCR & (0x700)Ë| (1<<
NVIC_SYSRESETREQ
));

1232 
	}
}

1248 
__INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1250 if(
ch
 ='\n'Ë
	`ITM_SídCh¨
('\r');

1252 i‡((
C‹eDebug
->
DEMCR
 & 
C‹eDebug_DEMCR_TRCENA
) &&

1253 (
ITM
->
TCR
 & 
ITM_TCR_ITMENA
) &&

1254 (
ITM
->
TER
 & (1UL << 0)) )

1256 
ITM
->
PORT
[0].
u32
 == 0);

1257 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1259  (
ch
);

1260 
	}
}

	@ChillerMonitorRev2.0/CMSIS/system_stm32f10x.c

25 
	~"°m32f10x.h
"

50 
	#SYSCLK_FREQ_72MHz
 72000000

	)

54 #ifde‡
STM32F10X_HD


77 #ifde‡
SYSCLK_FREQ_HSE


78 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_HSE
;

79 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_HSE
;

80 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_HSE
;

81 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_HSE
;

82 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_HSE
;

83 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


84 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_20MHz
;

85 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_20MHz
;

86 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_20MHz
;

87 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_20MHz
;

88 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_20MHz
;

89 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


90 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_36MHz
;

91 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_36MHz
;

92 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_36MHz
;

93 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_36MHz
;

94 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_36MHz
;

95 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


96 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_48MHz
;

97 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_48MHz
;

98 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_48MHz
;

99 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_48MHz
/2);

100 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_48MHz
;

101 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


102 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_56MHz
;

103 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_56MHz
;

104 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_56MHz
;

105 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_56MHz
/2);

106 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_56MHz
;

107 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


108 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_72MHz
;

109 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_72MHz
;

110 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_72MHz
;

111 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_72MHz
/2);

112 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_72MHz
;

114 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
HSI_VÆue
;

115 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
HSI_VÆue
;

116 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
HSI_VÆue
;

117 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
HSI_VÆue
;

118 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
HSI_VÆue
;

129 
SëSysClock
();

131 #ifde‡
SYSCLK_FREQ_HSE


132 
SëSysClockToHSE
();

133 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


134 
SëSysClockTo20
();

135 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


136 
SëSysClockTo36
();

137 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


138 
SëSysClockTo48
();

139 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


140 
SëSysClockTo56
();

141 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


142 
SëSysClockTo72
();

161 
	$Sy°emInô
 ()

165 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

167 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

169 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

171 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

173 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

175 
RCC
->
CIR
 = 0x00000000;

179 
	`SëSysClock
();

181 
	}
}

191 
	$SëSysClock
()

193 #ifde‡
SYSCLK_FREQ_HSE


194 
	`SëSysClockToHSE
();

195 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


196 
	`SëSysClockTo20
();

197 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


198 
	`SëSysClockTo36
();

199 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


200 
	`SëSysClockTo48
();

201 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


202 
	`SëSysClockTo56
();

203 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


204 
	`SëSysClockTo72
();

209 
	}
}

219 #ifde‡
DATA_IN_ExtSRAM


231 
	$Sy°emInô_ExtMemCé
()

237 
RCC
->
AHBENR
 = 0x00000114;

240 
RCC
->
APB2ENR
 = 0x000001E0;

248 
GPIOD
->
CRL
 = 0x44BB44BB;

249 
GPIOD
->
CRH
 = 0xBBBBBBBB;

251 
GPIOE
->
CRL
 = 0xB44444BB;

252 
GPIOE
->
CRH
 = 0xBBBBBBBB;

254 
GPIOF
->
CRL
 = 0x44BBBBBB;

255 
GPIOF
->
CRH
 = 0xBBBB4444;

257 
GPIOG
->
CRL
 = 0x44BBBBBB;

258 
GPIOG
->
CRH
 = 0x44444B44;

263 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

264 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

265 
	}
}

268 #ifde‡
SYSCLK_FREQ_HSE


277 
	$SëSysClockToHSE
()

279 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

283 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

288 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

289 
SèπUpCou¡î
++;

290 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

292 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

294 
HSESètus
 = (
uöt32_t
)0x01;

298 
HSESètus
 = (
uöt32_t
)0x00;

301 i‡(
HSESètus
 =(
uöt32_t
)0x01)

304 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

307 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

308 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

311 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

314 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

317 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

320 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

321 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

324 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

337 
	}
}

338 #ñi‡
deföed
 
SYSCLK_FREQ_20MHz


347 
	$SëSysClockTo20
()

349 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

353 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

358 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

359 
SèπUpCou¡î
++;

360 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

362 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

364 
HSESètus
 = (
uöt32_t
)0x01;

368 
HSESètus
 = (
uöt32_t
)0x00;

371 i‡(
HSESètus
 =(
uöt32_t
)0x01)

374 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

377 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

378 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

381 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

384 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

387 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

390 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

391 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL5
);

394 
RCC
->
CR
 |
RCC_CR_PLLON
;

397 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

402 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

403 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

406 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

419 
	}
}

420 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


429 
	$SëSysClockTo36
()

431 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

435 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

440 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

441 
SèπUpCou¡î
++;

442 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

444 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

446 
HSESètus
 = (
uöt32_t
)0x01;

450 
HSESètus
 = (
uöt32_t
)0x00;

453 i‡(
HSESètus
 =(
uöt32_t
)0x01)

456 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

459 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

460 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

463 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

466 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

469 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

472 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

473 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL9
);

476 
RCC
->
CR
 |
RCC_CR_PLLON
;

479 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

484 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

485 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

488 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

501 
	}
}

502 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


511 
	$SëSysClockTo48
()

513 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

517 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

522 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

523 
SèπUpCou¡î
++;

524 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

526 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

528 
HSESètus
 = (
uöt32_t
)0x01;

532 
HSESètus
 = (
uöt32_t
)0x00;

535 i‡(
HSESètus
 =(
uöt32_t
)0x01)

538 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

541 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

542 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

545 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

548 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

551 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

554 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

555 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL6
);

558 
RCC
->
CR
 |
RCC_CR_PLLON
;

561 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

566 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

567 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

570 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

583 
	}
}

585 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


594 
	$SëSysClockTo56
()

596 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

600 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

605 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

606 
SèπUpCou¡î
++;

607 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

609 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

611 
HSESètus
 = (
uöt32_t
)0x01;

615 
HSESètus
 = (
uöt32_t
)0x00;

618 i‡(
HSESètus
 =(
uöt32_t
)0x01)

621 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

624 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

625 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

628 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

631 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

634 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

637 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

638 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL7
);

641 
RCC
->
CR
 |
RCC_CR_PLLON
;

644 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

649 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

650 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

653 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

666 
	}
}

668 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


677 
	$SëSysClockTo72
()

679 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

683 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

688 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

689 
SèπUpCou¡î
++;

690 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

692 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

694 
HSESètus
 = (
uöt32_t
)0x01;

698 
HSESètus
 = (
uöt32_t
)0x00;

701 i‡(
HSESètus
 =(
uöt32_t
)0x01)

704 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

707 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

708 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

711 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

714 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

717 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

720 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

721 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL9
);

724 
RCC
->
CR
 |
RCC_CR_PLLON
;

727 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

732 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

733 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

736 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

749 
	}
}

	@ChillerMonitorRev2.0/CMSIS/system_stm32f10x.h

24 #i‚de‡
__SYSTEM_STM32F10X_H


25 
	#__SYSTEM_STM32F10X_H


	)

40 c⁄° 
uöt32_t
 
Sy°emFªquícy
;

41 c⁄° 
uöt32_t
 
Sy°emFªquícy_SysClk
;

42 c⁄° 
uöt32_t
 
Sy°emFªquícy_AHBClk
;

43 c⁄° 
uöt32_t
 
Sy°emFªquícy_APB1Clk
;

44 c⁄° 
uöt32_t
 
Sy°emFªquícy_APB2Clk
;

70 
Sy°emInô
();

	@ChillerMonitorRev2.0/MDK/APP/main.c

13 
	~"In˛ude.h
"

21 
	$maö
()

23 *
pf
;

24 
pf
=(*)0x0803f800;

26 
	`Sy°emInô
();

27 
	`DñayInô
(72000000);

28 
	`NVIC_C⁄figuøti⁄
();

29 
	`TIM2_C⁄figuøti⁄
();

30 
START_TIME
;

31 
	`Key_GPIO_C⁄fig
();

32 
	`IOputC⁄fig
();

33 
	`PîifSt›
();

34 
	`LCD_PORT_Inô
();

35 
	`LCD_Inô
();

36 
	`ADC1_Inô
();

37 
	`PîifSt›
();

38 
LogoTime
=0;

39 
LogoTime
<
LogoFªshTime
)

41 
	`DisLogo
();

44 if((*(
pf
+2)==0xFFFFFFFF)&&(*(pf+3)==0xFFFFFFFF)&&(*(pf+4)==0xFFFFFFFF)&&(*(pf+5)==0xFFFFFFFF))

46 
	`St‹eSysPøma
();

48 
	`GëSysPøma
();

49 
	`A¡i‰ìzePro
();

52 
	`Key_Pro˚ss
();

53 if(
MíuTime
>=
MíuFªshTime
)

55 if(
Key
.
MíuSëFœg
==1)

57 
	`ADC1_Tem≥ø
();

58 
	`Tem≥øPro
();

60 
	`Dis_Míu
(
Key
.
MíuSñe˘
);

61 
MíuTime
=0;

63 
	`OutPro
();

66 
	}
}

	@ChillerMonitorRev2.0/USER/inc/Display.h

1 #i‚de‡
__DISPLAY_H


2 
	#__DISPLAY_H


	)

5 
	#NULL
 ((*)0)

	)

8 
	#MíuFªshTime
 5

9 
	#LogoFªshTime
 50

10 

	)

11 
	#MíuNum
 16

12 

	)

13 (* 
	tpfMíu
)();

17 * 
pText1
;

18 * 
pText2
;

19 * 
pText3
;

20 * 
pText4
;

21 
pfMíu
 
pMíuFunc
;

22 }
	tMíu_Ty≥def
;

25 
OldMíu
;

26 
AœrmSaveÊag
;

30 
	`E¡îN‹mÆDis
();

31 
	`E¡îModñSëtög
();

32 
	`E¡îTem≥øSëtög
();

33 
	`AœrmDis
();

35 
	`DisLogo
();

36 
	`WaôO≥øti⁄
();

37 
	`A¡i‰ìzeDis
();

39 
	`Dis_Míu
(
MíuDis
);

	@ChillerMonitorRev2.0/USER/inc/IO_Process.h

1 #i‚de‡
__IO_Pro˚ss_H


2 
	#__IO_Pro˚ss_H


	)

4 
	~"°m32f10x.h
"

11 
	mPowîpha£
;

12 
	mCom¥ess‹
;

13 
	mLevñ
;

14 
	mHighW©îFlow
;

15 
	mLowW©îFlow
;

16 
	mPumphigh
;

17 
	mPum∂ow
;

18 
	mÊag
;

19 
	mRecovî
;

22 
	mLowîW©îSë
;

23 
	mUµîW©îSë
;

24 
	mEnvú⁄
;

25 }
	tAœrm_Ty≥def
;

33 
	mPump_ON
;

34 
	mVÆve_ON
;

35 
	mCom¥ess‹_ON
;

36 
	mElBow_ON
;

37 
	mAœrmOUT_ON
;

38 
	mO±iˇlcou∂î1_ON
;

39 
	mO±iˇlcou∂î2_ON
;

41 
	mPump_OFF
;

42 
	mVÆve_OFF
;

43 
	mCom¥ess‹_OFF
;

44 
	mElBow_OFF
;

45 
	mAœrmOUT_OFF
;

46 
	mO±iˇlcou∂î1_OFF
;

47 
	mO±iˇlcou∂î2_OFF
;

48 }
	tPîif_Ty≥def
;

52 
	#OutPöCål
 
GPIOA


53 
	#OutPöCål_Clk
 
RCC_APB2Pîùh_GPIOA


54 

	)

55 
	#InPöCål_L
 
GPIOC


56 
	#InPöCål_H
 
GPIOA


57 
	#InPöCål_Clk
 
RCC_APB2Pîùh_GPIOC
|
RCC_APB2Pîùh_GPIOA


58 

	)

62 
	#Pump_OUT
 
GPIO_Pö_4


63 
	#VÆve_OUT
 
GPIO_Pö_5


64 
	#Com¥ess‹_OUT
 
GPIO_Pö_6


65 
	#ElBow_OUT
 
GPIO_Pö_7


66 
	#Aœrm_OUT
 
GPIO_Pö_8


67 
	#O±iˇlcou∂î1_OUT
 
GPIO_Pö_9


68 
	#O±iˇlcou∂î2_OUT
 
GPIO_Pö_10


69 

	)

71 
	#OutPö
 
Pump_OUT
|
VÆve_OUT
|
Com¥ess‹_OUT
|
ElBow_OUT
|
Aœrm_OUT
|
O±iˇlcou∂î1_OUT
|
O±iˇlcou∂î2_OUT


72 

	)

77 
	#Powîpha£_IN
 
GPIO_Pö_6


78 
	#Com¥ess‹_IN
 
GPIO_Pö_7


79 
	#Levñ_IN
 
GPIO_Pö_8


80 
	#HighW©î_IN
 
GPIO_Pö_9


81 

	)

82 
	#LowW©î_IN
 
GPIO_Pö_0


83 
	#Pumphigh_IN
 
GPIO_Pö_1


84 
	#Pum∂ow_IN
 
GPIO_Pö_2


85 

	)

86 
	#ExCå_IN
 
GPIO_Pö_3


87 

	)

88 
	#InPö_L
 
Powîpha£_IN
|
Com¥ess‹_IN
|
Levñ_IN
|
HighW©î_IN


89 
	#InPö_H
 
LowW©î_IN
|
Pumphigh_IN
|
Pum∂ow_IN


90 

	)

92 
Aœrm_Ty≥def
 
Aœrm
;

93 
Pîif_Ty≥def
 
ChûÀr
;

94 
Pîif_Ty≥def
 
SaveChûÀrN‹mÆP¨a
;

97 
IOputC⁄fig
();

98 
PîifSt›
();

99 
PîifSèπ
();

100 
I≈utM⁄ô‹
();

101 
OutPro
();

	@ChillerMonitorRev2.0/USER/inc/Include.h

16 #i‚de‡ 
__INCLUDES_H__


17 
	#__INCLUDES_H__


	)

32 
	~"°m32f10x.h
"

33 
	~"°m32f10x_c⁄f.h
"

40 
	~"FªeRTOS.h
"

41 
	~"èsk.h
"

42 
	~"queue.h
"

43 
	~"¸outöe.h
"

50 
	~"ChûÀrFWöcs.h
"

51 
	~"key.h
"

54 
	~"Di•œy.h
"

56 
	~"IO_Pro˚ss.h
"

57 
	~"Tem¥a_AD.h
"

58 
	~"Êash.h
"

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt8_t
 
	mNVIC_IRQCh™√l
;

48 
uöt8_t
 
	mNVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

49 
uöt8_t
 
	mNVIC_IRQCh™√lSubPri‹ôy
;

50 
Fun˘i⁄ÆSèã
 
	mNVIC_IRQCh™√lCmd
;

51 } 
	tNVIC_InôTy≥Def
;

65 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

66 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

67 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

68 ((
	gVECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

77 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

78 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

79 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

80 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

81 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

82 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

91 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

93 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

95 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

97 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

99 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

102 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

103 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

104 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

105 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

106 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

108 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

110 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

112 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x0007FFFF)

	)

122 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

123 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

124 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

125 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

146 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

147 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

148 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

149 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

150 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mADC_Mode
;

48 
Fun˘i⁄ÆSèã
 
	mADC_SˇnC⁄vMode
;

49 
Fun˘i⁄ÆSèã
 
	mADC_C⁄töuousC⁄vMode
;

50 
uöt32_t
 
	mADC_Exã∫ÆTrigC⁄v
;

51 
uöt32_t
 
	mADC_D©aAlign
;

52 
uöt8_t
 
	mADC_NbrOfCh™√l
;

53 }
	tADC_InôTy≥Def
;

62 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

63 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
ADC2_BASE
) || \

64 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

66 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

67 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

73 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

74 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

75 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

76 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

77 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

78 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

79 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

80 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

81 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

82 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

84 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

85 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

86 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

87 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

88 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

89 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

90 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

91 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

92 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

93 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

106 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

107 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000)

	)

108 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000)

	)

109 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000)

	)

110 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000)

	)

111 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000)

	)

117 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000)

	)

118 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000)

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000)

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000)

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000)

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000)

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000)

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000)

	)

131 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

132 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

133 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

134 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

135 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

136 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

137 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

138 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

139 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

153 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

154 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

155 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

156 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

165 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

166 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

167 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

168 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

169 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

170 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

171 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

172 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

173 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

174 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

175 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

176 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

177 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

178 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

179 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

180 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

181 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

182 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

184 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

185 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

186 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

187 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

188 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

189 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

190 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

191 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

192 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

201 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

202 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

203 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

204 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

205 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

206 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

207 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

208 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

209 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

210 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

211 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

212 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

213 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

214 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

215 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

216 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

229 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000)

	)

230 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000)

	)

231 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000)

	)

232 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000)

	)

233 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000)

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000)

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000)

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000)

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000)

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000)

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000)

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000)

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000)

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

320 ((
IT
Ë=
ADC_IT_JEOC
))

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

27 
	~"°m32f10x.h
"

53 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

54 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

55 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

56 ((
	gLEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

65 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

66 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

67 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

68 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

69 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

70 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

71 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

72 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

81 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

82 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

83 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

84 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

85 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

86 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

87 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

88 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

89 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

90 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

91 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

92 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

93 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

94 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

95 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

96 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

97 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

98 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

99 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

100 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

101 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

102 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

103 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

104 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

105 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

106 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

107 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

108 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

109 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

110 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

111 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

112 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

113 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

114 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

115 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

116 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

117 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

118 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

119 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

120 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

121 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

122 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

124 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

125 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

126 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

127 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

128 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

129 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

130 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

131 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

132 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

133 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

134 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

135 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

136 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

137 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

139 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

160 
BKP_DeInô
();

161 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

162 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

163 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

164 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

165 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

166 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

167 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

168 
FœgSètus
 
BKP_GëFœgSètus
();

169 
BKP_CÀ¨Fœg
();

170 
ITSètus
 
BKP_GëITSètus
();

171 
BKP_CÀ¨ITPídögBô
();

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
CAN1_BASE
))

	)

49 
Fun˘i⁄ÆSèã
 
	mCAN_TTCM
;

50 
Fun˘i⁄ÆSèã
 
	mCAN_ABOM
;

51 
Fun˘i⁄ÆSèã
 
	mCAN_AWUM
;

52 
Fun˘i⁄ÆSèã
 
	mCAN_NART
;

53 
Fun˘i⁄ÆSèã
 
	mCAN_RFLM
;

54 
Fun˘i⁄ÆSèã
 
	mCAN_TXFP
;

55 
uöt8_t
 
	mCAN_Mode
;

56 
uöt8_t
 
	mCAN_SJW
;

57 
uöt8_t
 
	mCAN_BS1
;

58 
uöt8_t
 
	mCAN_BS2
;

59 
uöt16_t
 
	mCAN_PªsˇÀr
;

60 } 
	tCAN_InôTy≥Def
;

68 
uöt8_t
 
	mCAN_FûãrNumbî
;

69 
uöt8_t
 
	mCAN_FûãrMode
;

70 
uöt8_t
 
	mCAN_FûãrSˇÀ
;

71 
uöt16_t
 
	mCAN_FûãrIdHigh
;

72 
uöt16_t
 
	mCAN_FûãrIdLow
;

73 
uöt16_t
 
	mCAN_FûãrMaskIdHigh
;

74 
uöt16_t
 
	mCAN_FûãrMaskIdLow
;

75 
uöt16_t
 
	mCAN_FûãrFIFOAssignmít
;

76 
Fun˘i⁄ÆSèã
 
	mCAN_FûãrA˘iv©i⁄
;

77 } 
	tCAN_FûãrInôTy≥Def
;

85 
uöt32_t
 
	mStdId
;

86 
uöt32_t
 
	mExtId
;

87 
uöt8_t
 
	mIDE
;

88 
uöt8_t
 
	mRTR
;

89 
uöt8_t
 
	mDLC
;

90 
uöt8_t
 
	mD©a
[8];

91 } 
	tC™TxMsg
;

99 
uöt32_t
 
	mStdId
;

100 
uöt32_t
 
	mExtId
;

101 
uöt8_t
 
	mIDE
;

102 
uöt8_t
 
	mRTR
;

103 
uöt8_t
 
	mDLC
;

104 
uöt8_t
 
	mD©a
[8];

105 
uöt8_t
 
	mFMI
;

106 } 
	tC™RxMsg
;

120 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

121 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

131 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

132 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

133 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

134 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

136 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

137 ((
	gMODE
Ë=
CAN_Mode_Sûít
Ë|| ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

146 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

147 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

148 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

149 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

151 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

152 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

161 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

162 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

163 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

164 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

165 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

166 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

167 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

168 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

169 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

170 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

171 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

172 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

173 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

174 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

175 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

176 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

178 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

187 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

188 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

189 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

190 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

191 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

192 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

193 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

194 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

196 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

206 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

216 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

226 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

227 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

229 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

230 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

239 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

240 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

242 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

243 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

253 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

254 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

255 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

256 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

266 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

267 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

268 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

269 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

279 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

280 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

281 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

291 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

292 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

293 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

303 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

304 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

305 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

306 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

317 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

319 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

329 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

330 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

340 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

341 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

351 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

352 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

353 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

355 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

356 ((
FLAG
Ë=
CAN_FLAG_BOF
))

366 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

367 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

368 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

369 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

370 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

371 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

372 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

373 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

374 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

375 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

376 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

377 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

378 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

379 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

380 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

381 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

382 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

384 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

385 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

386 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

387 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

388 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

389 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

390 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

392 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

393 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

394 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

395 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

396 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

397 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

418 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

419 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

420 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

421 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

422 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

423 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

424 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

425 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

426 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

427 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

428 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

429 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

431 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

432 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

433 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

434 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

435 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

27 
	~"°m32f10x.h
"

65 
CRC_Re£tDR
();

66 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

67 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

68 
uöt32_t
 
CRC_GëCRC
();

69 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

70 
uöt8_t
 
CRC_GëIDRegi°î
();

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDAC_Triggî
;

48 
uöt32_t
 
	mDAC_WaveGíî©i⁄
;

49 
uöt32_t
 
	mDAC_LFSRUnmask_TrüngÀAm∂ôude
;

50 
uöt32_t
 
	mDAC_OuçutBuf„r
;

51 }
	tDAC_InôTy≥Def
;

65 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000)

	)

66 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004)

	)

67 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000C)

	)

68 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014)

	)

69 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001C)

	)

70 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024)

	)

71 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002C)

	)

72 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034)

	)

73 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003C)

	)

75 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

76 ((
	gTRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

77 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

78 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

79 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

80 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

81 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

82 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

83 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

93 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

94 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

95 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

96 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

97 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

98 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

107 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000)

	)

108 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100)

	)

109 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200)

	)

110 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300)

	)

111 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400)

	)

112 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500)

	)

113 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600)

	)

114 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700)

	)

115 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800)

	)

116 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900)

	)

117 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00)

	)

118 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00)

	)

119 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000)

	)

120 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100)

	)

121 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200)

	)

122 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300)

	)

123 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400)

	)

124 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500)

	)

125 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600)

	)

126 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700)

	)

127 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800)

	)

128 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900)

	)

129 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00)

	)

130 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00)

	)

132 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

133 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

134 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

135 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

136 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

137 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

138 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

139 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

140 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

141 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

142 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

143 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

144 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

145 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

146 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

147 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

148 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

149 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

150 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

151 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

152 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

153 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

154 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

155 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

164 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

165 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

166 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

167 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

176 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

177 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

178 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

179 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

188 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

189 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

190 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

192 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

193 ((
ALIGN
Ë=
DAC_Align_8b_R
))

202 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

203 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

204 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

205 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

214 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

235 
DAC_DeInô
();

236 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

237 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

238 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

239 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

240 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

241 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

242 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

243 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

244 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

245 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

246 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

27 
	~"°m32f10x.h
"

49 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

50 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

51 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

52 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

53 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

54 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

55 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

56 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

57 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

58 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

59 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

60 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

61 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

62 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

63 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

64 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

66 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFE000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

83 
uöt32_t
 
DBGMCU_GëREVID
();

84 
uöt32_t
 
DBGMCU_GëDEVID
();

85 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDMA_PîùhîÆBa£Addr
;

48 
uöt32_t
 
	mDMA_Mem‹yBa£Addr
;

49 
uöt32_t
 
	mDMA_DIR
;

50 
uöt32_t
 
	mDMA_Buf„rSize
;

51 
uöt32_t
 
	mDMA_PîùhîÆInc
;

52 
uöt32_t
 
	mDMA_Mem‹yInc
;

53 
uöt32_t
 
	mDMA_PîùhîÆD©aSize
;

54 
uöt32_t
 
	mDMA_Mem‹yD©aSize
;

55 
uöt32_t
 
	mDMA_Mode
;

56 
uöt32_t
 
	mDMA_Pri‹ôy
;

57 
uöt32_t
 
	mDMA_M2M
;

58 }
	tDMA_InôTy≥Def
;

68 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
DMA1_Ch™√l1_BASE
Ë|| \

	)

69 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
DMA1_Ch™√l2_BASE
) || \

70 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l3_BASE
) || \

71 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l4_BASE
) || \

72 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l5_BASE
) || \

73 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l6_BASE
) || \

74 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l7_BASE
) || \

75 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l1_BASE
) || \

76 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l5_BASE
))

85 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

86 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

87 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

88 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

97 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

98 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

99 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

100 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

109 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

110 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

111 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

112 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

121 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

122 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

123 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

124 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

125 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

126 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

135 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

136 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

137 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

138 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

139 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

140 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

149 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

150 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

151 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

160 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

161 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

162 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

163 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

164 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

165 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

166 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

167 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

176 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

177 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

188 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

189 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

190 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

197 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

198 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

199 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

200 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

201 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

202 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

203 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

204 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

205 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

206 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

207 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

208 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

209 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

210 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

211 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

212 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

213 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

214 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

215 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

216 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

217 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

218 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

219 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

220 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

221 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

222 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

223 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

224 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

230 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

231 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

232 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

233 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

234 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

235 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

236 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

237 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

238 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

239 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

240 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

241 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

242 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

243 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

244 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

245 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

246 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

247 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

248 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

249 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

251 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

253 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

254 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

255 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

256 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

257 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

258 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

259 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

260 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

261 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

262 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

263 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

264 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

265 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

266 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

267 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

268 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

269 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

270 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

271 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

272 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

273 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

274 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

275 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

276 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

290 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

293 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

294 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

295 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

296 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

297 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

298 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

299 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

300 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

301 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

302 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

303 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

304 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

305 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

306 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

307 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

308 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

309 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

310 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

311 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

312 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

313 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

314 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

315 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

316 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

317 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

323 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

324 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

325 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

326 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

327 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

328 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

329 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

330 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

331 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

332 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

333 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

334 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

335 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

336 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

337 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

338 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

339 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

340 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

341 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

342 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

344 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

346 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

347 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

348 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

349 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

350 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

351 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

352 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

353 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

354 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

355 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

356 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

360 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

361 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

362 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

363 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

364 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

365 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

366 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

367 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

368 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

378 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

400 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

401 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

402 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

403 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

405 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

406 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

407 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

408 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

409 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

27 
	~"°m32f10x.h
"

47 
	mEXTI_Mode_I¡îru±
 = 0x00,

48 
	mEXTI_Mode_Evít
 = 0x04

49 }
	tEXTIMode_Ty≥Def
;

51 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

59 
	mEXTI_Triggî_Risög
 = 0x08,

60 
	mEXTI_Triggî_FÆlög
 = 0x0C,

61 
	mEXTI_Triggî_Risög_FÆlög
 = 0x10

62 }
	tEXTITriggî_Ty≥Def
;

64 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

65 ((
	gTRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

66 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

73 
uöt32_t
 
EXTI_Löe
;

74 
EXTIMode_Ty≥Def
 
	mEXTI_Mode
;

75 
EXTITriggî_Ty≥Def
 
	mEXTI_Triggî
;

76 
Fun˘i⁄ÆSèã
 
	mEXTI_LöeCmd
;

77 }
	tEXTI_InôTy≥Def
;

91 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

92 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

93 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

94 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

95 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

96 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

97 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

98 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

99 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

100 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

101 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

102 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

103 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

104 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

105 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

106 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

107 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

109 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

111 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

115 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF80000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

117 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

118 ((
	gLINE
Ë=
EXTI_Löe2
Ë|| ((
LINE
Ë=
EXTI_Löe3
) || \

119 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

120 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

121 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

122 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

123 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

124 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

125 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

126 ((
LINE
Ë=
EXTI_Löe18
))

148 
EXTI_DeInô
();

149 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

150 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

151 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

152 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

153 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

154 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

155 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

27 
	~"°m32f10x.h
"

47 
	mFLASH_BUSY
 = 1,

48 
	mFLASH_ERROR_PG
,

49 
	mFLASH_ERROR_WRP
,

50 
	mFLASH_COMPLETE
,

51 
	mFLASH_TIMEOUT


52 }
	tFLASH_Sètus
;

66 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

67 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

68 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

69 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

70 ((
	gLATENCY
Ë=
FLASH_L©ícy_1
) || \

71 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

80 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

81 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

82 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

83 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

92 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

93 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

94 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

95 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

106 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

107 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

108 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

109 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

110 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

111 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

112 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

113 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

114 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

115 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

116 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

117 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

118 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

119 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

120 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

121 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

122 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

123 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

125 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

127 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

128 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

130 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

131 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

132 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

133 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

134 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

135 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

142 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

143 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

144 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

145 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

146 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

147 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

148 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

149 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

150 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

151 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

152 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

153 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

154 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

155 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

156 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

157 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

158 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

159 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

160 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

161 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

162 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

163 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

164 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

165 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

166 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

167 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

168 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

169 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

170 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

171 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

172 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

173 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

175 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

177 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x0807FFFF))

	)

179 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

189 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

190 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

191 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

201 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

202 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

203 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

213 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

214 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

215 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

225 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

226 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

227 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

237 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

238 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

239 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

240 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

241 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

243 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

244 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

245 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

246 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

268 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

269 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

270 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

271 
FLASH_U∆ock
();

272 
FLASH_Lock
();

273 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

274 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

275 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

276 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

277 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

278 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

279 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

280 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

282 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

283 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

284 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

285 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

286 
FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
);

288 
FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
);

289 
FLASH_Sètus
 
FLASH_GëSètus
();

290 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mFSMC_AddªssSëupTime
;

48 
uöt32_t
 
	mFSMC_AddªssHﬁdTime
;

49 
uöt32_t
 
	mFSMC_D©aSëupTime
;

50 
uöt32_t
 
	mFSMC_BusTu∫AroundDuøti⁄
;

51 
uöt32_t
 
	mFSMC_CLKDivisi⁄
;

52 
uöt32_t
 
	mFSMC_D©aL©ícy
;

53 
uöt32_t
 
	mFSMC_Ac˚ssMode
;

54 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

62 
uöt32_t
 
	mFSMC_B™k
;

63 
uöt32_t
 
	mFSMC_D©aAddªssMux
;

64 
uöt32_t
 
	mFSMC_Mem‹yTy≥
;

65 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

66 
uöt32_t
 
	mFSMC_Bur°Ac˚ssMode
;

67 
uöt32_t
 
	mFSMC_WaôSig«lPﬁ¨ôy
;

68 
uöt32_t
 
	mFSMC_WøpMode
;

69 
uöt32_t
 
	mFSMC_WaôSig«lA˘ive
;

70 
uöt32_t
 
	mFSMC_WrôeO≥øti⁄
;

71 
uöt32_t
 
	mFSMC_WaôSig«l
;

72 
uöt32_t
 
	mFSMC_ExãndedMode
;

73 
uöt32_t
 
	mFSMC_WrôeBur°
;

74 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_RódWrôeTimögSåu˘
;

75 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_WrôeTimögSåu˘
;

76 }
	tFSMC_NORSRAMInôTy≥Def
;

84 
uöt32_t
 
	mFSMC_SëupTime
;

85 
uöt32_t
 
	mFSMC_WaôSëupTime
;

86 
uöt32_t
 
	mFSMC_HﬁdSëupTime
;

87 
uöt32_t
 
	mFSMC_HiZSëupTime
;

88 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

96 
uöt32_t
 
	mFSMC_B™k
;

97 
uöt32_t
 
	mFSMC_Waô„©uª
;

98 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

99 
uöt32_t
 
	mFSMC_ECC
;

100 
uöt32_t
 
	mFSMC_ECCPageSize
;

101 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

102 
uöt32_t
 
	mFSMC_TARSëupTime
;

103 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

104 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

105 }
	tFSMC_NANDInôTy≥Def
;

113 
uöt32_t
 
	mFSMC_Waô„©uª
;

114 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

115 
uöt32_t
 
	mFSMC_TARSëupTime
;

116 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

117 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

118 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_IOS∑˚TimögSåu˘
;

119 }
	tFSMC_PCCARDInôTy≥Def
;

133 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

134 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

135 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

136 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

137 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

138 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

139 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

141 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

142 ((
	gBANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

143 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

144 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

146 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

147 ((
BANK
Ë=
FSMC_B™k3_NAND
))

149 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

150 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

151 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

153 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

154 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

155 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

168 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

169 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

170 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

171 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

181 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

182 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

183 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

184 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

185 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

186 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

196 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

197 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

199 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

209 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

210 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

211 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

212 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

221 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

222 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

223 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

224 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

234 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

235 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

236 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

237 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

247 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

249 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

250 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

260 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

261 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

262 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

263 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

273 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

274 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

275 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

276 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

285 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

286 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

288 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

289 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

299 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

300 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

301 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

302 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

311 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

321 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

331 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

341 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

351 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

361 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

371 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

372 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

373 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

374 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

375 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

376 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

377 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

378 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

396 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

397 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

398 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

399 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

408 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

409 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

410 
	#IS_FSMC_DATA_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

411 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

421 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

422 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

423 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

424 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

434 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

435 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

436 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

437 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

438 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

439 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

440 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

441 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

442 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

443 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

444 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

445 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

455 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

465 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

475 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

485 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

495 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

505 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

515 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

516 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

517 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

518 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

519 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

520 ((
IT
Ë=
FSMC_IT_Levñ
) || \

521 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

530 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

531 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

532 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

533 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

534 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

535 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

536 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

537 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

539 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

565 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

566 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

567 
FSMC_PCCARDDeInô
();

568 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

569 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

570 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

571 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

572 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

573 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

574 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

578 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

579 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

581 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

582 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

583 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
GPIOA_BASE
Ë|| \

	)

42 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
GPIOB_BASE
) || \

43 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOC_BASE
) || \

44 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOD_BASE
) || \

45 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOE_BASE
) || \

46 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOF_BASE
) || \

47 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOG_BASE
))

55 
GPIO_S≥ed_10MHz
 = 1,

56 
	mGPIO_S≥ed_2MHz
,

57 
	mGPIO_S≥ed_50MHz


58 }
	tGPIOS≥ed_Ty≥Def
;

59 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

60 ((
	gSPEED
Ë=
GPIO_S≥ed_50MHz
))

67 { 
GPIO_Mode_AIN
 = 0x0,

68 
	mGPIO_Mode_IN_FLOATING
 = 0x04,

69 
	mGPIO_Mode_IPD
 = 0x28,

70 
	mGPIO_Mode_IPU
 = 0x48,

71 
	mGPIO_Mode_Out_OD
 = 0x14,

72 
	mGPIO_Mode_Out_PP
 = 0x10,

73 
	mGPIO_Mode_AF_OD
 = 0x1C,

74 
	mGPIO_Mode_AF_PP
 = 0x18

75 }
	tGPIOMode_Ty≥Def
;

77 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

78 ((
	gMODE
Ë=
GPIO_Mode_IPD
Ë|| ((
MODE
Ë=
GPIO_Mode_IPU
) || \

79 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

80 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

88 
uöt16_t
 
GPIO_Pö
;

89 
GPIOS≥ed_Ty≥Def
 
	mGPIO_S≥ed
;

90 
GPIOMode_Ty≥Def
 
	mGPIO_Mode
;

91 }
	tGPIO_InôTy≥Def
;

98 { 
	mBô_RESET
 = 0,

99 
	mBô_SET


100 }
	tBôA˘i⁄
;

102 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

116 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

117 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

118 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

119 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

120 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

121 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

122 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

123 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

124 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

125 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

126 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

127 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

128 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

129 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

130 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

131 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

132 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

134 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

136 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

137 ((
	gPIN
Ë=
GPIO_Pö_1
) || \

138 ((
PIN
Ë=
GPIO_Pö_2
) || \

139 ((
PIN
Ë=
GPIO_Pö_3
) || \

140 ((
PIN
Ë=
GPIO_Pö_4
) || \

141 ((
PIN
Ë=
GPIO_Pö_5
) || \

142 ((
PIN
Ë=
GPIO_Pö_6
) || \

143 ((
PIN
Ë=
GPIO_Pö_7
) || \

144 ((
PIN
Ë=
GPIO_Pö_8
) || \

145 ((
PIN
Ë=
GPIO_Pö_9
) || \

146 ((
PIN
Ë=
GPIO_Pö_10
) || \

147 ((
PIN
Ë=
GPIO_Pö_11
) || \

148 ((
PIN
Ë=
GPIO_Pö_12
) || \

149 ((
PIN
Ë=
GPIO_Pö_13
) || \

150 ((
PIN
Ë=
GPIO_Pö_14
) || \

151 ((
PIN
Ë=
GPIO_Pö_15
))

161 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

162 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

163 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

164 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

165 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

166 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

167 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

168 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

169 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

170 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

171 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

172 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

173 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

174 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

175 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

176 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

177 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

179 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

180 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

181 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

182 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

183 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

184 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

185 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

187 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

188 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

189 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

190 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

191 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

192 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

193 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

194 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

195 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

196 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

197 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

198 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
)|| \

199 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
))

209 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

210 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

211 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

212 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

213 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

214 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

215 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

216 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

217 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

218 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

219 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

220 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

222 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

223 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

224 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

225 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

226 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

227 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

228 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

238 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

239 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

240 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

241 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

242 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

243 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

244 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

245 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

246 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

247 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

248 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

249 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

250 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

251 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

252 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

253 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

255 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

256 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

257 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

258 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

259 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

260 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

261 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

262 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

263 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

264 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

265 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

266 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

267 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

268 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

269 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

270 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

292 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

293 
GPIO_AFIODeInô
();

294 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

295 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

296 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

297 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

298 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

299 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

300 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

301 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

302 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

303 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

304 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

305 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

306 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

307 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

308 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mI2C_Mode
;

48 
uöt16_t
 
	mI2C_DutyCy˛e
;

49 
uöt16_t
 
	mI2C_OwnAddªss1
;

50 
uöt16_t
 
	mI2C_Ack
;

51 
uöt16_t
 
	mI2C_AcknowÀdgedAddªss
;

52 
uöt32_t
 
	mI2C_ClockS≥ed
;

53 }
	tI2C_InôTy≥Def
;

64 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
I2C1_BASE
Ë|| \

	)

65 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
I2C2_BASE
))

70 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

71 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

72 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

73 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

74 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

75 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

84 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000)

	)

85 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFF)

	)

86 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

87 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

96 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

97 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

98 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

108 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

109 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

110 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

111 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

120 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

121 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

122 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

123 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

132 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

133 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

134 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

135 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

136 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

137 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

138 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

139 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

140 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

141 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

142 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

143 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

144 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

145 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

146 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

147 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

148 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

149 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

158 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

159 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

160 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

161 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

170 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

171 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

172 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

173 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

182 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

183 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

184 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

185 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

194 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

195 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

196 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

197 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

198 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

199 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

200 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

201 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

202 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

203 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

204 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

205 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

206 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

207 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

209 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

211 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

212 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

213 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

214 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

215 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

216 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

217 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

230 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

231 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

232 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

233 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

234 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

235 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

236 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

242 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

243 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

244 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

245 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

246 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

247 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

248 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

249 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

250 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

251 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

252 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

253 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

254 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

255 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

257 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

259 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

260 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

261 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

262 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

263 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

264 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

265 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

266 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

267 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

268 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

269 ((
FLAG
Ë=
I2C_FLAG_SB
))

282 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

283 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

284 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

285 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

286 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

292 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

298 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

304 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

310 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

316 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

317 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

323 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

329 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

335 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

341 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

347 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

349 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

350 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

351 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

352 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

353 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

354 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

355 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

356 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

357 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

358 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

359 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

360 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

361 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

362 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

363 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

364 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

365 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

366 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

367 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

368 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

377 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

386 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

407 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

408 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

409 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

410 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

416 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

417 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

418 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

420 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

421 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

422 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

423 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

424 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

425 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

426 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

427 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

428 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

430 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

433 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

434 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

435 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

436 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

437 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

438 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

30 
vu32
 
L⁄gKeyTime
;

31 
vu32
 
Fa°AddTime
;

33 
vu32
 
MíuTime
;

34 
vu32
 
LogoTime
;

35 
vu32
 
AutoTime
;

36 
vu32
 
Com¥ess‹TimeCou¡
;

39 
	#Com¥ess‹DñayTime
 (10*120)

42 

	)

45 
NMI_H™dÀr
();

46 
H¨dFau…_H™dÀr
();

47 
MemM™age_H™dÀr
();

48 
BusFau…_H™dÀr
();

49 
UßgeFau…_H™dÀr
();

50 
SVC_H™dÀr
();

51 
DebugM⁄_H™dÀr
();

52 
PídSV_H™dÀr
();

53 
SysTick_H™dÀr
();

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

54 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

55 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

56 ((
	gACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

65 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

66 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

67 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

68 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

69 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

70 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

71 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

72 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

73 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

74 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

75 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

76 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

87 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

88 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

89 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

90 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

111 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

112 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

113 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

114 
IWDG_RñﬂdCou¡î
();

115 
IWDG_E«bÀ
();

116 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

27 
	~"°m32f10x.h
"

53 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

54 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

55 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

56 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

57 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

58 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

59 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

60 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

61 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

62 ((
	gLEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((
LEVEL
Ë=
PWR_PVDLevñ_2V5
)|| \

63 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

64 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

73 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

74 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

75 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

76 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

85 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

86 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

87 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

97 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

98 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

99 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

100 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

101 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

103 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

124 
PWR_DeInô
();

125 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

126 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

127 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

128 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

129 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

130 
PWR_E¡îSTANDBYMode
();

131 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

132 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

27 
	~"°m32f10x.h
"

43 
uöt32_t
 
	mSYSCLK_Fªquícy
;

44 
uöt32_t
 
	mHCLK_Fªquícy
;

45 
uöt32_t
 
	mPCLK1_Fªquícy
;

46 
uöt32_t
 
	mPCLK2_Fªquícy
;

47 
uöt32_t
 
	mADCCLK_Fªquícy
;

48 }
	tRCC_ClocksTy≥Def
;

62 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

63 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

64 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

65 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

66 ((
	gHSE
Ë=
RCC_HSE_By∑ss
))

76 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

77 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

78 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

79 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

80 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

81 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

90 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

91 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

92 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

93 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

94 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

95 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

96 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

97 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

98 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

99 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

100 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

101 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

102 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

103 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

104 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

105 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

106 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

107 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

108 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

109 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

110 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

111 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

112 ((
MUL
Ë=
RCC_PLLMul_16
))

121 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

122 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

123 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

124 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

125 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

126 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

135 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

136 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

137 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

138 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

139 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

140 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

141 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

142 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

143 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

144 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

145 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

146 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

147 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

148 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

157 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

158 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

159 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

160 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

161 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

162 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

163 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

164 ((
PCLK
Ë=
RCC_HCLK_Div16
))

173 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

174 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

175 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

176 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

177 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

178 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

179 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

180 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

181 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

182 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

184 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

193 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

194 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

195 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

196 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

205 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

207 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

208 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

209 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

210 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

219 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

220 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

221 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

222 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

223 ((
LSE
Ë=
RCC_LSE_By∑ss
))

232 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

233 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

235 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

236 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

237 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

246 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

247 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

248 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

249 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

250 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

251 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

252 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

253 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

262 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

263 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

264 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

265 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

266 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

267 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

268 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

269 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

270 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

271 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

272 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

273 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

274 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

275 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

276 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

277 
	#RCC_APB2Pîùh_ALL
 ((
uöt32_t
)0x0000FFFD)

	)

279 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFF0002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

288 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

289 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

290 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

291 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

292 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

293 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

294 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

295 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

296 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

297 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

298 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

299 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

300 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

301 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

302 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

303 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

304 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

305 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

306 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

307 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

308 
	#RCC_APB1Pîùh_ALL
 ((
uöt32_t
)0x3AFEC83F)

	)

310 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC50137C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

319 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

321 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

322 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

323 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

324 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

325 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

326 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

335 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

336 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

337 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

338 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

339 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

340 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

341 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

342 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

343 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

344 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

345 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

346 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

347 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

348 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

349 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

350 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

351 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

353 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

374 
RCC_DeInô
();

375 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

376 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

377 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

378 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

380 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

382 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

383 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

384 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

385 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

386 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

388 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

389 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

390 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

392 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

394 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

395 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

396 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

397 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

398 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

402 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

403 
RCC_CÀ¨Fœg
();

404 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

405 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

27 
	~"°m32f10x.h
"

53 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

54 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

55 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

56 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

57 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

58 ((
	gIT
Ë=
RTC_IT_SEC
))

67 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

68 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

69 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

70 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

71 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

72 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

73 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

74 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

75 ((
FLAG
Ë=
RTC_FLAG_SEC
))

76 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

98 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

99 
RTC_E¡îC⁄figMode
();

100 
RTC_ExôC⁄figMode
();

101 
uöt32_t
 
RTC_GëCou¡î
();

102 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

103 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

104 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

105 
uöt32_t
 
RTC_GëDividî
();

106 
RTC_WaôF‹La°Task
();

107 
RTC_WaôF‹Synchro
();

108 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

109 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

110 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

111 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

27 
	~"°m32f10x.h
"

43 
uöt8_t
 
	mSDIO_ClockDiv
;

44 
uöt32_t
 
	mSDIO_ClockEdge
;

45 
uöt32_t
 
	mSDIO_ClockBy∑ss
;

46 
uöt32_t
 
	mSDIO_ClockPowîSave
;

47 
uöt32_t
 
	mSDIO_BusWide
;

48 
uöt32_t
 
	mSDIO_H¨dw¨eFlowC⁄åﬁ
;

49 } 
	tSDIO_InôTy≥Def
;

53 
uöt32_t
 
	mSDIO_Argumít
;

54 
uöt32_t
 
	mSDIO_CmdIndex
;

55 
uöt32_t
 
	mSDIO_Re•⁄£
;

56 
uöt32_t
 
	mSDIO_Waô
;

57 
uöt32_t
 
	mSDIO_CPSM
;

58 } 
	tSDIO_CmdInôTy≥Def
;

62 
uöt32_t
 
	mSDIO_D©aTimeOut
;

63 
uöt32_t
 
	mSDIO_D©aLígth
;

64 
uöt32_t
 
	mSDIO_D©aBlockSize
;

65 
uöt32_t
 
	mSDIO_Tøns„rDú
;

66 
uöt32_t
 
	mSDIO_Tøns„rMode
;

67 
uöt32_t
 
	mSDIO_DPSM
;

68 } 
	tSDIO_D©aInôTy≥Def
;

82 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

83 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

84 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

85 ((
	gEDGE
Ë=
SDIO_ClockEdge_FÆlög
))

94 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

95 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

96 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

97 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

106 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

107 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

108 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

109 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

118 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

119 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

120 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

121 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

122 ((
WIDE
Ë=
SDIO_BusWide_8b
))

132 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

133 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

134 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

135 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

144 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

145 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

146 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

156 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

157 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

158 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

159 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

160 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

161 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

162 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

163 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

164 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

165 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

166 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

167 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

168 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

169 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

170 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

171 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

172 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

173 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

174 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

175 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

176 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

177 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

178 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

179 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

180 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

189 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

198 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

199 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

200 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

201 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

202 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

203 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

212 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

213 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

214 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

215 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

216 ((
WAIT
Ë=
SDIO_Waô_Píd
))

225 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

226 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

227 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

236 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

237 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

238 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

239 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

240 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

241 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

250 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

259 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

260 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

261 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

262 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

263 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

264 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

265 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

266 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

267 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

268 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

269 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

270 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

271 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

272 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

273 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

274 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

275 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

276 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

277 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

278 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

279 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

280 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

281 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

282 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

283 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

284 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

285 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

286 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

287 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

288 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

297 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

299 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

300 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

309 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

310 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

311 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

312 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

321 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

322 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

323 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

332 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

333 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

334 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

335 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

336 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

337 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

338 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

339 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

340 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

341 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

342 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

343 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

344 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

345 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

346 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

347 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

348 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

349 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

350 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

351 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

352 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

353 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

354 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

355 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

356 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

357 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

358 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

359 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

360 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

361 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

362 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

363 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

364 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

365 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

366 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

367 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

368 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

369 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

370 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

371 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

372 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

373 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

374 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

375 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

376 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

377 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

378 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

379 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

381 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

383 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

384 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

385 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

386 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

387 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

388 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

389 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

390 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

391 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

392 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

393 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

394 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

395 ((
IT
Ë=
SDIO_IT_TXACT
) || \

396 ((
IT
Ë=
SDIO_IT_RXACT
) || \

397 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

398 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

399 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

400 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

401 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

402 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

403 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

404 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

405 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

406 ((
IT
Ë=
SDIO_IT_CEATAEND
))

408 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

418 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

419 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

420 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

421 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

442 
SDIO_DeInô
();

443 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

444 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

445 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

447 
uöt32_t
 
SDIO_GëPowîSèã
();

448 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

451 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

452 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

453 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

454 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

455 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

456 
uöt32_t
 
SDIO_GëD©aCou¡î
();

457 
uöt32_t
 
SDIO_RódD©a
();

458 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

459 
uöt32_t
 
SDIO_GëFIFOCou¡
();

460 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

461 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

463 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

464 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

466 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

467 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

469 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

470 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

471 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mSPI_Dúe˘i⁄
;

48 
uöt16_t
 
	mSPI_Mode
;

49 
uöt16_t
 
	mSPI_D©aSize
;

50 
uöt16_t
 
	mSPI_CPOL
;

51 
uöt16_t
 
	mSPI_CPHA
;

52 
uöt16_t
 
	mSPI_NSS
;

53 
uöt16_t
 
	mSPI_BaudR©ePªsˇÀr
;

54 
uöt16_t
 
	mSPI_Fú°Bô
;

55 
uöt16_t
 
	mSPI_CRCPﬁynomül
;

56 }
	tSPI_InôTy≥Def
;

64 
uöt16_t
 
	mI2S_Mode
;

65 
uöt16_t
 
	mI2S_Sènd¨d
;

66 
uöt16_t
 
	mI2S_D©aF‹m©
;

67 
uöt16_t
 
	mI2S_MCLKOuçut
;

68 
uöt16_t
 
	mI2S_AudioFªq
;

69 
uöt16_t
 
	mI2S_CPOL
;

70 }
	tI2S_InôTy≥Def
;

80 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI1_BASE
Ë|| \

	)

81 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
SPI2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

83 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI2_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

90 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

91 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

92 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

93 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

94 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

95 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

96 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

97 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

106 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

107 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

108 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

109 ((
MODE
Ë=
SPI_Mode_Sœve
))

118 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

119 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

120 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

121 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

130 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

131 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

132 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

133 ((
CPOL
Ë=
SPI_CPOL_High
))

142 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

143 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

144 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

145 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

154 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

155 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

157 ((
NSS
Ë=
SPI_NSS_H¨d
))

166 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

167 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

168 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

169 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

170 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

171 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

172 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

173 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

174 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

175 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

176 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

177 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

178 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

179 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

180 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

181 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

190 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

191 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

192 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

193 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

202 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

203 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

204 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

205 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

206 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

207 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

208 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

209 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

218 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

219 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

220 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

221 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

222 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

223 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

224 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

225 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

226 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

227 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

236 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

237 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

238 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

239 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

240 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

241 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

242 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

243 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

252 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

253 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

254 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

255 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

264 
	#I2S_AudioFªq_48k
 ((
uöt16_t
)48000)

	)

265 
	#I2S_AudioFªq_44k
 ((
uöt16_t
)44100)

	)

266 
	#I2S_AudioFªq_22k
 ((
uöt16_t
)22050)

	)

267 
	#I2S_AudioFªq_16k
 ((
uöt16_t
)16000)

	)

268 
	#I2S_AudioFªq_8k
 ((
uöt16_t
)8000)

	)

269 
	#I2S_AudioFªq_DeÁu…
 ((
uöt16_t
)2)

	)

270 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_48k
Ë|| \

	)

271 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

272 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

273 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

274 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

275 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

284 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

285 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

286 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

287 ((
CPOL
Ë=
I2S_CPOL_High
))

296 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

297 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

298 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

307 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

308 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

309 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

310 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

319 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

320 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

321 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

330 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

331 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

332 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

333 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

342 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

343 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

344 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

345 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

346 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

347 ((
IT
Ë=
SPI_I2S_IT_ERR
))

348 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

349 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

350 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

351 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

352 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

353 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

354 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

355 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

364 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

365 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

366 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

367 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

368 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

369 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

370 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

371 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

372 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

373 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

374 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

375 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

376 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

385 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

406 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

407 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

408 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

409 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

410 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

411 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

416 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

417 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

418 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

420 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

421 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

422 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

423 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

424 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

425 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

426 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

427 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

428 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mTIM_PªsˇÀr
;

48 
uöt16_t
 
	mTIM_Cou¡îMode
;

49 
uöt16_t
 
	mTIM_Pîiod
;

50 
uöt16_t
 
	mTIM_ClockDivisi⁄
;

51 
uöt8_t
 
	mTIM_Rïëôi⁄Cou¡î
;

52 } 
	tTIM_TimeBa£InôTy≥Def
;

60 
uöt16_t
 
	mTIM_OCMode
;

61 
uöt16_t
 
	mTIM_OuçutSèã
;

62 
uöt16_t
 
	mTIM_OuçutNSèã
;

63 
uöt16_t
 
	mTIM_Pul£
;

64 
uöt16_t
 
	mTIM_OCPﬁ¨ôy
;

65 
uöt16_t
 
	mTIM_OCNPﬁ¨ôy
;

66 
uöt16_t
 
	mTIM_OCIdÀSèã
;

67 
uöt16_t
 
	mTIM_OCNIdÀSèã
;

68 } 
	tTIM_OCInôTy≥Def
;

76 
uöt16_t
 
	mTIM_Ch™√l
;

77 
uöt16_t
 
	mTIM_ICPﬁ¨ôy
;

78 
uöt16_t
 
	mTIM_ICSñe˘i⁄
;

79 
uöt16_t
 
	mTIM_ICPªsˇÀr
;

80 
uöt16_t
 
	mTIM_ICFûãr
;

81 } 
	tTIM_ICInôTy≥Def
;

89 
uöt16_t
 
	mTIM_OSSRSèã
;

90 
uöt16_t
 
	mTIM_OSSISèã
;

91 
uöt16_t
 
	mTIM_LOCKLevñ
;

92 
uöt16_t
 
	mTIM_DódTime
;

93 
uöt16_t
 
	mTIM_Bªak
;

94 
uöt16_t
 
	mTIM_BªakPﬁ¨ôy
;

95 
uöt16_t
 
	mTIM_Autom©icOuçut
;

96 } 
	tTIM_BDTRInôTy≥Def
;

102 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

103 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM2_BASE
) || \

104 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

105 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

106 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

107 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
) || \

108 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM7_BASE
) || \

109 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

110 
	#IS_TIM_18_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

111 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

112 
	#IS_TIM_123458_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

113 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
) || \

114 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

115 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

116 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

117 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

126 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

127 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

128 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

129 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

130 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

131 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

132 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

133 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

134 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

135 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

136 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

137 ((
MODE
Ë=
TIM_OCMode_PWM2
))

138 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

139 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

140 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

141 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

142 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

143 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

144 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

145 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

154 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

155 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

157 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

166 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

167 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

168 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

169 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

170 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

171 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

172 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

173 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

174 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

175 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

176 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

177 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

178 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

187 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

188 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

189 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

190 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

191 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

192 ((
DIV
Ë=
TIM_CKD_DIV4
))

201 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

202 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

203 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

204 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

205 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

206 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

207 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

208 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

209 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

210 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

219 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

220 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

221 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

222 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

231 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

232 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

233 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

234 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

243 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

244 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

245 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

246 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

255 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

256 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

257 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

258 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

267 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

268 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

269 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

270 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

279 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

280 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

281 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

282 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

291 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

292 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

293 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

294 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

303 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

305 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

306 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

315 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

316 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

318 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

327 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

329 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

330 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

331 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

332 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

333 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

334 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

343 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

344 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

345 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

346 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

355 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

356 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

357 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

358 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

367 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

368 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

369 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

370 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

379 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

380 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

381 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

382 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

391 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

392 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

393 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

394 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

403 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001)

	)

404 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002)

	)

405 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003)

	)

406 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

407 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

408 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

417 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004)

	)

419 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008)

	)

420 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000C)

	)

421 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

422 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

423 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

424 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

433 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

434 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

435 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

436 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

437 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

438 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

439 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

440 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

441 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

442 
	#IS_TIM_PERIPH_IT
(
PERIPH
, 
TIM_IT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

443 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

444 (((
TIM_IT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

445 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

446 (((
TIM_IT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

447 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

448 (((
TIM_IT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_IT) != 0x0000)))

449 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

450 ((
IT
Ë=
TIM_IT_CC1
) || \

451 ((
IT
Ë=
TIM_IT_CC2
) || \

452 ((
IT
Ë=
TIM_IT_CC3
) || \

453 ((
IT
Ë=
TIM_IT_CC4
) || \

454 ((
IT
Ë=
TIM_IT_COM
) || \

455 ((
IT
Ë=
TIM_IT_Triggî
) || \

456 ((
IT
Ë=
TIM_IT_Bªak
))

465 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

467 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

468 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

469 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

470 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

471 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

472 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

473 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

474 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

475 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

476 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

477 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

478 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

479 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

480 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

481 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

482 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

483 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

484 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

485 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

486 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

487 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

488 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

489 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

490 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

491 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

492 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

493 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

494 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

495 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

496 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

497 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

498 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

499 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

500 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

501 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

502 ((
BASE
Ë=
TIM_DMABa£_DCR
))

511 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

512 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

513 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

514 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

515 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

516 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

517 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

518 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

519 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

520 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

521 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

522 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

523 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

524 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

525 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

526 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

527 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

528 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

529 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

530 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

531 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

532 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

533 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

534 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

535 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

536 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

537 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

538 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

539 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

540 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

541 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

542 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

543 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

544 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

545 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

546 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

555 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

556 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

557 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

558 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

559 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

560 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

561 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

562 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

563 
	#IS_TIM_PERIPH_DMA
(
PERIPH
, 
SOURCE
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

564 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

565 (((
SOURCE
Ë& (
uöt16_t
)0xA0FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

566 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

567 (((
SOURCE
Ë& (
uöt16_t
)0x80FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

568 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

569 (((
SOURCE
Ë& (
uöt16_t
)0xFEFF) == 0x0000) && ((SOURCE) != 0x0000)))

578 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

579 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

580 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

581 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

582 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

583 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

584 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

585 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

594 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

595 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

597 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

598 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

599 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

600 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

601 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

602 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

603 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

604 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

605 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

606 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

607 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

608 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

609 ((
SELECTION
Ë=
TIM_TS_ETRF
))

610 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

611 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

612 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

613 ((
SELECTION
Ë=
TIM_TS_ITR3
))

622 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

623 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

624 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

625 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

626 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

627 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

635 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

636 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

637 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

638 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

647 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

648 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

649 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

650 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

659 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

660 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

661 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

662 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

671 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

672 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

673 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

674 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

675 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

676 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

686 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

687 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

688 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

689 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

690 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

691 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

692 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

693 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

694 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

695 
	#IS_TIM_PERIPH_EVENT
(
PERIPH
, 
EVENT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

696 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

697 (((
EVENT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((EVENT) != 0x0000)) ||\

698 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

699 (((
EVENT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((EVENT) != 0x0000)) ||\

700 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

701 (((
EVENT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((EVENT) != 0x0000)))

710 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000)

	)

711 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001)

	)

712 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

713 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

722 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

723 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

724 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

725 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

734 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

735 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

736 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

737 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

747 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

748 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

749 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

750 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

759 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

760 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

761 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

762 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

763 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

764 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

765 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

766 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

767 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

768 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

769 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

770 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

771 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

772 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

773 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

774 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

775 
	#IS_TIM_PERIPH_TRGO
(
PERIPH
, 
TRGO
Ë(((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

	)

776 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM3_BASE
))||(((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
))|| \

777 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

778 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

779 ((
TRGO
Ë=
TIM_TRGOSour˚_Re£t
)) ||\

780 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

781 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

782 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

783 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

784 ((
TRGO
Ë=
TIM_TRGOSour˚_E«bÀ
)) ||\

785 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

786 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

787 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

788 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

789 ((
TRGO
Ë=
TIM_TRGOSour˚_Upd©e
)) ||\

790 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

791 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

792 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

793 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1
)) ||\

794 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

795 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

796 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

797 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1Ref
)) ||\

798 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

799 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

800 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

801 ((
TRGO
Ë=
TIM_TRGOSour˚_OC2Ref
)) ||\

802 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

803 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

804 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

805 ((
TRGO
Ë=
TIM_TRGOSour˚_OC3Ref
)) ||\

806 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

807 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

808 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

809 ((
TRGO
Ë=
TIM_TRGOSour˚_OC4Ref
)))

818 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

819 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

820 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

821 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

822 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

823 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

824 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

825 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

834 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

835 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

836 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

837 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

846 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

847 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

848 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

849 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

850 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

851 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

852 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

853 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

854 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

855 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

856 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

857 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

858 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

859 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

860 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

861 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

862 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

863 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

864 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

865 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

866 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

867 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

868 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

869 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

870 
	#IS_TIM_CLEAR_FLAG
(
PERIPH
, 
TIM_FLAG
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

871 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

872 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE1A0) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

873 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

874 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE100) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

875 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

876 (((
TIM_FLAG
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_FLAG) != 0x0000)))

877 
	#IS_TIM_PERIPH_FLAG
(
PERIPH
, 
TIM_FLAG
Ë(((((*(
uöt32_t
*)&(PERIPH))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
Ë||\

	)

878 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
Ë|| ((*(
uöt32_t
*)&(
PERIPH
))==
TIM5_BASE
) || \

879 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

880 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2
) ||\

881 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4
) || \

882 ((
TIM_FLAG
Ë=
TIM_FLAG_Triggî
))) ||\

883 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

884 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) ||\

885 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
)|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
) || \

886 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM7_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM6_BASE
)) && \

887 (((
TIM_FLAG
Ë=
TIM_FLAG_Upd©e
))) ||\

888 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
)) &&\

889 (((
TIM_FLAG
Ë=
TIM_FLAG_COM
Ë|| ((TIM_FLAGË=
TIM_FLAG_Bªak
))) ||\

890 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

891 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) || \

892 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

893 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2OF
) ||\

894 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4OF
))))

904 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

913 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

934 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

935 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

936 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

937 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

938 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

939 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

940 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

941 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

942 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

943 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

944 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

945 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

946 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

947 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

948 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

949 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

950 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

951 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

952 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

953 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

954 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

955 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

956 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

957 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

958 
uöt16_t
 
ExtTRGFûãr
);

959 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

960 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

961 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

962 
uöt16_t
 
ExtTRGFûãr
);

963 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

964 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

965 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

966 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

967 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

968 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

969 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

970 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

971 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

972 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

973 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

974 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

975 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

976 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

977 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

978 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

979 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

980 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

981 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

982 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

983 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

984 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

985 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

986 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

987 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

988 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

989 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

990 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

991 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

992 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

993 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

994 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

995 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

996 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

997 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

998 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

999 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1000 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1001 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1002 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1003 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1004 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1005 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1006 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1007 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1008 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1009 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1010 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1011 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1012 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1013 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1014 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1015 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1016 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1017 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1018 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1019 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1020 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1021 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1022 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1023 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1024 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1025 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mUSART_BaudR©e
;

48 
uöt16_t
 
	mUSART_W‹dLígth
;

49 
uöt16_t
 
	mUSART_St›Bôs
;

50 
uöt16_t
 
	mUSART_P¨ôy
;

51 
uöt16_t
 
	mUSART_Mode
;

52 
uöt16_t
 
	mUSART_H¨dw¨eFlowC⁄åﬁ
;

53 } 
	tUSART_InôTy≥Def
;

61 
uöt16_t
 
	mUSART_Clock
;

62 
uöt16_t
 
	mUSART_CPOL
;

63 
uöt16_t
 
	mUSART_CPHA
;

64 
uöt16_t
 
	mUSART_La°Bô
;

65 } 
	tUSART_ClockInôTy≥Def
;

75 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

76 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
USART2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART5_BASE
))

80 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

81 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
))

83 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

85 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

86 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
))

91 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

92 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

94 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

95 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

104 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

105 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

106 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

107 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

108 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

109 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

110 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

111 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

120 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

121 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

122 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

123 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

124 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

125 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

134 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

135 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

136 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

144 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

145 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

146 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

147 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

148 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

149 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

150 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

151 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

152 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

153 
	#IS_USART_PERIPH_HFC
(
PERIPH
, 
HFC
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

154 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

155 || ((
HFC
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
))

163 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

164 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

165 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

166 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

175 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

176 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

177 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

187 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

188 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

189 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

199 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

200 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

201 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

202 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

211 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

212 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

213 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

214 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

215 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

216 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

217 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

218 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

219 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

220 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

221 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

222 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

223 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

224 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

225 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

226 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

227 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

228 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

229 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

230 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

231 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

232 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

233 
	#IS_USART_PERIPH_IT
(
PERIPH
, 
USART_IT
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

234 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

235 || ((
USART_IT
Ë!
USART_IT_CTS
))

244 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

245 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

246 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

256 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

257 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

258 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

259 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

268 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

269 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

270 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

271 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

272 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

281 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

282 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

283 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

284 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

293 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

294 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

295 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

296 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

297 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

298 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

299 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

300 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

301 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

302 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

303 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

304 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

305 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

306 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

307 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

309 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

310 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

311 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

312 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

313 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

314 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

315 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

337 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

338 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

339 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

340 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

341 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

342 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

343 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

344 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

345 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

346 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

347 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

348 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

349 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

350 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

351 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

352 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

353 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

354 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

355 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

356 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

357 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

359 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

360 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

361 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

362 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

363 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

	@ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

54 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

55 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

56 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

57 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

58 ((
	gPRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

59 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

60 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

61 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

62 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

83 
WWDG_DeInô
();

84 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

85 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

86 
WWDG_E«bÀIT
();

87 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

88 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

89 
FœgSètus
 
WWDG_GëFœgSètus
();

90 
WWDG_CÀ¨Fœg
();

	@ChillerMonitorRev2.0/USER/inc/STM32FW/stm32f10x.h

32 #i‚de‡
__STM32F10x_H


33 
	#__STM32F10x_H


	)

43 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_HD
)

46 
	#STM32F10X_HD


	)

59 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


72 
	#HSE_VÆue
 ((
uöt32_t
)8000000Ë

	)

77 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500Ë

	)

79 
	#HSI_VÆue
 ((
uöt32_t
)8000000Ë

	)

83 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03)

	)

85 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x00)

	)

87 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00)

	)

89 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

	)

90 | (
	g__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

91 | 
	g__STM32F10X_STDPERIPH_VERSION_SUB2
)

104 
	#__MPU_PRESENT
 0

	)

105 
	#__NVIC_PRIO_BITS
 4

	)

106 
	#__Víd‹_SysTickC⁄fig
 0

	)

109 
	eIRQn


112 
	mN⁄MaskabÀI¡_IRQn
 = -14,

113 
	mMem‹yM™agemít_IRQn
 = -12,

114 
	mBusFau…_IRQn
 = -11,

115 
	mUßgeFau…_IRQn
 = -10,

116 
	mSVCÆl_IRQn
 = -5,

117 
	mDebugM⁄ô‹_IRQn
 = -4,

118 
	mPídSV_IRQn
 = -2,

119 
	mSysTick_IRQn
 = -1,

122 
	mWWDG_IRQn
 = 0,

123 
	mPVD_IRQn
 = 1,

124 
	mTAMPER_IRQn
 = 2,

125 
	mRTC_IRQn
 = 3,

126 
	mFLASH_IRQn
 = 4,

127 
	mRCC_IRQn
 = 5,

128 
	mEXTI0_IRQn
 = 6,

129 
	mEXTI1_IRQn
 = 7,

130 
	mEXTI2_IRQn
 = 8,

131 
	mEXTI3_IRQn
 = 9,

132 
	mEXTI4_IRQn
 = 10,

133 
	mDMA1_Ch™√l1_IRQn
 = 11,

134 
	mDMA1_Ch™√l2_IRQn
 = 12,

135 
	mDMA1_Ch™√l3_IRQn
 = 13,

136 
	mDMA1_Ch™√l4_IRQn
 = 14,

137 
	mDMA1_Ch™√l5_IRQn
 = 15,

138 
	mDMA1_Ch™√l6_IRQn
 = 16,

139 
	mDMA1_Ch™√l7_IRQn
 = 17,

140 
	mADC1_2_IRQn
 = 18,

141 
	mUSB_HP_CAN1_TX_IRQn
 = 19,

142 
	mUSB_LP_CAN1_RX0_IRQn
 = 20,

143 
	mCAN1_RX1_IRQn
 = 21,

144 
	mCAN1_SCE_IRQn
 = 22,

145 
	mEXTI9_5_IRQn
 = 23,

146 
	mTIM1_BRK_IRQn
 = 24,

147 
	mTIM1_UP_IRQn
 = 25,

148 
	mTIM1_TRG_COM_IRQn
 = 26,

149 
	mTIM1_CC_IRQn
 = 27,

150 
	mTIM2_IRQn
 = 28,

151 
	mTIM3_IRQn
 = 29,

152 #i‚de‡
STM32F10X_LD


153 
	mTIM4_IRQn
 = 30,

155 
	mI2C1_EV_IRQn
 = 31,

156 
	mI2C1_ER_IRQn
 = 32,

157 #i‚de‡
STM32F10X_LD


158 
	mI2C2_EV_IRQn
 = 33,

159 
	mI2C2_ER_IRQn
 = 34,

161 
	mSPI1_IRQn
 = 35,

162 
	mSPI2_IRQn
 = 36,

163 
	mUSART1_IRQn
 = 37,

164 
	mUSART2_IRQn
 = 38,

165 #i‚de‡
STM32F10X_LD


166 
	mUSART3_IRQn
 = 39,

168 
	mEXTI15_10_IRQn
 = 40,

169 
	mRTCAœrm_IRQn
 = 41,

170 
	mUSBWakeUp_IRQn
 = 42,

171 #ifde‡
STM32F10X_HD


172 
	mTIM8_BRK_IRQn
 = 43,

173 
	mTIM8_UP_IRQn
 = 44,

174 
	mTIM8_TRG_COM_IRQn
 = 45,

175 
	mTIM8_CC_IRQn
 = 46,

176 
	mADC3_IRQn
 = 47,

177 
	mFSMC_IRQn
 = 48,

178 
	mSDIO_IRQn
 = 49,

179 
	mTIM5_IRQn
 = 50,

180 
	mSPI3_IRQn
 = 51,

181 
	mUART4_IRQn
 = 52,

182 
	mUART5_IRQn
 = 53,

183 
	mTIM6_IRQn
 = 54,

184 
	mTIM7_IRQn
 = 55,

185 
	mDMA2_Ch™√l1_IRQn
 = 56,

186 
	mDMA2_Ch™√l2_IRQn
 = 57,

187 
	mDMA2_Ch™√l3_IRQn
 = 58,

188 
	mDMA2_Ch™√l4_5_IRQn
 = 59

190 } 
	tIRQn_Ty≥
;

196 
	~"c‹e_cm3.h
"

197 
	~"sy°em_°m32f10x.h
"

198 
	~<°döt.h
>

205 
öt32_t
 
	ts32
;

206 
öt16_t
 
	ts16
;

207 
öt8_t
 
	ts8
;

209 c⁄° 
	töt32_t
 
	tsc32
;

210 c⁄° 
	töt16_t
 
	tsc16
;

211 c⁄° 
	töt8_t
 
	tsc8
;

213 
__IO
 
	töt32_t
 
	tvs32
;

214 
__IO
 
	töt16_t
 
	tvs16
;

215 
__IO
 
	töt8_t
 
	tvs8
;

217 
__I
 
	töt32_t
 
	tvsc32
;

218 
__I
 
	töt16_t
 
	tvsc16
;

219 
__I
 
	töt8_t
 
	tvsc8
;

221 
uöt32_t
 
	tu32
;

222 
uöt16_t
 
	tu16
;

223 
uöt8_t
 
	tu8
;

225 c⁄° 
	tuöt32_t
 
	tuc32
;

226 c⁄° 
	tuöt16_t
 
	tuc16
;

227 c⁄° 
	tuöt8_t
 
	tuc8
;

229 
__IO
 
	tuöt32_t
 
	tvu32
;

230 
__IO
 
	tuöt16_t
 
	tvu16
;

231 
__IO
 
	tuöt8_t
 
	tvu8
;

233 
__I
 
	tuöt32_t
 
	tvuc32
;

234 
__I
 
	tuöt16_t
 
	tvuc16
;

235 
__I
 
	tuöt8_t
 
	tvuc8
;

237 íum {
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE
} 
	tboﬁ
;

239 íum {
	mRESET
 = 0, 
	mSET
 = !
RESET
} 
	tFœgSètus
, 
	tITSètus
;

241 íum {
	mDISABLE
 = 0, 
	mENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

242 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

244 íum {
	mERROR
 = 0, 
	mSUCCESS
 = !
ERROR
} 
	tEº‹Sètus
;

260 
__IO
 
uöt32_t
 
	mSR
;

261 
__IO
 
uöt32_t
 
	mCR1
;

262 
__IO
 
uöt32_t
 
	mCR2
;

263 
__IO
 
uöt32_t
 
	mSMPR1
;

264 
__IO
 
uöt32_t
 
	mSMPR2
;

265 
__IO
 
uöt32_t
 
	mJOFR1
;

266 
__IO
 
uöt32_t
 
	mJOFR2
;

267 
__IO
 
uöt32_t
 
	mJOFR3
;

268 
__IO
 
uöt32_t
 
	mJOFR4
;

269 
__IO
 
uöt32_t
 
	mHTR
;

270 
__IO
 
uöt32_t
 
	mLTR
;

271 
__IO
 
uöt32_t
 
	mSQR1
;

272 
__IO
 
uöt32_t
 
	mSQR2
;

273 
__IO
 
uöt32_t
 
	mSQR3
;

274 
__IO
 
uöt32_t
 
	mJSQR
;

275 
__IO
 
uöt32_t
 
	mJDR1
;

276 
__IO
 
uöt32_t
 
	mJDR2
;

277 
__IO
 
uöt32_t
 
	mJDR3
;

278 
__IO
 
uöt32_t
 
	mJDR4
;

279 
__IO
 
uöt32_t
 
	mDR
;

280 } 
	tADC_Ty≥Def
;

288 
uöt32_t
 
	mRESERVED0
;

289 
__IO
 
uöt16_t
 
	mDR1
;

290 
uöt16_t
 
	mRESERVED1
;

291 
__IO
 
uöt16_t
 
	mDR2
;

292 
uöt16_t
 
	mRESERVED2
;

293 
__IO
 
uöt16_t
 
	mDR3
;

294 
uöt16_t
 
	mRESERVED3
;

295 
__IO
 
uöt16_t
 
	mDR4
;

296 
uöt16_t
 
	mRESERVED4
;

297 
__IO
 
uöt16_t
 
	mDR5
;

298 
uöt16_t
 
	mRESERVED5
;

299 
__IO
 
uöt16_t
 
	mDR6
;

300 
uöt16_t
 
	mRESERVED6
;

301 
__IO
 
uöt16_t
 
	mDR7
;

302 
uöt16_t
 
	mRESERVED7
;

303 
__IO
 
uöt16_t
 
	mDR8
;

304 
uöt16_t
 
	mRESERVED8
;

305 
__IO
 
uöt16_t
 
	mDR9
;

306 
uöt16_t
 
	mRESERVED9
;

307 
__IO
 
uöt16_t
 
	mDR10
;

308 
uöt16_t
 
	mRESERVED10
;

309 
__IO
 
uöt16_t
 
	mRTCCR
;

310 
uöt16_t
 
	mRESERVED11
;

311 
__IO
 
uöt16_t
 
	mCR
;

312 
uöt16_t
 
	mRESERVED12
;

313 
__IO
 
uöt16_t
 
	mCSR
;

314 
uöt16_t
 
	mRESERVED13
[5];

315 
__IO
 
uöt16_t
 
	mDR11
;

316 
uöt16_t
 
	mRESERVED14
;

317 
__IO
 
uöt16_t
 
	mDR12
;

318 
uöt16_t
 
	mRESERVED15
;

319 
__IO
 
uöt16_t
 
	mDR13
;

320 
uöt16_t
 
	mRESERVED16
;

321 
__IO
 
uöt16_t
 
	mDR14
;

322 
uöt16_t
 
	mRESERVED17
;

323 
__IO
 
uöt16_t
 
	mDR15
;

324 
uöt16_t
 
	mRESERVED18
;

325 
__IO
 
uöt16_t
 
	mDR16
;

326 
uöt16_t
 
	mRESERVED19
;

327 
__IO
 
uöt16_t
 
	mDR17
;

328 
uöt16_t
 
	mRESERVED20
;

329 
__IO
 
uöt16_t
 
	mDR18
;

330 
uöt16_t
 
	mRESERVED21
;

331 
__IO
 
uöt16_t
 
	mDR19
;

332 
uöt16_t
 
	mRESERVED22
;

333 
__IO
 
uöt16_t
 
	mDR20
;

334 
uöt16_t
 
	mRESERVED23
;

335 
__IO
 
uöt16_t
 
	mDR21
;

336 
uöt16_t
 
	mRESERVED24
;

337 
__IO
 
uöt16_t
 
	mDR22
;

338 
uöt16_t
 
	mRESERVED25
;

339 
__IO
 
uöt16_t
 
	mDR23
;

340 
uöt16_t
 
	mRESERVED26
;

341 
__IO
 
uöt16_t
 
	mDR24
;

342 
uöt16_t
 
	mRESERVED27
;

343 
__IO
 
uöt16_t
 
	mDR25
;

344 
uöt16_t
 
	mRESERVED28
;

345 
__IO
 
uöt16_t
 
	mDR26
;

346 
uöt16_t
 
	mRESERVED29
;

347 
__IO
 
uöt16_t
 
	mDR27
;

348 
uöt16_t
 
	mRESERVED30
;

349 
__IO
 
uöt16_t
 
	mDR28
;

350 
uöt16_t
 
	mRESERVED31
;

351 
__IO
 
uöt16_t
 
	mDR29
;

352 
uöt16_t
 
	mRESERVED32
;

353 
__IO
 
uöt16_t
 
	mDR30
;

354 
uöt16_t
 
	mRESERVED33
;

355 
__IO
 
uöt16_t
 
	mDR31
;

356 
uöt16_t
 
	mRESERVED34
;

357 
__IO
 
uöt16_t
 
	mDR32
;

358 
uöt16_t
 
	mRESERVED35
;

359 
__IO
 
uöt16_t
 
	mDR33
;

360 
uöt16_t
 
	mRESERVED36
;

361 
__IO
 
uöt16_t
 
	mDR34
;

362 
uöt16_t
 
	mRESERVED37
;

363 
__IO
 
uöt16_t
 
	mDR35
;

364 
uöt16_t
 
	mRESERVED38
;

365 
__IO
 
uöt16_t
 
	mDR36
;

366 
uöt16_t
 
	mRESERVED39
;

367 
__IO
 
uöt16_t
 
	mDR37
;

368 
uöt16_t
 
	mRESERVED40
;

369 
__IO
 
uöt16_t
 
	mDR38
;

370 
uöt16_t
 
	mRESERVED41
;

371 
__IO
 
uöt16_t
 
	mDR39
;

372 
uöt16_t
 
	mRESERVED42
;

373 
__IO
 
uöt16_t
 
	mDR40
;

374 
uöt16_t
 
	mRESERVED43
;

375 
__IO
 
uöt16_t
 
	mDR41
;

376 
uöt16_t
 
	mRESERVED44
;

377 
__IO
 
uöt16_t
 
	mDR42
;

378 
uöt16_t
 
	mRESERVED45
;

379 } 
	tBKP_Ty≥Def
;

387 
__IO
 
uöt32_t
 
	mTIR
;

388 
__IO
 
uöt32_t
 
	mTDTR
;

389 
__IO
 
uöt32_t
 
	mTDLR
;

390 
__IO
 
uöt32_t
 
	mTDHR
;

391 } 
	tCAN_TxMaûBox_Ty≥Def
;

399 
__IO
 
uöt32_t
 
	mRIR
;

400 
__IO
 
uöt32_t
 
	mRDTR
;

401 
__IO
 
uöt32_t
 
	mRDLR
;

402 
__IO
 
uöt32_t
 
	mRDHR
;

403 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

411 
__IO
 
uöt32_t
 
	mFR1
;

412 
__IO
 
uöt32_t
 
	mFR2
;

413 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

421 
__IO
 
uöt32_t
 
	mMCR
;

422 
__IO
 
uöt32_t
 
	mMSR
;

423 
__IO
 
uöt32_t
 
	mTSR
;

424 
__IO
 
uöt32_t
 
	mRF0R
;

425 
__IO
 
uöt32_t
 
	mRF1R
;

426 
__IO
 
uöt32_t
 
	mIER
;

427 
__IO
 
uöt32_t
 
	mESR
;

428 
__IO
 
uöt32_t
 
	mBTR
;

429 
uöt32_t
 
	mRESERVED0
[88];

430 
CAN_TxMaûBox_Ty≥Def
 
	msTxMaûBox
[3];

431 
CAN_FIFOMaûBox_Ty≥Def
 
	msFIFOMaûBox
[2];

432 
uöt32_t
 
	mRESERVED1
[12];

433 
__IO
 
uöt32_t
 
	mFMR
;

434 
__IO
 
uöt32_t
 
	mFM1R
;

435 
uöt32_t
 
	mRESERVED2
;

436 
__IO
 
uöt32_t
 
	mFS1R
;

437 
uöt32_t
 
	mRESERVED3
;

438 
__IO
 
uöt32_t
 
	mFFA1R
;

439 
uöt32_t
 
	mRESERVED4
;

440 
__IO
 
uöt32_t
 
	mFA1R
;

441 
uöt32_t
 
	mRESERVED5
[8];

442 
CAN_FûãrRegi°î_Ty≥Def
 
	msFûãrRegi°î
[14];

443 } 
	tCAN_Ty≥Def
;

451 
__IO
 
uöt32_t
 
	mDR
;

452 
__IO
 
uöt8_t
 
	mIDR
;

453 
uöt8_t
 
	mRESERVED0
;

454 
uöt16_t
 
	mRESERVED1
;

455 
__IO
 
uöt32_t
 
	mCR
;

456 } 
	tCRC_Ty≥Def
;

464 
__IO
 
uöt32_t
 
	mCR
;

465 
__IO
 
uöt32_t
 
	mSWTRIGR
;

466 
__IO
 
uöt32_t
 
	mDHR12R1
;

467 
__IO
 
uöt32_t
 
	mDHR12L1
;

468 
__IO
 
uöt32_t
 
	mDHR8R1
;

469 
__IO
 
uöt32_t
 
	mDHR12R2
;

470 
__IO
 
uöt32_t
 
	mDHR12L2
;

471 
__IO
 
uöt32_t
 
	mDHR8R2
;

472 
__IO
 
uöt32_t
 
	mDHR12RD
;

473 
__IO
 
uöt32_t
 
	mDHR12LD
;

474 
__IO
 
uöt32_t
 
	mDHR8RD
;

475 
__IO
 
uöt32_t
 
	mDOR1
;

476 
__IO
 
uöt32_t
 
	mDOR2
;

477 } 
	tDAC_Ty≥Def
;

485 
__IO
 
uöt32_t
 
	mIDCODE
;

486 
__IO
 
uöt32_t
 
	mCR
;

487 }
	tDBGMCU_Ty≥Def
;

495 
__IO
 
uöt32_t
 
	mCCR
;

496 
__IO
 
uöt32_t
 
	mCNDTR
;

497 
__IO
 
uöt32_t
 
	mCPAR
;

498 
__IO
 
uöt32_t
 
	mCMAR
;

499 } 
	tDMA_Ch™√l_Ty≥Def
;

503 
__IO
 
uöt32_t
 
	mISR
;

504 
__IO
 
uöt32_t
 
	mIFCR
;

505 } 
	tDMA_Ty≥Def
;

513 
__IO
 
uöt32_t
 
	mIMR
;

514 
__IO
 
uöt32_t
 
	mEMR
;

515 
__IO
 
uöt32_t
 
	mRTSR
;

516 
__IO
 
uöt32_t
 
	mFTSR
;

517 
__IO
 
uöt32_t
 
	mSWIER
;

518 
__IO
 
uöt32_t
 
	mPR
;

519 } 
	tEXTI_Ty≥Def
;

527 
__IO
 
uöt32_t
 
	mACR
;

528 
__IO
 
uöt32_t
 
	mKEYR
;

529 
__IO
 
uöt32_t
 
	mOPTKEYR
;

530 
__IO
 
uöt32_t
 
	mSR
;

531 
__IO
 
uöt32_t
 
	mCR
;

532 
__IO
 
uöt32_t
 
	mAR
;

533 
__IO
 
uöt32_t
 
	mRESERVED
;

534 
__IO
 
uöt32_t
 
	mOBR
;

535 
__IO
 
uöt32_t
 
	mWRPR
;

536 } 
	tFLASH_Ty≥Def
;

544 
__IO
 
uöt16_t
 
	mRDP
;

545 
__IO
 
uöt16_t
 
	mUSER
;

546 
__IO
 
uöt16_t
 
	mD©a0
;

547 
__IO
 
uöt16_t
 
	mD©a1
;

548 
__IO
 
uöt16_t
 
	mWRP0
;

549 
__IO
 
uöt16_t
 
	mWRP1
;

550 
__IO
 
uöt16_t
 
	mWRP2
;

551 
__IO
 
uöt16_t
 
	mWRP3
;

552 } 
	tOB_Ty≥Def
;

560 
__IO
 
uöt32_t
 
	mBTCR
[8];

561 } 
	tFSMC_B™k1_Ty≥Def
;

569 
__IO
 
uöt32_t
 
	mBWTR
[7];

570 } 
	tFSMC_B™k1E_Ty≥Def
;

578 
__IO
 
uöt32_t
 
	mPCR2
;

579 
__IO
 
uöt32_t
 
	mSR2
;

580 
__IO
 
uöt32_t
 
	mPMEM2
;

581 
__IO
 
uöt32_t
 
	mPATT2
;

582 
uöt32_t
 
	mRESERVED0
;

583 
__IO
 
uöt32_t
 
	mECCR2
;

584 } 
	tFSMC_B™k2_Ty≥Def
;

592 
__IO
 
uöt32_t
 
	mPCR3
;

593 
__IO
 
uöt32_t
 
	mSR3
;

594 
__IO
 
uöt32_t
 
	mPMEM3
;

595 
__IO
 
uöt32_t
 
	mPATT3
;

596 
uöt32_t
 
	mRESERVED0
;

597 
__IO
 
uöt32_t
 
	mECCR3
;

598 } 
	tFSMC_B™k3_Ty≥Def
;

606 
__IO
 
uöt32_t
 
	mPCR4
;

607 
__IO
 
uöt32_t
 
	mSR4
;

608 
__IO
 
uöt32_t
 
	mPMEM4
;

609 
__IO
 
uöt32_t
 
	mPATT4
;

610 
__IO
 
uöt32_t
 
	mPIO4
;

611 } 
	tFSMC_B™k4_Ty≥Def
;

619 
__IO
 
uöt32_t
 
	mCRL
;

620 
__IO
 
uöt32_t
 
	mCRH
;

621 
__IO
 
uöt32_t
 
	mIDR
;

622 
__IO
 
uöt32_t
 
	mODR
;

623 
__IO
 
uöt32_t
 
	mBSRR
;

624 
__IO
 
uöt32_t
 
	mBRR
;

625 
__IO
 
uöt32_t
 
	mLCKR
;

626 } 
	tGPIO_Ty≥Def
;

634 
__IO
 
uöt32_t
 
	mEVCR
;

635 
__IO
 
uöt32_t
 
	mMAPR
;

636 
__IO
 
uöt32_t
 
	mEXTICR
[4];

637 } 
	tAFIO_Ty≥Def
;

644 
__IO
 
uöt16_t
 
	mCR1
;

645 
uöt16_t
 
	mRESERVED0
;

646 
__IO
 
uöt16_t
 
	mCR2
;

647 
uöt16_t
 
	mRESERVED1
;

648 
__IO
 
uöt16_t
 
	mOAR1
;

649 
uöt16_t
 
	mRESERVED2
;

650 
__IO
 
uöt16_t
 
	mOAR2
;

651 
uöt16_t
 
	mRESERVED3
;

652 
__IO
 
uöt16_t
 
	mDR
;

653 
uöt16_t
 
	mRESERVED4
;

654 
__IO
 
uöt16_t
 
	mSR1
;

655 
uöt16_t
 
	mRESERVED5
;

656 
__IO
 
uöt16_t
 
	mSR2
;

657 
uöt16_t
 
	mRESERVED6
;

658 
__IO
 
uöt16_t
 
	mCCR
;

659 
uöt16_t
 
	mRESERVED7
;

660 
__IO
 
uöt16_t
 
	mTRISE
;

661 
uöt16_t
 
	mRESERVED8
;

662 } 
	tI2C_Ty≥Def
;

670 
__IO
 
uöt32_t
 
	mKR
;

671 
__IO
 
uöt32_t
 
	mPR
;

672 
__IO
 
uöt32_t
 
	mRLR
;

673 
__IO
 
uöt32_t
 
	mSR
;

674 } 
	tIWDG_Ty≥Def
;

682 
__IO
 
uöt32_t
 
	mCR
;

683 
__IO
 
uöt32_t
 
	mCSR
;

684 } 
	tPWR_Ty≥Def
;

692 
__IO
 
uöt32_t
 
	mCR
;

693 
__IO
 
uöt32_t
 
	mCFGR
;

694 
__IO
 
uöt32_t
 
	mCIR
;

695 
__IO
 
uöt32_t
 
	mAPB2RSTR
;

696 
__IO
 
uöt32_t
 
	mAPB1RSTR
;

697 
__IO
 
uöt32_t
 
	mAHBENR
;

698 
__IO
 
uöt32_t
 
	mAPB2ENR
;

699 
__IO
 
uöt32_t
 
	mAPB1ENR
;

700 
__IO
 
uöt32_t
 
	mBDCR
;

701 
__IO
 
uöt32_t
 
	mCSR
;

702 } 
	tRCC_Ty≥Def
;

710 
__IO
 
uöt16_t
 
	mCRH
;

711 
uöt16_t
 
	mRESERVED0
;

712 
__IO
 
uöt16_t
 
	mCRL
;

713 
uöt16_t
 
	mRESERVED1
;

714 
__IO
 
uöt16_t
 
	mPRLH
;

715 
uöt16_t
 
	mRESERVED2
;

716 
__IO
 
uöt16_t
 
	mPRLL
;

717 
uöt16_t
 
	mRESERVED3
;

718 
__IO
 
uöt16_t
 
	mDIVH
;

719 
uöt16_t
 
	mRESERVED4
;

720 
__IO
 
uöt16_t
 
	mDIVL
;

721 
uöt16_t
 
	mRESERVED5
;

722 
__IO
 
uöt16_t
 
	mCNTH
;

723 
uöt16_t
 
	mRESERVED6
;

724 
__IO
 
uöt16_t
 
	mCNTL
;

725 
uöt16_t
 
	mRESERVED7
;

726 
__IO
 
uöt16_t
 
	mALRH
;

727 
uöt16_t
 
	mRESERVED8
;

728 
__IO
 
uöt16_t
 
	mALRL
;

729 
uöt16_t
 
	mRESERVED9
;

730 } 
	tRTC_Ty≥Def
;

738 
__IO
 
uöt32_t
 
	mPOWER
;

739 
__IO
 
uöt32_t
 
	mCLKCR
;

740 
__IO
 
uöt32_t
 
	mARG
;

741 
__IO
 
uöt32_t
 
	mCMD
;

742 
__I
 
uöt32_t
 
	mRESPCMD
;

743 
__I
 
uöt32_t
 
	mRESP1
;

744 
__I
 
uöt32_t
 
	mRESP2
;

745 
__I
 
uöt32_t
 
	mRESP3
;

746 
__I
 
uöt32_t
 
	mRESP4
;

747 
__IO
 
uöt32_t
 
	mDTIMER
;

748 
__IO
 
uöt32_t
 
	mDLEN
;

749 
__IO
 
uöt32_t
 
	mDCTRL
;

750 
__I
 
uöt32_t
 
	mDCOUNT
;

751 
__I
 
uöt32_t
 
	mSTA
;

752 
__IO
 
uöt32_t
 
	mICR
;

753 
__IO
 
uöt32_t
 
	mMASK
;

754 
uöt32_t
 
	mRESERVED0
[2];

755 
__I
 
uöt32_t
 
	mFIFOCNT
;

756 
uöt32_t
 
	mRESERVED1
[13];

757 
__IO
 
uöt32_t
 
	mFIFO
;

758 } 
	tSDIO_Ty≥Def
;

766 
__IO
 
uöt16_t
 
	mCR1
;

767 
uöt16_t
 
	mRESERVED0
;

768 
__IO
 
uöt16_t
 
	mCR2
;

769 
uöt16_t
 
	mRESERVED1
;

770 
__IO
 
uöt16_t
 
	mSR
;

771 
uöt16_t
 
	mRESERVED2
;

772 
__IO
 
uöt16_t
 
	mDR
;

773 
uöt16_t
 
	mRESERVED3
;

774 
__IO
 
uöt16_t
 
	mCRCPR
;

775 
uöt16_t
 
	mRESERVED4
;

776 
__IO
 
uöt16_t
 
	mRXCRCR
;

777 
uöt16_t
 
	mRESERVED5
;

778 
__IO
 
uöt16_t
 
	mTXCRCR
;

779 
uöt16_t
 
	mRESERVED6
;

780 
__IO
 
uöt16_t
 
	mI2SCFGR
;

781 
uöt16_t
 
	mRESERVED7
;

782 
__IO
 
uöt16_t
 
	mI2SPR
;

783 
uöt16_t
 
	mRESERVED8
;

784 } 
	tSPI_Ty≥Def
;

792 
__IO
 
uöt16_t
 
	mCR1
;

793 
uöt16_t
 
	mRESERVED0
;

794 
__IO
 
uöt16_t
 
	mCR2
;

795 
uöt16_t
 
	mRESERVED1
;

796 
__IO
 
uöt16_t
 
	mSMCR
;

797 
uöt16_t
 
	mRESERVED2
;

798 
__IO
 
uöt16_t
 
	mDIER
;

799 
uöt16_t
 
	mRESERVED3
;

800 
__IO
 
uöt16_t
 
	mSR
;

801 
uöt16_t
 
	mRESERVED4
;

802 
__IO
 
uöt16_t
 
	mEGR
;

803 
uöt16_t
 
	mRESERVED5
;

804 
__IO
 
uöt16_t
 
	mCCMR1
;

805 
uöt16_t
 
	mRESERVED6
;

806 
__IO
 
uöt16_t
 
	mCCMR2
;

807 
uöt16_t
 
	mRESERVED7
;

808 
__IO
 
uöt16_t
 
	mCCER
;

809 
uöt16_t
 
	mRESERVED8
;

810 
__IO
 
uöt16_t
 
	mCNT
;

811 
uöt16_t
 
	mRESERVED9
;

812 
__IO
 
uöt16_t
 
	mPSC
;

813 
uöt16_t
 
	mRESERVED10
;

814 
__IO
 
uöt16_t
 
	mARR
;

815 
uöt16_t
 
	mRESERVED11
;

816 
__IO
 
uöt16_t
 
	mRCR
;

817 
uöt16_t
 
	mRESERVED12
;

818 
__IO
 
uöt16_t
 
	mCCR1
;

819 
uöt16_t
 
	mRESERVED13
;

820 
__IO
 
uöt16_t
 
	mCCR2
;

821 
uöt16_t
 
	mRESERVED14
;

822 
__IO
 
uöt16_t
 
	mCCR3
;

823 
uöt16_t
 
	mRESERVED15
;

824 
__IO
 
uöt16_t
 
	mCCR4
;

825 
uöt16_t
 
	mRESERVED16
;

826 
__IO
 
uöt16_t
 
	mBDTR
;

827 
uöt16_t
 
	mRESERVED17
;

828 
__IO
 
uöt16_t
 
	mDCR
;

829 
uöt16_t
 
	mRESERVED18
;

830 
__IO
 
uöt16_t
 
	mDMAR
;

831 
uöt16_t
 
	mRESERVED19
;

832 } 
	tTIM_Ty≥Def
;

840 
__IO
 
uöt16_t
 
	mSR
;

841 
uöt16_t
 
	mRESERVED0
;

842 
__IO
 
uöt16_t
 
	mDR
;

843 
uöt16_t
 
	mRESERVED1
;

844 
__IO
 
uöt16_t
 
	mBRR
;

845 
uöt16_t
 
	mRESERVED2
;

846 
__IO
 
uöt16_t
 
	mCR1
;

847 
uöt16_t
 
	mRESERVED3
;

848 
__IO
 
uöt16_t
 
	mCR2
;

849 
uöt16_t
 
	mRESERVED4
;

850 
__IO
 
uöt16_t
 
	mCR3
;

851 
uöt16_t
 
	mRESERVED5
;

852 
__IO
 
uöt16_t
 
	mGTPR
;

853 
uöt16_t
 
	mRESERVED6
;

854 } 
	tUSART_Ty≥Def
;

862 
__IO
 
uöt32_t
 
	mCR
;

863 
__IO
 
uöt32_t
 
	mCFR
;

864 
__IO
 
uöt32_t
 
	mSR
;

865 } 
	tWWDG_Ty≥Def
;

875 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

876 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

878 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

879 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

881 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

884 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

885 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

886 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

888 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

889 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

890 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

891 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

892 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

893 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

894 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

895 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

896 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

897 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

898 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

899 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

900 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

901 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

902 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

903 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

904 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

905 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

906 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

907 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

908 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

910 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

911 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

912 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

913 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

914 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

915 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

916 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

917 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

918 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

919 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

920 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

921 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

922 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

923 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

924 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

925 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

927 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

929 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

930 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

931 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

932 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

933 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

934 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

935 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

936 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

937 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

938 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

939 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

940 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

941 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

942 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

943 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

944 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

946 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

947 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

949 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

950 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

951 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

952 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

953 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

955 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

965 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

966 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

967 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

968 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

969 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

970 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

971 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

972 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

973 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

974 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

975 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

976 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

977 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

978 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

979 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

980 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

981 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

982 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

983 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

984 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

985 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

986 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

987 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

988 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

989 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

990 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

991 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

992 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

993 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

994 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

995 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

996 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

997 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

998 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

999 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1000 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1001 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1002 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1003 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1004 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1005 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1006 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1007 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1008 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1009 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1010 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1011 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1012 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1013 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1014 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1015 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1016 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1017 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1018 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1019 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1020 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1021 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1022 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1023 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1024 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1025 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1026 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1051 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1055 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1059 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1068 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1069 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1070 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1071 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1072 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1074 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1075 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1076 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1077 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1080 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1081 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1082 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1083 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1084 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1085 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1086 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1087 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1089 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1093 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1094 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1095 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1096 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1105 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1108 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1111 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1114 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1117 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1120 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1123 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1126 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1129 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1132 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1135 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1138 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1141 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1144 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1147 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1150 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1153 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1156 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1159 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1162 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1165 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1168 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1171 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1174 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1177 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1180 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1183 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1186 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1189 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1192 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1195 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1198 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1201 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1204 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1207 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1210 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1213 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1216 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1219 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1222 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1225 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1228 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1231 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1232 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1233 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1234 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1237 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1238 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1241 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1242 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1243 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1244 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1245 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1254 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1255 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1256 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1257 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1258 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1259 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1260 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1261 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1262 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1263 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1266 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1267 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1268 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1271 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1272 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1273 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1275 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1276 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1277 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1280 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1281 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1282 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1284 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1285 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1286 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1287 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1288 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1291 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1292 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1293 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1294 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1295 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1296 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1297 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1298 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1299 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1301 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1302 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1303 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1304 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1307 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1308 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1309 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1310 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1311 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1313 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1314 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1315 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1316 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1319 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1320 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1321 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1322 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1323 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1325 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1326 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1327 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1330 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1331 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1332 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1333 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1335 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1336 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1338 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1339 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1340 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1341 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1342 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1345 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1346 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1347 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1348 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1349 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1350 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1351 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1352 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1353 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1354 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1355 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1356 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1357 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1358 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1359 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1361 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1363 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1364 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1365 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1366 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1369 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1370 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1371 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1372 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1373 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1376 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1377 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1378 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1379 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1380 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1381 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1382 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1383 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1384 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1385 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1386 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1387 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1388 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1389 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1390 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1391 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1392 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1395 
	#RCC_APB2RSTR_AFIORST
 ((
uöt16_t
)0x0001Ë

	)

1396 
	#RCC_APB2RSTR_IOPARST
 ((
uöt16_t
)0x0004Ë

	)

1397 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt16_t
)0x0008Ë

	)

1398 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt16_t
)0x0010Ë

	)

1399 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt16_t
)0x0020Ë

	)

1400 
	#RCC_APB2RSTR_IOPERST
 ((
uöt16_t
)0x0040Ë

	)

1401 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt16_t
)0x0080Ë

	)

1402 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt16_t
)0x0100Ë

	)

1403 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt16_t
)0x0200Ë

	)

1404 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt16_t
)0x0400Ë

	)

1405 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt16_t
)0x0800Ë

	)

1406 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt16_t
)0x1000Ë

	)

1407 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt16_t
)0x2000Ë

	)

1408 
	#RCC_APB2RSTR_USART1RST
 ((
uöt16_t
)0x4000Ë

	)

1409 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt16_t
)0x8000Ë

	)

1412 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1413 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1414 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1415 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1416 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1417 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1418 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1419 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1420 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1421 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1422 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1423 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1424 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1425 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1426 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1427 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1428 
	#RCC_APB1RSTR_CANRST
 ((
uöt32_t
)0x02000000Ë

	)

1429 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1430 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1431 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1434 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1435 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1436 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1437 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1438 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1439 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1440 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1443 
	#RCC_APB2ENR_AFIOEN
 ((
uöt16_t
)0x0001Ë

	)

1444 
	#RCC_APB2ENR_IOPAEN
 ((
uöt16_t
)0x0004Ë

	)

1445 
	#RCC_APB2ENR_IOPBEN
 ((
uöt16_t
)0x0008Ë

	)

1446 
	#RCC_APB2ENR_IOPCEN
 ((
uöt16_t
)0x0010Ë

	)

1447 
	#RCC_APB2ENR_IOPDEN
 ((
uöt16_t
)0x0020Ë

	)

1448 
	#RCC_APB2ENR_IOPEEN
 ((
uöt16_t
)0x0040Ë

	)

1449 
	#RCC_APB2ENR_IOPFEN
 ((
uöt16_t
)0x0080Ë

	)

1450 
	#RCC_APB2ENR_IOPGEN
 ((
uöt16_t
)0x0100Ë

	)

1451 
	#RCC_APB2ENR_ADC1EN
 ((
uöt16_t
)0x0200Ë

	)

1452 
	#RCC_APB2ENR_ADC2EN
 ((
uöt16_t
)0x0400Ë

	)

1453 
	#RCC_APB2ENR_TIM1EN
 ((
uöt16_t
)0x0800Ë

	)

1454 
	#RCC_APB2ENR_SPI1EN
 ((
uöt16_t
)0x1000Ë

	)

1455 
	#RCC_APB2ENR_TIM8EN
 ((
uöt16_t
)0x2000Ë

	)

1456 
	#RCC_APB2ENR_USART1EN
 ((
uöt16_t
)0x4000Ë

	)

1457 
	#RCC_APB2ENR_ADC3EN
 ((
uöt16_t
)0x8000Ë

	)

1460 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

1461 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

1462 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

1463 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

1464 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

1465 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

1466 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

1467 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

1468 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

1469 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

1470 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

1471 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

1472 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

1473 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

1474 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

1475 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

1476 
	#RCC_APB1ENR_CANEN
 ((
uöt32_t
)0x02000000Ë

	)

1477 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

1478 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

1479 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

1482 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

1483 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

1484 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

1486 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

1487 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

1488 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

1491 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1492 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

1493 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

1494 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

1496 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

1497 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

1500 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

1501 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1502 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

1503 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

1504 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

1505 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

1506 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

1507 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

1508 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

1517 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1519 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

1520 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

1521 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

1523 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

1524 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

1525 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

1527 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

1528 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

1529 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

1531 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

1532 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

1533 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

1535 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

1536 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

1537 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

1539 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

1540 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

1541 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

1543 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

1544 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

1545 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

1547 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

1548 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

1549 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

1551 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1553 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

1554 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

1555 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

1557 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

1558 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

1559 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

1561 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

1562 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

1563 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

1565 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

1566 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

1567 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

1569 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

1570 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

1571 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

1573 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

1574 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

1575 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

1577 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

1578 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

1579 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

1581 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

1582 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

1583 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

1586 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1588 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

1589 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

1590 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

1592 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

1593 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

1594 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

1596 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

1597 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

1598 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

1600 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

1601 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

1602 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

1604 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

1605 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

1606 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

1608 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

1609 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

1610 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

1612 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

1613 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

1614 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

1616 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

1617 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

1618 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

1620 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1622 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

1623 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

1624 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

1626 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

1627 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

1628 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

1630 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

1631 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

1632 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

1634 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

1635 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

1636 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

1638 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

1639 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

1640 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

1642 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

1643 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

1644 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

1646 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

1647 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

1648 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

1650 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

1651 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

1652 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

1655 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

1656 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

1657 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

1658 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

1659 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

1660 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

1661 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

1662 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

1663 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

1664 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

1665 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

1666 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

1667 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

1668 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

1669 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

1670 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

1673 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

1674 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

1675 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

1676 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

1677 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

1678 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

1679 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

1680 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

1681 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

1682 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

1683 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

1684 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

1685 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

1686 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

1687 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

1688 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

1691 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

1692 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

1693 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

1694 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

1695 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

1696 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

1697 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

1698 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

1699 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

1700 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

1701 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

1702 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

1703 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

1704 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

1705 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

1706 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

1708 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

1709 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

1710 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

1711 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

1712 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

1713 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

1714 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

1715 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

1716 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

1717 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

1718 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

1719 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

1720 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

1721 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

1722 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

1723 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

1726 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

1727 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

1728 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

1729 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

1730 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

1731 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

1732 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

1733 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

1734 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

1735 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

1736 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

1737 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

1738 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

1739 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

1740 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

1741 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

1744 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

1745 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

1746 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

1747 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

1748 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

1749 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

1750 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

1751 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

1752 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

1753 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

1754 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

1755 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

1756 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

1757 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

1758 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

1759 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

1760 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

1765 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

1766 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

1767 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

1768 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

1769 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

1772 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

1773 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

1774 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

1775 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

1776 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

1777 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

1778 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

1779 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

1780 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

1781 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

1782 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

1783 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

1784 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

1785 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

1786 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

1787 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

1789 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

1790 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

1791 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

1792 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

1795 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

1796 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

1797 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

1798 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

1799 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

1801 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

1804 
	#AFIO_MAPR_SPI1
 
	`_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

1805 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

1806 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

1807 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

1809 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

1810 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

1811 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

1814 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1815 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

1816 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

1818 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1819 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

1820 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

1823 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1824 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

1825 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1827 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

1828 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

1829 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

1832 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1833 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

1834 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

1835 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

1837 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1838 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

1839 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

1842 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1843 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

1844 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1846 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

1848 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

1849 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

1850 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

1853 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

1854 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

1855 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

1857 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

1858 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

1859 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

1860 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

1861 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

1862 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

1864 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

1865 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

1866 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

1867 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

1870 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

1871 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

1872 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

1873 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

1876 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

1877 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

1878 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

1879 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

1882 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

1883 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

1884 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

1885 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

1886 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

1887 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

1888 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

1891 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

1892 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

1893 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

1894 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

1895 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

1896 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

1897 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

1900 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

1901 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

1902 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

1903 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

1904 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

1905 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

1906 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

1909 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

1910 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

1911 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

1912 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

1913 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

1914 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

1915 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

1918 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

1919 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

1920 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

1921 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

1924 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

1925 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

1926 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

1927 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

1928 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

1929 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

1930 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

1933 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

1934 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

1935 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

1936 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

1937 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

1938 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

1939 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

1942 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

1943 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

1944 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

1945 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

1946 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

1947 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

1948 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

1951 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

1952 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

1953 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

1954 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

1955 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

1956 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

1957 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

1960 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

1961 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

1962 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

1963 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

1966 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

1967 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

1968 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

1969 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

1970 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

1971 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

1972 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

1975 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

1976 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

1977 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

1978 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

1979 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

1980 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

1981 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

1984 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

1985 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

1986 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

1987 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

1988 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

1989 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

1990 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

1993 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

1994 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

1995 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

1996 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

1997 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

1998 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

1999 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2002 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2003 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2004 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2005 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2008 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2009 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2010 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2011 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2012 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2013 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2014 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2017 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2018 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2019 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2020 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2021 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2022 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2023 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2026 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2027 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2028 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2029 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2030 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2031 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2032 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2035 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2036 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2037 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2038 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2039 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2040 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2041 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2050 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2051 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2052 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2053 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2056 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2059 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2062 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2063 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2064 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2073 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2074 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2075 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2076 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2077 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2078 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2079 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2080 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2081 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2082 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2083 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2084 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2085 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2086 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2087 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2088 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2089 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2090 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2091 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2092 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2093 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2094 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2095 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2096 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2097 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2098 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2099 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2100 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2101 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2102 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2103 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2104 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2105 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2108 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2109 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2110 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2111 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2112 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2113 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2114 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2115 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2116 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2117 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2118 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2119 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2120 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2121 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2122 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2123 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2124 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2125 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2126 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2127 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2128 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2129 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2130 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2131 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2132 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2133 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2134 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2135 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2136 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2137 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2138 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2139 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2140 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2143 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2144 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2145 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2146 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2147 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2148 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2149 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2150 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2151 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2152 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2153 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2154 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2155 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2156 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2157 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2158 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2160 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2161 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2162 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2163 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2164 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2165 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2166 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2167 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2168 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2169 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2170 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2171 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2172 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2173 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2174 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2175 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2178 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2179 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2180 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2181 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2182 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2183 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2184 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2185 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2186 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2187 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2188 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2189 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2190 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2191 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2192 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2193 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2194 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2195 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2196 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2197 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2198 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2199 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2200 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2201 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2202 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2203 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2204 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2205 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2206 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2207 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2208 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2209 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2210 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2213 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2214 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2215 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2216 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2217 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2218 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2219 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2220 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2221 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2222 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2223 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2224 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2225 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2226 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2227 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2228 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2229 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2230 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2231 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2232 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2233 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2234 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2235 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2236 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2237 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2238 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2239 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2240 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2241 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2242 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2243 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2244 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2245 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2248 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2249 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2250 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2251 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2254 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2255 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2256 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2257 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2260 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2261 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2262 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2263 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

2266 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

2267 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

2268 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

2269 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

2272 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

2273 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

2274 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

2275 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

2278 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

2279 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

2280 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

2281 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

2284 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

2285 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

2286 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

2287 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

2290 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

2291 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

2292 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

2293 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

2296 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

2297 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

2298 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

2299 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

2300 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

2303 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

2304 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

2305 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

2306 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

2307 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

2308 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

2309 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

2310 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

2311 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

2312 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

2315 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

2316 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

2319 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

2320 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

2321 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

2323 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

2324 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

2325 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

2326 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

2329 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

2330 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

2331 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

2332 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

2333 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

2334 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

2335 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

2336 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

2338 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

2339 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

2342 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

2343 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

2344 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

2347 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

2348 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

2349 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

2350 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

2351 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

2352 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

2355 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

2356 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

2357 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

2358 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

2361 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

2362 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

2363 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

2364 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

2365 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

2366 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

2367 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

2368 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

2369 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

2370 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

2371 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

2372 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

2373 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

2374 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

2378 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

2379 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

2380 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

2381 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

2382 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

2384 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

2385 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

2386 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

2387 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

2388 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

2389 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

2391 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

2392 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

2393 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

2394 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

2395 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

2396 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

2399 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

2400 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

2401 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

2404 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

2405 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

2406 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

2407 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

2408 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

2411 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2414 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2417 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

2426 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2427 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2428 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2429 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2430 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2431 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2432 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2433 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2434 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2435 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2436 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2437 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2438 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2439 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2440 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2441 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2442 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2443 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2444 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2447 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2448 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2449 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2450 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2451 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2452 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2453 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2454 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2455 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2456 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2457 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2458 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2459 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2460 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2461 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2462 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2463 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2464 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2465 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2468 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2469 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2470 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2471 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2472 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2473 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2474 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2475 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2476 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2477 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2478 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2479 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2480 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2481 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2482 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2483 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2484 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2485 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2486 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2489 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2490 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2491 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2492 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2493 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2494 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2495 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2496 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2497 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2498 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2499 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2500 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2501 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2502 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2503 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2504 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2505 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2506 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2507 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2510 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

2511 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

2512 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

2513 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

2514 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

2515 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

2516 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

2517 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

2518 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

2519 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

2520 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

2521 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

2522 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

2523 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

2524 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

2525 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

2526 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

2527 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

2528 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

2531 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

2532 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

2533 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

2534 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

2535 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

2536 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

2537 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

2538 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

2539 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

2540 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

2541 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

2542 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

2543 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

2544 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

2545 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

2546 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

2547 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

2548 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

2549 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

2558 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

2559 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2560 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2561 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2562 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

2563 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2564 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2565 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2566 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

2567 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2568 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2569 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2570 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

2571 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2572 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2573 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2574 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

2575 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2576 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2577 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2578 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

2579 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2580 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2581 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2582 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

2583 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2584 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2585 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2588 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

2589 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2590 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2591 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2592 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

2593 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2594 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2595 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2596 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

2597 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2598 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2599 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2600 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

2601 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2602 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2603 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2604 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

2605 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2606 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2607 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2608 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

2609 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2610 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2611 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2612 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

2613 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2614 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2615 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2618 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

2619 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2620 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2621 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2622 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

2623 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2624 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

2625 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

2627 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2628 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2629 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2631 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2632 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2633 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2635 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

2636 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2637 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2639 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2642 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

2643 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2644 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2645 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2646 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

2647 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2648 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

2649 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

2651 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2652 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2653 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2655 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2656 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2657 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2659 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

2660 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2661 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2663 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2666 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

2667 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2668 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2669 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2670 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

2671 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2672 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

2673 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

2675 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2676 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2677 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2679 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2680 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2681 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2683 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

2684 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2685 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2687 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2690 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

2691 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2692 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2693 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2694 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

2695 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2696 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

2697 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

2699 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2700 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2701 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2703 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2704 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2705 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2707 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

2708 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2709 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2711 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2714 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

2715 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2716 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2717 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2718 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

2719 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2720 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

2721 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

2723 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2724 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2725 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2727 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2728 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2729 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2731 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

2732 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2733 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2735 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2738 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

2739 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2740 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2741 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2742 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

2743 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2744 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

2745 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

2747 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2748 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2749 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2751 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2752 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2753 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2755 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

2756 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2757 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2759 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2762 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

2763 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2764 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2765 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2766 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

2767 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2768 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

2769 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

2771 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

2772 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2773 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2775 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2776 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2777 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2779 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

2780 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2781 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2783 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2786 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

2789 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

2792 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

2795 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

2798 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

2801 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

2804 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

2807 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2810 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2813 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2817 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2820 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2823 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2827 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2830 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2833 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2836 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2840 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2843 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2846 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2849 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2858 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

2859 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

2860 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

2861 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

2862 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

2865 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2866 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2867 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2868 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2869 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2870 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2872 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2873 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2874 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2875 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2876 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2877 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2878 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2879 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2881 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2882 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2883 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2884 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2886 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

2887 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

2888 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

2889 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

2890 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

2892 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2893 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2897 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2898 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2899 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

2900 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

2901 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2902 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2904 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

2905 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2906 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2907 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

2909 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

2911 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

2912 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

2913 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

2914 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

2916 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

2917 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

2918 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2919 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2922 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2923 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2924 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2925 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2927 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2928 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2929 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2930 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2932 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2933 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2934 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2935 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2937 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2938 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2939 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2940 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2942 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2943 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2944 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2945 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2947 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2948 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2949 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2950 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2952 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2953 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2954 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2955 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2957 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2958 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2959 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2960 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2963 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2964 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2965 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2966 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2968 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2969 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2970 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2971 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2973 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2974 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2975 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2976 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2978 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2979 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2980 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2981 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2983 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2984 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2985 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2986 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2988 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2989 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2990 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2991 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2993 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2994 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2995 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2996 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2998 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2999 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3000 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3001 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3003 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3004 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3005 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3006 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3008 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3009 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3010 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3011 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3014 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3017 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3020 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3023 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3026 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3029 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3032 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3033 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3034 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3035 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3036 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3037 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3039 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3040 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3041 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3042 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3043 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3044 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3046 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3047 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3048 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3049 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3050 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3051 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3053 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3054 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3055 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3056 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3057 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3058 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3060 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3061 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3062 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3063 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3064 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3067 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3068 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3069 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3070 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3071 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3072 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3074 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3075 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3076 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3077 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3078 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3079 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3081 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3082 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3083 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3084 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3085 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3086 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3088 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3089 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3090 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3091 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3092 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3093 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3095 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3096 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3097 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3098 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3099 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3100 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3102 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3103 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3104 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3105 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3106 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3107 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3110 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3111 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3112 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3113 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3114 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3115 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3117 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3118 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3119 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3120 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3121 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3122 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3124 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3125 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3126 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3127 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3128 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3129 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3131 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3132 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3133 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3134 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3135 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3136 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3138 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3139 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3140 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3141 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3142 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3143 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3145 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3146 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3147 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3148 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3149 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3150 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3153 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3154 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3155 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3156 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3157 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3158 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3160 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3161 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3162 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3163 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3164 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3165 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3167 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3168 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3169 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3170 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3171 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3172 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3174 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3175 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3176 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3177 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3178 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3179 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3181 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3182 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3183 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3186 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3189 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3192 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3195 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3198 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3199 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3208 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3209 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3210 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3212 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3213 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3214 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3215 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3217 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3218 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3219 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3221 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3222 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3223 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3224 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3225 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3227 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3228 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3229 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3230 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3232 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3233 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3235 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3237 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3238 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3239 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3241 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3242 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3243 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3244 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3245 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3247 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3250 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3251 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3254 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3257 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3260 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3263 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3266 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3269 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3272 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3273 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3276 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3277 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3280 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3281 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3284 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3287 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3296 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

3297 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

3298 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

3299 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

3300 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3302 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

3303 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

3304 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

3306 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

3308 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

3309 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

3310 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

3313 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

3314 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

3315 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

3317 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

3318 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

3319 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

3320 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

3322 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

3323 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

3324 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

3325 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

3326 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

3327 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

3328 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

3329 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

3332 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

3333 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

3334 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

3335 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

3337 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

3338 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

3339 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

3340 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

3342 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

3344 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

3345 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

3346 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

3347 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

3348 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

3350 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

3351 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

3352 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

3354 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

3355 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

3358 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

3359 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

3360 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

3361 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

3362 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

3363 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

3364 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

3365 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

3366 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

3367 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

3368 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

3369 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

3370 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

3371 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

3372 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

3375 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

3376 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

3377 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

3378 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

3379 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

3380 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

3381 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

3382 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

3383 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

3384 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

3385 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

3386 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

3389 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

3390 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

3391 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

3392 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

3393 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

3394 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

3395 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

3396 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

3399 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

3400 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

3401 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

3403 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

3404 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

3406 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

3407 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

3408 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

3409 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

3411 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

3413 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

3414 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

3415 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

3417 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

3418 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

3420 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

3421 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

3422 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

3423 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

3425 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

3429 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

3430 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3431 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3433 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

3434 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

3435 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

3436 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

3437 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

3439 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

3440 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3441 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3443 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

3444 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

3445 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

3446 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

3447 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

3450 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

3451 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

3452 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

3454 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

3455 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

3457 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

3458 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

3459 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

3460 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

3462 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

3464 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

3465 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

3466 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

3468 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

3469 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

3471 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

3472 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

3473 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

3474 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

3476 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

3480 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

3481 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3482 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3484 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

3485 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

3486 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

3487 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

3488 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

3490 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

3491 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3492 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3494 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

3495 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

3496 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

3497 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

3498 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

3501 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

3502 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

3503 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

3504 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

3505 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

3506 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

3507 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

3508 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

3509 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

3510 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

3511 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

3512 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

3513 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

3514 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

3517 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

3520 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

3523 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

3526 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

3529 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

3532 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

3535 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

3538 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

3541 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

3542 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

3543 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

3544 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

3545 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

3546 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

3547 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

3548 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

3549 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

3551 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

3552 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

3553 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

3555 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

3556 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

3557 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

3558 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

3559 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

3560 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

3563 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

3564 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

3565 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

3566 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

3567 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

3568 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

3570 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

3571 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

3572 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

3573 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

3574 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

3575 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

3578 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

3587 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

3588 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

3589 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

3592 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

3593 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

3594 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

3595 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

3596 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

3597 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

3600 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

3603 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

3606 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

3609 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

3612 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

3615 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

3618 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

3621 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

3630 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

3633 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

3634 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

3635 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

3636 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

3639 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

3642 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

3643 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

3652 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

3653 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

3654 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

3655 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

3656 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

3657 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

3658 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

3659 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

3661 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

3664 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

3665 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

3666 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

3667 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

3668 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

3669 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

3670 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

3671 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

3673 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

3674 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

3675 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

3677 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

3680 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

3689 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3690 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3692 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3693 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3694 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3696 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3697 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3698 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3700 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3701 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3702 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3703 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3704 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3705 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3706 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3707 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3708 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3711 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3712 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3714 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3715 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3716 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3718 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3719 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3720 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3722 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3723 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3724 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3725 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3726 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3727 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3728 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3729 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3730 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3733 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3734 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3736 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3737 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3738 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3740 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3741 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3742 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3744 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3745 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3746 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3747 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3748 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3749 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3750 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3751 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3752 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3755 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3756 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3758 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3759 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3760 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3762 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3763 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3764 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3766 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3767 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3768 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3769 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3770 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3771 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3772 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3773 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3774 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3777 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3778 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3779 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3780 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3781 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3783 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3784 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3785 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3786 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3787 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3789 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3790 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3791 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3792 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3793 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3795 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3796 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3797 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3798 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3799 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3801 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3802 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3803 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3804 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3805 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3807 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3808 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3809 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3810 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3811 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3813 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3814 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3815 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3818 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3819 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3820 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3821 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3822 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3824 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3825 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3826 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3827 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3828 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3830 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3831 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3832 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3833 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3834 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3836 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3837 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3838 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3839 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3840 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3842 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3843 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3844 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3845 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3846 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3848 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3849 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3850 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3851 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3852 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3854 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3855 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3856 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3859 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3860 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3861 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3862 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3863 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3865 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3866 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3867 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3868 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3869 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3871 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3872 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3873 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3874 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3875 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3877 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3878 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3879 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3880 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3881 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3883 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3884 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3885 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3886 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3887 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3889 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3890 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3891 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3892 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3893 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3895 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3896 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3897 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3900 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3901 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3902 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3903 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3904 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3906 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3907 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3908 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3909 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3910 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3912 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3913 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3914 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3915 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3916 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3918 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3919 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3920 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3921 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3922 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3924 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3925 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3926 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3927 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3928 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3930 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3931 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3932 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3933 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3934 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3936 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3937 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3938 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3941 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3942 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3943 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3944 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3945 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3947 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3948 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3949 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3950 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3951 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3953 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3954 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3955 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3956 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3957 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3959 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3960 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3961 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3962 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3963 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3965 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3966 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3967 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3968 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3969 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3971 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3972 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3973 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3976 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3977 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3978 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3979 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3980 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3982 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3983 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3984 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3985 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3986 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3988 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3989 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3990 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3991 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3992 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3994 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3995 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3996 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3997 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3998 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4000 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4001 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4002 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4003 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4004 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4006 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4007 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4008 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4011 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4012 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4013 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4014 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4015 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4017 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4018 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4019 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4020 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4021 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4023 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4024 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4025 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4026 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4027 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4029 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4030 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4031 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4032 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4033 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4035 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4036 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4037 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4038 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4039 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4041 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4042 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4043 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4046 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4047 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4048 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4049 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4050 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4052 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4053 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4054 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4055 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4056 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4058 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4059 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4060 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4061 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4062 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4064 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4065 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4066 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4067 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4068 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4070 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4071 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4072 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4073 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4074 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4076 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4077 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4078 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4081 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4082 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4083 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4085 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4086 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4087 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4089 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4091 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4092 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4093 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4094 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4095 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4097 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4098 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4099 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4100 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4101 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4103 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4104 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4105 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4106 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4109 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4110 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4111 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4113 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4114 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4115 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4117 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4119 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4120 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4121 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4122 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4123 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4125 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4126 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4127 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4128 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4129 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4131 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4132 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4133 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4134 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4137 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4138 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4139 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4141 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4142 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4143 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4145 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4147 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4148 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4149 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4150 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4151 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4153 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4154 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4155 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4156 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4157 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4159 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4160 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4161 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4162 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4165 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4166 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4167 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4168 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4169 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4170 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4171 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4174 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4175 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4176 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4177 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4178 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4179 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4180 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4183 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4184 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4185 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4186 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4187 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4188 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4189 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4192 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4193 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4194 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4195 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4196 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4197 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4198 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4199 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4200 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4202 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4203 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4204 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4205 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4206 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4207 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4208 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4209 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4210 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4212 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4213 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4214 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4215 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4216 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4217 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4218 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4219 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4220 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4222 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4223 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4224 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4225 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4226 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4227 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4228 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4229 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4230 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4233 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4234 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4235 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4236 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4237 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4238 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4239 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4240 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4241 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4243 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4244 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4245 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4246 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4247 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4248 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4249 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4250 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4251 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4253 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4254 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4255 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4256 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4257 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4258 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4259 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4260 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4261 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4263 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4264 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4265 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4266 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4267 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4268 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4269 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4270 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4271 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4274 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4275 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4276 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4277 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4278 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4279 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4280 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4281 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4282 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4284 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4285 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4286 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4287 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4288 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4289 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4290 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4291 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4292 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4294 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4295 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4296 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4297 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4298 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4299 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4300 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4301 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4302 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4304 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4305 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4306 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4307 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4308 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4309 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4310 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4311 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4312 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4315 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4316 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4317 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4318 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4319 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4320 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4321 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4322 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4323 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4325 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4326 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4327 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4328 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4329 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4330 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4331 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4332 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4333 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4335 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4336 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4337 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4338 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4339 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4340 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4341 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4342 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4343 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4345 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4346 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4347 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4348 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4349 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4350 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4351 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4352 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4353 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4356 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4357 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4358 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4359 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4360 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4361 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4362 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4363 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4364 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4366 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4367 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4368 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4369 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4370 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4371 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4372 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4373 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4374 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4376 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4377 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4378 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4379 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4380 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4381 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4382 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4383 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4384 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4386 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4387 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4388 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4389 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4390 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4391 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4392 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4393 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4394 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4397 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4398 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4399 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4400 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4401 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4402 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4403 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4404 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4405 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4407 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4408 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4409 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4410 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4411 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4412 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4413 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4414 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4415 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4417 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4418 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4419 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4420 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4421 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4422 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4423 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4424 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4425 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4427 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4428 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4429 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4430 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4431 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4432 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4433 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4434 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4435 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4438 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4439 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4440 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4441 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4442 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4443 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4444 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4445 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4446 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4448 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4449 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4450 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4451 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4452 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4453 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4454 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4455 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4456 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4458 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4459 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4460 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4461 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4462 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4463 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4464 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4465 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4466 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4468 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4469 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4470 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4471 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4472 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4473 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4474 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4475 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4476 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4479 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4482 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4491 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

4492 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

4493 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

4496 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

4497 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

4498 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

4499 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

4501 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

4502 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

4503 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

4505 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

4506 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

4509 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

4512 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

4514 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

4515 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

4516 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

4518 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

4519 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

4520 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

4521 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

4522 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

4523 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

4524 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

4527 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

4530 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

4533 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

4536 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4539 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4542 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

4545 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

4548 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

4551 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

4552 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

4553 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

4554 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

4556 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

4557 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

4558 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

4559 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

4560 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

4562 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

4563 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

4564 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

4565 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

4568 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

4571 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

4572 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

4573 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

4574 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

4575 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

4576 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

4577 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

4578 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

4579 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

4580 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

4581 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

4582 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

4583 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

4584 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

4585 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

4586 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

4587 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

4588 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

4589 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

4590 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

4591 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

4592 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

4593 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

4594 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

4597 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

4598 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

4599 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

4600 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

4601 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

4602 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

4603 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

4604 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

4605 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

4606 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

4607 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

4608 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

4609 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

4612 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

4613 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

4614 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

4615 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

4616 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

4617 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

4618 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

4619 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

4620 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

4621 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

4622 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

4623 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

4625 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

4626 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

4627 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

4628 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

4629 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

4630 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

4631 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

4632 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

4633 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

4634 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

4635 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

4638 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

4641 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4651 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

4653 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4654 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4655 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4657 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4658 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4659 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4661 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4662 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4663 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4665 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4667 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4668 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4669 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4671 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4672 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4675 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

4677 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4678 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4679 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4681 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4682 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4683 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4685 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4686 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4687 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4689 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4691 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4692 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4693 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4695 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4696 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4699 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

4701 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4702 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4703 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4705 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4706 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4707 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4709 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4710 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4711 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4713 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4715 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4716 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4717 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4719 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4720 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4723 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

4725 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4726 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4727 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4729 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4730 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4731 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4733 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4734 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4735 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4737 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4739 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4740 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4741 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4743 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4744 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4747 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

4749 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4750 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4751 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4753 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4754 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4755 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4757 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4758 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4759 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4761 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4763 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4764 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4765 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4767 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4768 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4771 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

4773 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4774 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4775 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4777 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4778 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4779 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4781 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4782 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4783 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4785 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4787 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4788 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4789 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4791 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4792 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4795 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

4797 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4798 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4799 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4801 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4802 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4803 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4805 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4806 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4807 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4809 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4811 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4812 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4813 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4815 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4816 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4819 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

4821 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

4822 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

4823 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

4825 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

4826 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

4827 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

4829 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

4830 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

4831 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

4833 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

4835 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

4836 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

4837 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

4839 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

4840 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

4844 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

4845 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

4846 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

4847 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

4848 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

4849 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

4850 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

4851 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

4852 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

4853 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

4854 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

4855 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

4856 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

4859 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

4860 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

4861 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

4862 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

4863 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

4864 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

4865 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

4866 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

4867 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

4868 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

4871 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

4872 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

4873 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

4874 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

4875 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

4878 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

4879 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

4880 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

4881 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

4882 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

4883 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

4884 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

4885 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

4887 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

4890 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

4894 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

4897 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

4900 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

4903 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

4906 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

4909 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

4912 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

4915 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

4920 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

4923 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

4926 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

4929 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

4932 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

4935 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

4938 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

4941 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

4946 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4949 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4952 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4955 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4958 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4961 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4964 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

4967 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

4970 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4973 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4976 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4979 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4982 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4985 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4988 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

4991 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

4996 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

4999 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5002 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5005 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5008 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5011 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5014 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5017 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5022 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5024 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5025 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5026 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5027 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5028 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5029 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5031 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5034 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5036 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5037 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5038 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5039 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5040 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5041 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5043 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5046 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5048 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5049 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5050 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5051 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5052 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5053 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5055 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5058 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5060 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5061 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5062 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5063 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5064 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5065 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5067 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5070 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5072 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5073 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5074 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5075 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5076 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5077 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5079 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5082 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5084 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5085 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5086 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5087 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5088 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5089 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5091 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5094 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5096 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5097 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5098 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5099 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5100 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5101 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5103 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5106 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5108 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5109 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5110 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5111 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5112 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5113 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5115 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5120 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5122 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5123 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5124 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5125 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5126 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5127 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5129 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5132 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5134 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5135 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5136 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5137 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5138 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5139 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5141 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5144 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5146 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5147 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5148 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5149 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5150 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5151 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5153 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5156 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5158 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5159 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5160 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5161 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5162 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5163 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5165 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5168 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5170 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5171 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5172 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5173 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5174 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5175 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5177 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5180 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5182 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5183 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5184 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5185 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5186 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5187 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5189 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5192 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5194 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5195 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5196 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5197 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5198 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5199 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5201 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5204 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5206 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5207 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5208 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5209 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5210 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5213 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5216 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5218 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5219 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5220 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5221 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5222 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5223 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5225 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5228 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5230 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5231 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5232 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5233 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5234 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5235 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5237 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5240 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5242 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5243 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5244 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5245 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5246 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5247 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5249 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5252 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5254 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5255 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5256 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5257 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5258 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5259 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5261 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5264 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5266 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5267 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5268 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5269 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5270 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5271 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5273 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5276 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5278 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5279 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5280 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5281 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5282 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5283 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5285 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5288 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5290 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5291 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5292 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5293 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5294 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5295 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5297 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5300 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5302 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5303 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5304 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5305 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5306 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5307 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5309 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5319 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

5320 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

5321 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

5322 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

5323 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

5324 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

5325 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

5326 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

5327 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

5330 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

5331 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

5332 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

5333 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

5334 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

5335 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

5336 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

5337 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

5338 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

5341 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

5342 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

5343 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

5344 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

5345 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

5346 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

5347 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

5348 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

5349 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

5350 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

5351 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

5352 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

5353 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

5354 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

5355 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

5356 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

5358 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

5359 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

5360 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

5361 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

5363 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

5364 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

5365 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

5366 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

5369 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

5370 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

5371 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

5372 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

5375 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

5376 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

5377 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

5378 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

5381 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

5382 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

5383 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

5384 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

5385 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

5386 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

5387 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

5388 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

5389 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

5390 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

5391 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

5392 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

5393 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

5394 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

5397 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

5398 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

5399 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

5401 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

5402 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

5403 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

5404 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

5406 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

5407 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

5410 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

5411 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

5412 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

5413 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

5414 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

5415 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

5419 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5420 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5421 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5422 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5423 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5426 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5427 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5428 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5431 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5432 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5433 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5434 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5437 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5438 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5439 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5440 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5443 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5444 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5445 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5446 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5447 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5450 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5451 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5452 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5455 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5456 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5457 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5458 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5461 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5462 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5463 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5464 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5467 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5468 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5469 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5470 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5471 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5474 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5475 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5476 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5479 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5480 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5481 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5482 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5485 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5486 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5487 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5488 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5491 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5492 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5493 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5494 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5497 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5498 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5499 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5502 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5503 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5504 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5505 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5508 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5509 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5510 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5511 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5514 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5515 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5516 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5517 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5520 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5521 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5522 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5525 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5526 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5527 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5528 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5531 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5532 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5533 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5534 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5538 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

5541 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

5542 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

5543 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

5544 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

5545 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

5546 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

5547 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

5548 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

5549 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

5550 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

5551 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

5552 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

5553 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

5554 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

5555 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

5558 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

5559 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

5560 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

5561 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

5562 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

5563 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

5564 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

5565 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

5566 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

5567 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

5568 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

5569 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

5570 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

5571 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

5572 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

5575 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

5576 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

5577 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

5578 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

5579 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

5580 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

5581 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

5582 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

5583 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

5584 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

5585 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

5586 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

5587 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

5588 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

5589 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

5592 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

5593 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

5594 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

5595 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

5596 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

5597 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

5598 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

5599 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

5600 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

5601 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

5602 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

5603 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

5604 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

5605 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

5606 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

5609 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5610 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5611 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5612 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5613 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5614 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5615 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5616 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5617 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5618 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5619 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5620 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5621 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5622 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5623 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5624 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5625 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5626 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5627 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5628 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5629 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5630 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5631 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5632 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5633 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5634 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5635 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5636 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5637 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5638 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5639 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5640 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5643 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5644 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5645 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5646 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5647 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5648 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5649 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5650 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5651 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5652 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5653 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5654 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5655 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5656 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5657 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5658 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5659 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5660 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5661 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5662 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5663 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5664 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5665 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5666 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5667 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5668 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5669 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5670 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5671 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5672 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5673 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5674 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5677 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5678 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5679 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5680 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5681 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5682 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5683 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5684 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5685 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5686 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5687 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5688 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5689 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5690 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5691 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5692 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5693 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5694 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5695 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5696 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5697 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5698 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5699 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5700 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5701 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5702 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5703 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5704 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5705 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5706 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5707 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5708 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5711 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5712 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5713 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5714 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5715 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5716 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5717 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5718 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5719 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5720 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5721 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5722 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5723 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5724 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5725 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5726 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5727 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5728 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5729 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5730 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5731 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5732 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5733 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5734 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5735 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5736 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5737 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5738 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5739 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5740 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5741 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5742 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5745 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5746 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5747 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5748 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5749 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5750 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5751 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5752 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5753 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5754 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5755 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5756 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5757 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5758 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5759 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5760 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5761 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5762 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5763 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5764 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5765 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5766 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5767 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5768 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5769 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5770 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5771 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5772 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5773 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5774 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5775 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5776 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5779 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5780 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5781 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5782 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5783 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5784 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5785 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5786 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5787 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5788 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5789 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5790 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5791 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5792 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5793 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5794 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5795 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5796 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5797 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5798 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5799 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5800 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5801 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5802 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5803 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5804 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5805 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5806 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5807 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5808 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5809 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5810 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5813 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5814 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5815 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5816 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5817 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5818 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5819 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5820 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5821 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5822 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5823 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5824 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5825 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5826 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5827 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5828 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5829 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5830 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5831 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5832 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5833 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5834 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5835 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5836 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5837 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5838 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5839 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5840 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5841 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5842 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5843 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5844 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5847 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5848 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5849 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5850 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5851 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5852 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5853 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5854 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5855 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5856 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5857 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5858 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5859 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5860 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5861 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5862 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5863 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5864 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5865 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5866 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5867 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5868 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5869 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5870 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5871 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5872 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5873 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5874 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5875 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5876 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5877 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5878 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5881 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5882 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5883 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5884 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5885 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5886 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5887 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5888 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5889 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5890 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5891 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5892 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5893 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5894 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5895 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5896 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5897 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5898 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5899 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5900 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5901 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5902 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5903 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5904 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5905 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5906 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5907 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5908 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5909 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5910 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5911 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5912 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5915 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5916 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5917 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5918 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5919 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5920 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5921 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5922 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5923 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5924 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5925 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5926 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5927 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5928 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5929 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5930 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5931 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5932 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5933 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5934 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5935 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5936 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5937 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5938 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5939 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5940 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5941 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5942 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5943 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5944 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5945 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5946 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5949 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5950 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5951 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5952 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5953 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5954 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5955 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5956 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5957 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5958 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5959 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5960 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5961 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5962 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5963 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5964 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5965 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5966 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5967 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5968 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5969 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5970 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5971 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5972 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5973 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5974 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5975 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5976 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5977 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5978 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5979 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5980 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5983 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5984 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5985 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5986 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5987 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5988 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5989 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5990 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5991 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5992 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5993 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5994 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5995 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5996 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5997 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5998 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5999 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6000 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6001 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6002 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6003 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6004 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6005 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6006 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6007 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6008 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6009 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6010 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6011 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6012 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6013 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6014 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6017 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6018 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6019 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6020 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6021 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6022 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6023 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6024 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6025 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6026 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6027 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6028 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6029 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6030 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6031 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6032 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6033 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6034 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6035 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6036 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6037 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6038 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6039 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6040 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6041 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6042 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6043 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6044 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6045 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6046 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6047 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6048 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6051 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6052 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6053 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6054 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6055 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6056 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6057 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6058 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6059 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6060 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6061 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6062 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6063 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6064 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6065 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6066 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6067 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6068 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6069 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6070 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6071 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6072 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6073 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6074 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6075 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6076 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6077 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6078 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6079 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6080 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6081 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6082 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6085 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6086 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6087 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6088 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6089 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6090 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6091 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6092 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6093 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6094 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6095 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6096 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6097 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6098 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6099 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6100 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6101 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6102 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6103 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6104 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6105 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6106 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6107 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6108 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6109 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6110 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6111 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6112 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6113 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6114 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6115 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6116 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6119 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6120 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6121 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6122 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6123 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6124 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6125 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6126 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6127 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6128 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6129 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6130 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6131 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6132 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6133 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6134 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6135 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6136 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6137 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6138 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6139 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6140 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6141 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6142 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6143 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6144 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6145 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6146 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6147 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6148 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6149 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6150 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6153 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6154 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6155 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6156 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6157 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6158 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6159 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6160 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6161 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6162 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6163 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6164 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6165 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6166 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6167 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6168 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6169 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6170 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6171 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6172 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6173 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6174 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6175 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6176 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6177 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6178 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6179 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6180 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6181 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6182 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6183 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6184 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6187 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6188 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6189 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6190 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6191 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6192 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6193 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6194 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6195 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6196 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6197 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6198 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6199 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6200 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6201 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6202 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6203 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6204 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6205 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6206 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6207 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6208 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6209 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6210 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6211 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6212 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6213 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6214 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6215 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6216 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6217 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6218 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6221 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6222 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6223 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6224 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6225 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6226 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6227 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6228 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6229 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6230 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6231 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6232 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6233 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6234 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6235 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6236 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6237 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6238 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6239 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6240 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6241 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6242 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6243 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6244 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6245 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6246 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6247 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6248 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6249 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6250 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6251 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6252 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6255 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6256 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6257 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6258 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6259 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6260 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6261 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6262 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6263 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6264 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6265 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6266 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6267 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6268 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6269 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6270 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6271 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6272 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6273 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6274 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6275 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6276 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6277 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6278 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6279 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6280 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6281 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6282 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6283 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6284 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6285 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6286 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6289 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6290 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6291 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6292 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6293 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6294 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6295 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6296 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6297 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6298 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6299 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6300 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6301 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6302 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6303 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6304 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6305 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6306 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6307 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6308 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6309 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6310 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6311 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6312 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6313 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6314 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6315 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6316 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6317 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6318 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6319 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6320 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6323 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6324 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6325 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6326 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6327 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6328 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6329 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6330 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6331 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6332 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6333 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6334 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6335 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6336 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6337 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6338 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6339 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6340 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6341 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6342 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6343 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6344 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6345 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6346 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6347 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6348 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6349 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6350 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6351 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6352 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6353 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6354 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6357 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6358 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6359 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6360 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6361 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6362 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6363 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6364 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6365 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6366 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6367 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6368 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6369 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6370 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6371 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6372 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6373 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6374 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6375 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6376 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6377 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6378 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6379 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6380 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6381 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6382 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6383 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6384 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6385 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6386 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6387 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6388 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6391 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6392 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6393 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6394 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6395 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6396 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6397 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6398 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6399 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6400 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6401 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6402 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6403 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6404 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6405 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6406 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6407 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6408 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6409 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6410 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6411 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6412 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6413 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6414 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6415 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6416 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6417 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6418 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6419 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6420 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6421 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6422 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6425 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6426 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6427 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6428 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6429 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6430 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6431 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6432 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6433 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6434 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6435 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6436 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6437 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6438 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6439 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6440 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6441 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6442 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6443 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6444 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6445 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6446 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6447 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6448 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6449 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6450 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6451 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6452 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6453 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6454 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6455 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6456 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6459 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6460 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6461 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6462 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6463 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6464 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6465 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6466 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6467 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6468 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6469 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6470 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6471 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6472 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6473 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6474 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6475 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6476 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6477 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6478 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6479 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6480 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6481 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6482 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6483 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6484 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6485 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6486 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6487 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6488 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6489 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6490 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6493 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6494 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6495 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6496 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6497 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6498 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6499 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6500 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6501 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6502 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6503 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6504 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6505 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6506 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6507 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6508 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6509 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6510 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6511 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6512 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6513 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6514 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6515 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6516 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6517 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6518 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6519 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6520 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6521 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6522 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6523 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6524 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6527 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6528 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6529 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6530 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6531 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6532 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6533 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6534 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6535 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6536 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6537 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6538 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6539 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6540 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6541 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6542 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6543 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6544 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6545 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6546 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6547 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6548 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6549 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6550 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6551 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6552 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6553 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6554 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6555 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6556 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6557 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6558 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6567 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

6568 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

6569 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

6571 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

6572 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

6573 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

6574 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

6576 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

6577 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

6578 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

6579 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

6580 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

6581 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

6582 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

6583 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

6584 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

6585 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

6588 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

6589 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

6590 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

6591 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

6592 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

6593 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

6596 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

6597 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

6598 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

6599 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

6600 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

6601 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

6602 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

6603 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

6606 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

6609 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

6612 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

6615 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

6618 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

6620 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

6621 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

6622 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

6624 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

6626 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

6627 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

6628 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

6630 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

6632 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

6633 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

6634 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

6636 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

6637 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

6640 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

6641 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

6642 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

6651 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6652 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6653 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6654 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6655 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6656 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6657 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6658 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6659 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6660 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6661 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6662 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6663 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6664 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6667 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6668 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6669 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6670 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6671 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6672 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6673 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6675 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6676 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6677 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6678 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6679 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6682 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6683 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6685 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6686 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6687 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6688 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6689 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6690 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6691 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6692 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6693 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6694 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6696 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6699 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6700 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6703 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6706 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6707 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6708 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6709 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6710 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6711 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6712 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6713 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6714 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6715 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6716 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6717 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6718 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6719 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6722 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6723 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6724 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6725 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6726 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6727 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6728 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6729 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6732 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6733 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6734 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6737 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6746 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

6747 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

6748 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

6749 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

6750 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

6751 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

6752 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

6753 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

6754 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

6755 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

6758 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

6761 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

6762 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

6765 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

6766 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

6767 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

6768 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

6769 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

6770 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

6771 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

6772 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

6773 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

6774 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

6775 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

6776 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

6777 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

6778 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

6781 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

6782 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

6783 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

6784 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

6785 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

6786 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

6787 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

6789 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

6790 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

6791 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

6793 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

6796 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

6797 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

6798 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

6799 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

6800 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

6801 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

6802 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

6803 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

6804 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

6805 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

6806 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

6809 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

6810 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

6811 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

6812 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

6813 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

6814 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

6815 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

6816 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

6817 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

6819 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

6828 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

6830 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

6831 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

6832 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

6833 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

6834 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

6835 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

6836 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

6837 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

6838 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

6839 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

6840 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

6841 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

6842 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

6843 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

6844 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

6845 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

6846 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

6849 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

6850 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

6851 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

6852 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

6854 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

6855 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

6856 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

6858 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

6859 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

6860 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

6861 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

6862 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

6863 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

6864 
	#DBGMCU_CR_DBG_CAN_STOP
 ((
uöt32_t
)0x00004000Ë

	)

6865 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

6866 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

6867 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00020000Ë

	)

6868 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00040000Ë

	)

6869 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00080000Ë

	)

6870 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00100000Ë

	)

6879 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

6880 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

6881 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

6882 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

6884 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

6885 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

6886 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

6889 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6892 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6895 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

6896 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

6897 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

6898 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

6901 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

6902 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

6903 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

6904 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

6905 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

6906 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

6907 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

6908 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

6909 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

6910 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

6913 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6916 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

6917 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

6919 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

6920 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

6921 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

6922 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

6923 
	#FLASH_OBR_NŸu£d
 ((
uöt16_t
)0x03E0Ë

	)

6926 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6931 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

6932 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

6935 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

6936 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

6939 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

6940 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

6943 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

6944 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

6947 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

6948 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

6951 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

6952 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

6955 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

6956 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

6959 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

6960 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

6970 #ifde‡
USE_STDPERIPH_DRIVER


6971 
	~"°m32f10x_c⁄f.h
"

6978 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

6980 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

6982 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

6984 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

6986 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

6988 
	#READ_REG
(
REG
Ë((REG))

	)

6990 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~CLEARMASK)Ë| (SETMASK)))

	)

	@ChillerMonitorRev2.0/USER/inc/STM32FW/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

27 
	~"°m32f10x_adc.h
"

33 
	~"°m32f10x_dma.h
"

35 
	~"°m32f10x_Êash.h
"

37 
	~"°m32f10x_gpio.h
"

41 
	~"°m32f10x_rcc.h
"

45 
	~"°m32f10x_tim.h
"

48 
	~"misc.h
"

49 
	~"°m32f10x_ô.h
"

57 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@ChillerMonitorRev2.0/USER/inc/Tempra_AD.h

1 #i‚de‡
__TEMPERA_AD_H


2 
	#__TEMPERA_AD_H


	)

4 
	~"°m32f10x.h
"

7 
	#D_VÆueN
 2

8 
	#D_Tem≥øN
 1

9 

	)

10 
	#ADC1_Cou¡
 100

11 
	#ADC_Ch™√lCou¡
 6

12 
	#SmoŸhNum
 10

13 
	#VÆueC‹ª˘i⁄
 30

14 

	)

16 
	#ADC_CONTROL
 
GPIOC


17 
	#ADC_ClK
 
RCC_APB2Pîùh_GPIOC


18 

	)

21 
	#H_Tem¥a1
 
GPIO_Pö_0


22 
	#H_Tem¥a2
 
GPIO_Pö_1


23 
	#L_Tem¥a1
 
GPIO_Pö_2


24 
	#L_Tem¥a2
 
GPIO_Pö_3


25 
	#ENV_Tem¥a1
 
GPIO_Pö_4


26 
	#ENV_Tem¥a2
 
GPIO_Pö_5


27 

	)

28 
	#ADC_Pö
 
H_Tem¥a1
|
H_Tem¥a2
|
L_Tem¥a1
|
L_Tem¥a2
|
ENV_Tem¥a1
|
ENV_Tem¥a2


29 

	)

30 
vu16
 
ADGëVÆue
[
ADC1_Cou¡
][
ADC_Ch™√lCou¡
];

31 
vu16
 
ADC_Fûãr
[
ADC_Ch™√lCou¡
];

32 
u32
 
TM⁄ô‹Dis
[3];

33 
u32
 
TM⁄ô‹
[3];

34 
Tem≥øEº‹
[3];

35 
Tem≥øEº‹Dis
[3];

37 
u32
 
ADC_SmoŸhCou¡
[
ADC_Ch™√lCou¡
];

38 
TÊag
;

40 
ADC1_GPIO_C⁄fig
();

41 
ADC1_Mode_C⁄fig
();

42 
DMA_C⁄fig
();

43 
ADC1_Inô
();

44 
ADC1_Tem≥ø
();

45 
A¡i‰ìzePro
();

46 
Tem≥øPro
();

	@ChillerMonitorRev2.0/USER/inc/flash.h

1 #i‚de‡ 
__Êash_H__


2 
	#__Êash_H__


	)

4 
C⁄fig_D©a
[];

5 
St‹eSysPøma
();

6 
GëSysPøma
();

	@ChillerMonitorRev2.0/USER/inc/inc/ChillerFWincs.h

16 #i‚de‡ 
__ChûÀrFWöcs_H__


17 
	#__ChûÀrFWöcs_H__


	)

32 
	~"°m32f10x.h
"

46 
	~"J12864.h
"

47 
	~"Dñay_Timî.h
"

49 
	~"Timî.h
"

52 
	~"STM32Fœsh.h
"

	@ChillerMonitorRev2.0/USER/inc/inc/Delay_Timer.h

1 #i‚de‡
__DELAY_TIMER_H


2 
	#__DELAY_TIMER_H


	)

4 
	#DWT_CR
 *(vﬁ©ûê*)0xE0001000

	)

5 
	#DWT_CYCCNT
 *(vﬁ©ûê*)0xE0001004

	)

6 
	#DEM_CR
 *(vﬁ©ûê*)0xE000EDFC

	)

7 
	#DBGMCU_CR
 *(vﬁ©ûê*)0xE0042004

	)

8 
	#DEM_CR_TRCENA
 (1 << 24)

	)

9 
	#DWT_CR_CYCCNTENA
 (1 << 0)

	)

11 
	#Dñayms
(
m£c
Ë
	`Dñayus
(m£c*1000Ë

	)

13 
	g˝u˛k„q
;

14 
DñayInô
(
˛k
);

15 
Dñayus
(
u£c
);

	@ChillerMonitorRev2.0/USER/inc/inc/J12864.h

11 #i‚de‡
__J12864_H


12 
	#__J12864_H


	)

14 
	~"°m32f10x.h
"

17 
	#LCD_CONTROL
 
GPIOB


18 
	#LCD_DATAPORT
 
GPIOB


19 

	)

20 
	#LCD_RESET_Pö
 
GPIO_Pö_0


21 
	#LCD_RS_Pö
 
GPIO_Pö_5


22 
	#LCD_RW_Pö
 
GPIO_Pö_6


23 
	#LCD_EN_Pö
 
GPIO_Pö_7


24 
	#LCD_BF_Pö
 15

25 

	)

26 
	#LCD_CONTROL_CLOCK
 
RCC_APB2Pîùh_GPIOB


27 
	#LCD_DATAPORT_CLOCK
 
RCC_APB2Pîùh_GPIOB


28 

	)

29 
	#LCD_RS_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_RS_Pö
;LCD_CONTROL->BSRR |=LCD_RS_Pin

30 
	#LCD_RS_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_RS_Pö
;LCD_CONTROL->BRR |=LCD_RS_Pin

31 
	#LCD_RW_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_RW_Pö
;LCD_CONTROL->BSRR |=LCD_RW_Pin

32 
	#LCD_RW_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_RW_Pö
;LCD_CONTROL->BRR |=LCD_RW_Pin

33 
	#LCD_EN_1
 
LCD_CONTROL
->
BSRR
 &=~
LCD_EN_Pö
;LCD_CONTROL->BSRR |=LCD_EN_Pin

34 
	#LCD_EN_0
 
LCD_CONTROL
->
BRR
 &=~
LCD_EN_Pö
;LCD_CONTROL->BRR |=LCD_EN_Pin

35 

	)

36 
	#LCD_RESET_0
 
LCD_CONTROL
->
BRR
 = 
LCD_RESET_Pö


37 
	#LCD_RESET_1
 
LCD_CONTROL
->
BSRR
 = 
LCD_RESET_Pö


38 
	#DATAOUT
 
LCD_DATAPORT
->
ODR
 &=0x00ff;LCD_DATAPORT->ODR

39 
	#DATAIN
 
LCD_DATAPORT
->
IDR


40 
	#LCD_BF
 ((
DATAIN
)& 0x8000)

41 

	)

42 
	#LCD_BF_IN
 
LCD_DATAPORT
->
CRH
 &~(3<<(14<<1));LCD_DATAPORT->CRH &~(3<<(
LCD_BF_Pö
<<1))

43 

	)

44 
	#LCD_BF_OUT
 
LCD_DATAPORT
->
CRH
 |(3<<(14<<1));LCD_DATAPORT->CRH |(0<<(
LCD_BF_Pö
<<1))

45 

	)

47 
LCD_WrôeInôCmd
(
uöt16_t
 
öôcmd
);

48 
LCD_WaôLaisuª
();

49 
LCD_WrôeCmd
(
uöt16_t
 
cmd
);

50 
LCD_WrôeByã
(
uöt16_t
 
byã
);

51 
LCD_pos
(
uöt16_t
 
pos
);

52 
LCD_Sëpos
(
uöt16_t
 
row
,uöt16_à
cﬁ
);

53 
LCD_Di•Ch¨
(
ch
);

54 
LCD_Sëpos_Di•Ch¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
ch
);

55 
LCD_Di•Såög
(
°r
[]);

56 
LCD_Sëpos_Di•Såög
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
°r
[]);

57 
LCD_Di•num
(
uöt32_t
 
num
);

58 
LCD_Sëpos_Di•num
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
);

59 
LCD_Di•DecimÆ
(
uöt32_t
 
num
,
uöt16_t
 
dŸ
);

60 
LCD_Sëpos_Di•DecimÆ
(
uöt16_t
 
row
,uöt16_à
cﬁ
,
uöt32_t
 
num
,uöt16_à
dŸ
);

61 
LCD_Di•D©eTime
(
uöt32_t
 
yór
,
uöt16_t
 
m⁄th
,uöt16_à
day
,uöt16_à
hour
,uöt16_à
mö
,uöt16_à
£c
);

62 
LCD_Di•Pi˘uª
(c⁄° 
pi˘uª
[]);

63 
LCD_Shi·Le·
();

64 
LCD_Shi·Right
();

65 
LCD_CÀ¨
();

66 
LCD_Rëu∫
();

67 
LCD_Clo£
();

68 
LCD_O≥n
();

69 
LCD_FlickîCh¨
(
uöt16_t
 
row
,uöt16_à
cﬁ
);

70 
LCD_Clo£Flickî
();

71 
LCD_FlickîS¸ìn
();

72 
LCD_PORT_Inô
();

73 
LCD_Inô
();

	@ChillerMonitorRev2.0/USER/inc/inc/STM32Flash.h

2 #i‚de‡
__STM32FLASH_H


3 
	#__STM32FLASH_H


	)

4 
	~"°m32f10x.h
"

6 
	#STM32_FLASH_SIZE
 256

7 
	#STM32_FLASH_WREN
 1

8 
	#STM32_FLASH_BASE
 0x08000000

9 
	#STM_SECTOR_SIZE
 2048

	)

12 
u16
 
STMFLASH_BUF
[
STM_SECTOR_SIZE
/2];

15 
u16
 
STMFLASH_RódHÆfW‹d
(
u32
 
Áddr
);

16 
STMFLASH_WrôeLíByã
(
u32
 
WrôeAddr
,u32 
D©aToWrôe
,
u16
 
Lí
);

17 
u32
 
STMFLASH_RódLíByã
(u32 
RódAddr
,
u16
 
Lí
);

18 
STMFLASH_Wrôe
(
u32
 
WrôeAddr
,
u16
 *
pBuf„r
,u16 
NumToWrôe
);

19 
STMFLASH_Ród
(
u32
 
RódAddr
,
u16
 *
pBuf„r
,u16 
NumToRód
);

	@ChillerMonitorRev2.0/USER/inc/inc/Timer.h

1 #i‚de‡
__TIMER_H


2 
	#__TIMER_H


	)

4 
	~"°m32f10x.h
"

8 
	#TIM2_ARR
 ( 7200 - 1 )

9 
	#TIM2_PSC
 ( ( ( 72000000 / 10 ) / ( 
TIM2_ARR
 + 1 ) ) - 1 )

10 

	)

11 
	#START_TIME
 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , 
ENABLE
);
	`TIM_Cmd
(
TIM2
, ENABLE)

	)

12 
	#STOP_TIME
 
	`TIM_Cmd
(
TIM2
, 
DISABLE
);
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
 , DISABLE)

	)

14 
NVIC_C⁄figuøti⁄
();

15 
TIM2_C⁄figuøti⁄
();

16 
TIM1_Mode_C⁄fig
();

	@ChillerMonitorRev2.0/USER/inc/key.h

1 #i‚de‡
__KEY_H


2 
	#__KEY_H


	)

4 
	~"°m32f10x.h
"

10 
	#KEY_ON
 0

	)

11 
	#KEY_OFF
 1

	)

16 
	#Key_£t
 
GPIO_Pö_12


17 
	#Key_up
 
GPIO_Pö_11


18 
	#Key_down
 
GPIO_Pö_10


19 
	#Key_OnOf
 
GPIO_Pö_2


20 

	)

24 
	mModñ_Êag
;

25 
	mSë_Êag
;

26 
	mUp_Êag
;

27 
	mDown_Êag
;

28 
	mMíuSñe˘
;

29 
	mModñ_cou¡
;

30 
	mMíuSëFœg
;

31 
	mDubÀKeyÊag
;

32 }
	tKey_Ty≥def
;

39 
	mLowW
;

40 
	mHighW
;

41 }
	tDVÆue_Ty≥def
;

44 
Key_Ty≥def
 
Key
;

45 
Tem≥øSë
[6];

46 
Key_GPIO_C⁄fig
();

47 
u8
 
Key_Sˇn
(
GPIO_Ty≥Def
* 
GPIOx
,
u16
 
GPIO_Pö
);

48 
Së_Pro
();

49 
Key_Pro˚ss
();

	@ChillerMonitorRev2.0/USER/src/Display.c

11 
	~"In˛ude.h
"

14 
	gOldMíu
=10;

15 
	gA¡i‰ìzeFœg
;

16 
	gAœrmSaveÊag
=0;

19 *
	g≤uŒ
[1]={" "};

21 *
	gp˘æ
[3]={" ÷∂Ø","◊‘∂Ø","Õ‚øÿ"};

22 *
	gpW¨nög
[]={"µÁ‘¥œ‡–Ú“Ï≥£","—πÀıª˙π˝‘ÿ","“∫Œªπ˝µÕ","∏ﬂŒ¬ÀÆ¡˜¡ø“Ï≥£","µÕŒ¬ÀÆ¡˜¡ø“Ï≥£",\

31 
Míu_Ty≥def
 
	gCH_SëupMíuIãms
[
MíuNum
] =

33 {" "," œËΩ›“«∆˜ "," Œ™ƒ˙∑˛ŒÒ "," ",
NULL
},

34 {"’˝‘⁄Ω¯––∑¿∂≥¥¶¿Ì","«Îµ»¥˝ ","µÕŒ¬ÀÆ: 2°Ê","ª∑æ≥Œ¬∂»£∫ 2°Ê",
NULL
},

35 {" ±æª˙œ÷Œ™: ","  ÷∂Ø≤Ÿ◊˜ƒ£ Ω "," µ»¥˝∞¥º¸≤Ÿ◊˜ "," ",
NULL
},

36 {" ±æª˙œ÷Œ™: "," ◊‘∂Ø≤Ÿ◊˜ƒ£ Ω "," 30√Î∫Û ","◊‘∂Ø∆Ù∂Ø¿‰ÀÆª˙ ",
NULL
},

37 {" ±æª˙œ÷Œ™: "," Õ‚øÿ≤Ÿ◊˜ƒ£ Ω "," µ»¥˝Õ‚øÿ–≈∫≈ "," ",
NULL
},

38 {"ª∑æ≥Œ¬∂»: 24°Ê","µÕŒ¬ÀÆ: 22°Ê","∏ﬂŒ¬ÀÆ: 28°Ê"," ÷∂Øƒ£ Ω’˝≥£‘À––",
E¡îN‹mÆDis
},

39 {" π§◊˜ƒ£ Ω…Ë÷√ ","—°‘Ò: ƒ£ Ω ","∞¥ º¸…Ë÷√ƒ£ Ω "," ",
E¡îModñSëtög
},

40 {"µÕŒ¬ÀÆ Œ¬∂»…Ë÷√","‘§…ËŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

41 {"∏ﬂŒ¬ÀÆ Œ¬∂»…Ë÷√","‘§…ËŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

42 {"œ¬œﬁ±®æØŒ¬∂»…Ë÷√","‘§…ËŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

43 {"…œœﬁ±®æØŒ¬∂»…Ë÷√","‘§…ËŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

44 {"µÕŒ¬ÀÆ∂‘±»Œ¬∂»≤Ó","≤Ó÷µŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

45 {"∏ﬂŒ¬ÀÆ∂‘±»Œ¬∂»≤Ó","≤Ó÷µŒ¬∂»£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» "," ",
E¡îTem≥øSëtög
},

49 {"µÕŒ¬ÀÆŒ¬∂»–£’˝÷µ","–£’˝Œ¬∂»£∫ °Ê","–£’˝≤Œ ˝£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» ",
E¡îTem≥øSëtög
},

50 {"∏ﬂŒ¬ÀÆŒ¬∂»–£’˝÷µ","–£’˝Œ¬∂»£∫ °Ê","–£’˝≤Œ ˝£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» ",
E¡îTem≥øSëtög
},

51 {"ª∑æ≥Œ¬∂»–£’˝÷µ ","–£’˝Œ¬∂»£∫ °Ê","–£’˝≤Œ ˝£∫ °Ê","∞¥ º¸…Ë÷√Œ¬∂» ",
E¡îTem≥øSëtög
}

60 
	$E¡îN‹mÆDis
(){

61 
	`LCD_Sëpos_Di•Såög
(4,1,
p˘æ
[
Key
.
Modñ_cou¡
-1]);

62 
	`LCD_Sëpos_Di•DecimÆ
(2,6,
TM⁄ô‹Dis
[0],1);

63 if(
TM⁄ô‹Dis
[0]<10)

65 
	`LCD_WrôeByã
(0x20);

66 
	`LCD_WrôeByã
(0x20);

68 if(
TM⁄ô‹Dis
[0]<100)

69 
	`LCD_WrôeByã
(0x20);

70 
	`LCD_Sëpos_Di•DecimÆ
(3,6,
TM⁄ô‹Dis
[1],1);

71 if(
TM⁄ô‹Dis
[1]<10)

73 
	`LCD_WrôeByã
(0x20);

74 
	`LCD_WrôeByã
(0x20);

76 if(
TM⁄ô‹Dis
[1]<100)

77 
	`LCD_WrôeByã
(0x20);

78 
	`LCD_Sëpos_Di•DecimÆ
(1,6,
TM⁄ô‹Dis
[2],1);

79 if(
TM⁄ô‹Dis
[2]<10)

81 
	`LCD_WrôeByã
(0x20);

82 
	`LCD_WrôeByã
(0x20);

84 if(
TM⁄ô‹Dis
[2]<100)

85 
	`LCD_WrôeByã
(0x20);

87 
	}
}

93 
	$E¡îModñSëtög
(){

94 
	`LCD_Sëpos_Di•Såög
(2,4,
p˘æ
[
Key
.
Modñ_cou¡
-1]);

95 
	`LCD_Sëpos
(3,2);

96 
	`LCD_WrôeByã
(0x1e);

97 
	`LCD_WrôeByã
(0x1f);

98 
	}
}

105 
	$E¡îTem≥øSëtög
()

107 if(
Key
.
MíuSñe˘
>=(
MíuNum
-3))

109 
	`LCD_Sëpos_Di•DecimÆ
(2,6,
TM⁄ô‹
[
Key
.
MíuSñe˘
-(
MíuNum
-3)],1);

110 
	`LCD_Sëpos_Di•DecimÆ
(3,6,
Tem≥øEº‹Dis
[
Key
.
MíuSñe˘
-(
MíuNum
-3)],1);

111 
	`LCD_Sëpos
(4,2);

112 
	`LCD_WrôeByã
(0x1e);

113 
	`LCD_WrôeByã
(0x1f);

117 
	`LCD_Sëpos_Di•DecimÆ
(2,6,
Tem≥øSë
[
Key
.
MíuSñe˘
-7],1);

118 
	`LCD_Sëpos
(3,2);

119 
	`LCD_WrôeByã
(0x1e);

120 
	`LCD_WrôeByã
(0x1f);

123 
	}
}

130 
	$AœrmDis
(){

131 if(
Aœrm
.
Êag
>0)

133 
	`LCD_CÀ¨
();

134 
ChûÀr
.
AœrmOUT_ON
=1;

135 
ChûÀr
.
AœrmOUT_OFF
=0;

136 if(
Aœrm
.
Powîpha£
==1)

137 
	`LCD_Sëpos_Di•Såög
(2,1,*
pW¨nög
);

138 if(
Aœrm
.
Com¥ess‹
==1)

139 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+1));

140 if(
Aœrm
.
Levñ
==1)

141 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+2));

142 if(
Aœrm
.
HighW©îFlow
==1)

143 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+3));

144 if(
Aœrm
.
LowW©îFlow
==1)

145 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+4));

146 if(
Aœrm
.
Pumphigh
==1)

147 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+5));

148 if(
Aœrm
.
Pum∂ow
==1)

149 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+6));

153 if(
Aœrm
.
Envú⁄
==1)

154 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+7));

155 if(
Aœrm
.
UµîW©îSë
==1)

156 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+8));

157 if(
Aœrm
.
LowîW©îSë
==1)

158 
	`LCD_Sëpos_Di•Såög
(2,1,*(
pW¨nög
+9));

160 
	}
}

168 
	$DisLogo
()

170 
Míu_Ty≥def
 *
pMíu
;

171 
pMíu
=
CH_SëupMíuIãms
;

172 
	`LCD_Sëpos_Di•Såög
(1,1,
pMíu
->
pText1
);

173 
	`LCD_Sëpos_Di•Såög
(2,1,
pMíu
->
pText2
);

174 
	`LCD_Sëpos_Di•Såög
(3,1,
pMíu
->
pText3
);

175 
	`LCD_Sëpos_Di•Såög
(4,1,
pMíu
->
pText4
);

176 
	}
}

183 
	$WaôO≥øti⁄
()

185 
Míu_Ty≥def
 *
pvMíu
;

186 
w‹k°¨t
;

187 
w‹k°¨t
=0;

188 if(
Aœrm
.
Êag
==0)

190 if(
C⁄fig_D©a
[0]==1)

192 
pvMíu
=(
CH_SëupMíuIãms
+2);

193 
w‹k°¨t
=1;

194 if((
Key
.
MíuSëFœg
==2)||(Key.MenuSetFlag==0))

196 
	`LCD_Sëpos_Di•Såög
(1,1,
pvMíu
->
pText1
);

197 
	`LCD_Sëpos_Di•Såög
(2,1,
pvMíu
->
pText2
);

198 
	`LCD_Sëpos_Di•Såög
(3,1,
pvMíu
->
pText3
);

199 
	`LCD_Sëpos_Di•Såög
(4,1,
pvMíu
->
pText4
);

201 (
Key
.
MíuSëFœg
==2)||(Key.MenuSetFlag==0))

206 
Key
.
Modñ_Êag
=0;

207 
Key
.
Së_Êag
=0;

208 
Key
.
Up_Êag
=0;

209 
Key
.
Down_Êag
=0;

210 
Key
.
MíuSñe˘
=0;

211 
OldMíu
=10;

212 
	`Key_Pro˚ss
();

213 
	`PîifSt›
();

216 if(
C⁄fig_D©a
[0]==2)

218 
pvMíu
=(
CH_SëupMíuIãms
+3);

219 
w‹k°¨t
=1;

220 if((
Key
.
MíuSëFœg
==2)||(Key.MenuSetFlag==0))

222 
	`LCD_Sëpos_Di•Såög
(1,1,
pvMíu
->
pText1
);

223 
	`LCD_Sëpos_Di•Såög
(2,1,
pvMíu
->
pText2
);

224 
	`LCD_Sëpos_Di•Såög
(3,1,
pvMíu
->
pText3
);

225 
	`LCD_Sëpos_Di•Såög
(4,1,
pvMíu
->
pText4
);

226 
AutoTime
=0;

227 
AutoTime
<100)

229 
	`LCD_Sëpos_Di•num
(3,3,(10-(
AutoTime
/10)));

230 if(
AutoTime
>10)

231 
	`LCD_WrôeByã
(0x20);

232 
	`PîifSt›
();

236 
Key
.
Modñ_Êag
=0;

237 
Key
.
Së_Êag
=0;

238 
Key
.
Up_Êag
=0;

239 
Key
.
Down_Êag
=0;

240 
Key
.
MíuSñe˘
=0;

241 
OldMíu
=10;

245 if(
C⁄fig_D©a
[0]==3)

247 
pvMíu
=(
CH_SëupMíuIãms
+4);

248 
w‹k°¨t
=1;

249 if((
Key
.
MíuSëFœg
==2)||(Key.MenuSetFlag==0))

251 
	`LCD_Sëpos_Di•Såög
(1,1,
pvMíu
->
pText1
);

252 
	`LCD_Sëpos_Di•Såög
(2,1,
pvMíu
->
pText2
);

253 
	`LCD_Sëpos_Di•Såög
(3,1,
pvMíu
->
pText3
);

254 
	`LCD_Sëpos_Di•Såög
(4,1,
pvMíu
->
pText4
);

255 
	`PîifSt›
();

259 
Key
.
Modñ_Êag
=0;

260 
Key
.
Së_Êag
=0;

261 
Key
.
Up_Êag
=0;

262 
Key
.
Down_Êag
=0;

263 
Key
.
MíuSñe˘
=0;

264 
OldMíu
=10;

265 
	`GPIO_RódI≈utD©aBô
(
GPIOA
,
ExCå_IN
Ë=
Bô_SET
)

270 if(
w‹k°¨t
==1)

272 
w‹k°¨t
=0;

273 
Key
.
MíuSñe˘
=5;

274 
Key
.
MíuSëFœg
=1;

278 
ChûÀr
.
Pump_OFF
=0;

279 
ChûÀr
.
Pump_ON
=1;

280 
ChûÀr
.
VÆve_ON
=0;

281 
ChûÀr
.
VÆve_OFF
=1;

282 
ChûÀr
.
Com¥ess‹_ON
=0;

283 
ChûÀr
.
Com¥ess‹_OFF
=1;

284 
ChûÀr
.
ElBow_ON
=0;

285 
ChûÀr
.
ElBow_OFF
=1;

286 
ChûÀr
.
AœrmOUT_ON
=0;

287 
ChûÀr
.
AœrmOUT_OFF
=1;

288 
	`GëSysPøma
();

291 
	}
}

298 
	$A¡i‰ìzeDis
()

300 
Míu_Ty≥def
 *
pMíu
;

301 
pMíu
=(
CH_SëupMíuIãms
+1);

302 if(
A¡i‰ìzeFœg
==0)

304 
A¡i‰ìzeFœg
=1;

305 
	`LCD_Sëpos_Di•Såög
(1,1,
pMíu
->
pText1
);

306 
	`LCD_Sëpos_Di•Såög
(2,1,
pMíu
->
pText2
);

307 
	`LCD_Sëpos_Di•Såög
(3,1,
pMíu
->
pText3
);

308 
	`LCD_Sëpos_Di•Såög
(4,1,
pMíu
->
pText4
);

310 
	`LCD_Sëpos_Di•DecimÆ
(3,6,
TM⁄ô‹Dis
[1],1);

311 if(
TM⁄ô‹Dis
[1]<10)

313 
	`LCD_WrôeByã
(0x20);

314 
	`LCD_WrôeByã
(0x20);

316 if(
TM⁄ô‹Dis
[1]<100)

317 
	`LCD_WrôeByã
(0x20);

318 
	`LCD_Sëpos_Di•DecimÆ
(3,6,
TM⁄ô‹Dis
[2],1);

319 if(
TM⁄ô‹Dis
[2]<10)

321 
	`LCD_WrôeByã
(0x20);

322 
	`LCD_WrôeByã
(0x20);

324 if(
TM⁄ô‹Dis
[2]<100)

325 
	`LCD_WrôeByã
(0x20);

326 
	}
}

334 
	$Dis_Míu
(
MíuDis
)

336 
Míu_Ty≥def
 *
pCuºítMíu
;

337 
pCuºítMíu
=(
CH_SëupMíuIãms
+
MíuDis
);

338 if(
Aœrm
.
Êag
==0)

340 if(
AœrmSaveÊag
==1)

342 
AœrmSaveÊag
=0;

343 
ChûÀr
=
SaveChûÀrN‹mÆP¨a
;

344 
ChûÀr
.
AœrmOUT_ON
=0;

345 
ChûÀr
.
AœrmOUT_OFF
=1;

347 if(
Key
.
MíuSëFœg
==1)

349 if(
MíuDis
!=
OldMíu
)

351 
OldMíu
=
MíuDis
;

352 
	`LCD_Sëpos_Di•Såög
(1,1,
pCuºítMíu
->
pText1
);

353 
	`LCD_Sëpos_Di•Såög
(2,1,
pCuºítMíu
->
pText2
);

354 
	`LCD_Sëpos_Di•Såög
(3,1,
pCuºítMíu
->
pText3
);

355 
	`LCD_Sëpos_Di•Såög
(4,1,
pCuºítMíu
->
pText4
);

357 (*
pCuºítMíu
->
pMíuFunc
)();

359 if((
Key
.
MíuSëFœg
==2)||(Key.MenuSetFlag==0))

361 
	`WaôO≥øti⁄
();

364 if(
Aœrm
.
Êag
>0)

366 
	`AœrmDis
();

367 
AœrmSaveÊag
=1;

370 
	}
}

	@ChillerMonitorRev2.0/USER/src/IO_Process.c

1 
	~"In˛ude.h
"

4 
Aœrm_Ty≥def
 
	gAœrm
={0,0,0,0,0,0,0,0,1,0,0,0};

5 
Pîif_Ty≥def
 
	gChûÀr
={0,0,0,0,0,0,0,0,0,0,0,0,0,0};

6 
Pîif_Ty≥def
 
	gSaveChûÀrN‹mÆP¨a
={0,0,0,0,0,0,0,0,0,0,0,0,0,0};

7 
u8
 
	gCom¥ess‹DñayFœg
 =0;

14 
	$IOputC⁄fig
()

17 
GPIO_InôTy≥Def
 
InP‹t_L
,
InP‹t_H
,
OutP‹t
;

18 
	`RCC_APB2PîùhClockCmd
(
InPöCål_Clk
 ,
ENABLE
);

19 
InP‹t_L
.
GPIO_Pö
 = 
InPö_L
;

20 
InP‹t_L
.
GPIO_S≥ed

GPIO_S≥ed_50MHz
;

21 
InP‹t_L
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

22 
	`GPIO_Inô
(
InPöCål_L
,&
InP‹t_L
);

24 
InP‹t_H
.
GPIO_Pö
 = 
InPö_H
|
ExCå_IN
;

25 
InP‹t_H
.
GPIO_S≥ed

GPIO_S≥ed_50MHz
;

26 
InP‹t_H
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

27 
	`GPIO_Inô
(
InPöCål_H
,&
InP‹t_H
);

30 
	`RCC_APB2PîùhClockCmd
(
OutPöCål_Clk
 ,
ENABLE
);

31 
OutP‹t
.
GPIO_Pö
 = 
OutPö
;

32 
OutP‹t
.
GPIO_S≥ed

GPIO_S≥ed_50MHz
;

34 
OutP‹t
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

35 
	`GPIO_Inô
(
OutPöCål
,&
OutP‹t
);

36 
	}
}

42 
	$PîifSt›
()

44 
OutPöCål
->
BSRR
 = 
OutPö
;

45 
	}
}

51 
	$PîifSèπ
()

53 
OutPöCål
->
BRR
 = 
OutPö
;

54 
	}
}

61 
	$I≈utM⁄ô‹
(){

62 if(((
	`GPIO_RódI≈utD©a
(
InPöCål_H
)&(
InPö_H
))==0)&& \

63 ((
	`GPIO_RódI≈utD©a
(
InPöCål_L
)&(
InPö_L
))==0)&& \

64 ((
Aœrm
.
Envú⁄
+Aœrm.
LowîW©îSë
+Aœrm.
UµîW©îSë
)==0))

67 
	`Dñayms
(200);

68 if(((
	`GPIO_RódI≈utD©a
(
InPöCål_H
)&(
InPö_H
))==0)&& \

69 ((
	`GPIO_RódI≈utD©a
(
InPöCål_L
)&(
InPö_L
))==0)&& \

70 ((
Aœrm
.
Envú⁄
+Aœrm.
LowîW©îSë
+Aœrm.
UµîW©îSë
)==0))

72 
Aœrm
.
Êag
=0;

74 
Aœrm
.
Powîpha£
=0;

75 
Aœrm
.
Com¥ess‹
=0;

76 
Aœrm
.
Levñ
=0;

77 
Aœrm
.
HighW©îFlow
=0;

78 
Aœrm
.
LowW©îFlow
=0;

79 
Aœrm
.
Pumphigh
=0;

80 
Aœrm
.
Pum∂ow
=0;

81 if(
Aœrm
.
Recovî
==0)

83 
Aœrm
.
Recovî
=1;

84 
OldMíu
=10;

92 
	`Dñayms
(200);

93 if(((
	`GPIO_RódI≈utD©a
(
InPöCål_H
)&(
InPö_H
))!=0)|| \

94 ((
	`GPIO_RódI≈utD©a
(
InPöCål_L
)&(
InPö_L
))!=0)|| \

95 ((
Aœrm
.
Envú⁄
+Aœrm.
LowîW©îSë
+Aœrm.
UµîW©îSë
)!=0))

97 
Aœrm
.
Êag
=1;

98 
Aœrm
.
Recovî
=0;

99 if(
AœrmSaveÊag
==0)

101 
AœrmSaveÊag
=1;

102 
SaveChûÀrN‹mÆP¨a
=
ChûÀr
;

104 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_L
,
Powîpha£_IN
Ë=
Bô_SET
){

106 
Aœrm
.
Powîpha£
=1;

108 
ChûÀr
.
Pump_OFF
=1;

109 
ChûÀr
.
Pump_ON
=0;

110 
ChûÀr
.
VÆve_OFF
=1;

111 
ChûÀr
.
VÆve_ON
=0;

112 
ChûÀr
.
Com¥ess‹_OFF
=1;

113 
ChûÀr
.
Com¥ess‹_ON
=0;

114 
ChûÀr
.
ElBow_OFF
=1;

115 
ChûÀr
.
ElBow_ON
=0;

118 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_L
,
Com¥ess‹_IN
Ë=
Bô_SET
){

119 
Aœrm
.
Com¥ess‹
=1;

121 
ChûÀr
.
Com¥ess‹_OFF
=1;

122 
ChûÀr
.
Com¥ess‹_ON
=0;

123 
Aœrm
.
Powîpha£
=0;

126 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_L
,
Levñ_IN
Ë=
Bô_SET
){

127 
Aœrm
.
Levñ
=1;

129 
ChûÀr
.
Pump_OFF
=1;

130 
ChûÀr
.
Pump_ON
=0;

131 
ChûÀr
.
Com¥ess‹_OFF
=1;

132 
ChûÀr
.
Com¥ess‹_ON
=0;

133 
Aœrm
.
Com¥ess‹
=0;

136 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_L
,
HighW©î_IN
Ë=
Bô_SET
){

137 
Aœrm
.
HighW©îFlow
=1;

139 
ChûÀr
.
Pump_OFF
=0;

140 
ChûÀr
.
Pump_ON
=1;

141 
ChûÀr
.
Com¥ess‹_OFF
=1;

142 
ChûÀr
.
Com¥ess‹_ON
=0;

143 
Aœrm
.
Levñ
=0;

146 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_H
,
LowW©î_IN
Ë=
Bô_SET
){

147 
Aœrm
.
LowW©îFlow
=1;

149 
ChûÀr
.
Pump_OFF
=0;

150 
ChûÀr
.
Pump_ON
=1;

151 
ChûÀr
.
Com¥ess‹_OFF
=1;

152 
ChûÀr
.
Com¥ess‹_ON
=0;

153 
Aœrm
.
HighW©îFlow
=0;

156 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_H
,
Pumphigh_IN
Ë=
Bô_SET
){

157 
Aœrm
.
Pumphigh
=1;

159 
ChûÀr
.
Pump_OFF
=1;

160 
ChûÀr
.
Pump_ON
=0;

161 
Aœrm
.
LowW©îFlow
=0;

164 if(
	`GPIO_RódI≈utD©aBô
(
InPöCål_H
,
Pum∂ow_IN
Ë=
Bô_SET
){

165 
Aœrm
.
Pum∂ow
=1;

167 
ChûÀr
.
Pump_OFF
=1;

168 
ChûÀr
.
Pump_ON
=0;

169 
ChûÀr
.
Com¥ess‹_OFF
=1;

170 
ChûÀr
.
Com¥ess‹_ON
=0;

171 
Aœrm
.
Pumphigh
=0;

175 
Aœrm
.
Powîpha£
=0;

176 
Aœrm
.
Com¥ess‹
=0;

177 
Aœrm
.
Levñ
=0;

178 
Aœrm
.
HighW©îFlow
=0;

179 
Aœrm
.
LowW©îFlow
=0;

180 
Aœrm
.
Pumphigh
=0;

181 
Aœrm
.
Pum∂ow
=0;

185 
	}
}

191 
	$OutPro
(){

192 
	`I≈utM⁄ô‹
();

196 if(
ChûÀr
.
Com¥ess‹_OFF
==1)

198 if(
Com¥ess‹DñayFœg
==0)

200 
Com¥ess‹TimeCou¡
=0;

202 
Com¥ess‹DñayFœg
=1;

204 if(
ChûÀr
.
Com¥ess‹_ON
==1)

206 
Com¥ess‹DñayFœg
=0;

207 if(
Com¥ess‹TimeCou¡
<
Com¥ess‹DñayTime
)

209 
ChûÀr
.
Com¥ess‹_ON
=0;

211 if(
Com¥ess‹TimeCou¡
>=
Com¥ess‹DñayTime
)

213 
ChûÀr
.
Com¥ess‹_ON
=1;

217 
OutPöCål
->
BRR
=((
ChûÀr
.
Pump_ON
<<4)|(ChûÀr.
VÆve_ON
<<5)|(ChûÀr.
Com¥ess‹_ON
<<6)|(ChûÀr.
ElBow_ON
<<7)| \

218 (
ChûÀr
.
AœrmOUT_OFF
<<8)|(ChûÀr.
O±iˇlcou∂î1_ON
<<9)|(ChûÀr.
O±iˇlcou∂î2_ON
<<10));

219 
OutPöCål
->
BSRR
=((
ChûÀr
.
Pump_OFF
<<4)|(ChûÀr.
VÆve_OFF
<<5)|(ChûÀr.
Com¥ess‹_OFF
<<6)|(ChûÀr.
ElBow_OFF
<<7)| \

220 (
ChûÀr
.
AœrmOUT_ON
<<8)|(ChûÀr.
O±iˇlcou∂î1_OFF
<<9)|(ChûÀr.
O±iˇlcou∂î2_OFF
<<10));

221 
	}
}

	@ChillerMonitorRev2.0/USER/src/Tempra_AD.c

10 
	~"In˛ude.h
"

12 
	#ADC1_DR_Addªss
 ((
u32
)0x4001244C)

13 

	)

16 
vu16
 
	gADGëVÆue
[
ADC1_Cou¡
][
ADC_Ch™√lCou¡
];

17 
vu16
 
	gﬁdVÆue
[
ADC1_Cou¡
][
ADC_Ch™√lCou¡
];

18 
vu16
 
	gADC_Fûãr
[
ADC_Ch™√lCou¡
];

19 
u32
 
	gTM⁄ô‹
[3]={0};

20 
u32
 
	gTM⁄ô‹Dis
[3]={0};

21 
u32
 
	gADC_SmoŸhCou¡
[
ADC_Ch™√lCou¡
];

22 
u32
 
	gADC_SmoŸhFûãr
[
ADC_Ch™√lCou¡
][
SmoŸhNum
]={0};

23 
u32
 
	gSmŸh_Num
[
ADC_Ch™√lCou¡
]={0};

24 
	gTÊag
=0;

25 
	gTem≥øEº‹
[3]={0};

26 
	gTem≥øEº‹Dis
[3]={100,100,100};

33 
	$ADC1_GPIO_C⁄fig
()

35 
GPIO_InôTy≥Def
 
ADC_PORT
;

36 
	`RCC_APB2PîùhClockCmd
(
ADC_ClK
, 
ENABLE
);

37 
ADC_PORT
.
GPIO_Pö
 = 
ADC_Pö
;

38 
ADC_PORT
.
GPIO_Mode
 = 
GPIO_Mode_AIN
;

39 
	`GPIO_Inô
(
ADC_CONTROL
, &
ADC_PORT
);

40 
	}
}

46 
	$ADC1_Mode_C⁄fig
()

48 
ADC_InôTy≥Def
 
ADC_InôSåu˘uª
;

49 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

51 
ADC_InôSåu˘uª
.
ADC_Mode
 = 
ADC_Mode_Indïídít
;

52 
ADC_InôSåu˘uª
.
ADC_SˇnC⁄vMode
 = 
ENABLE
;

53 
ADC_InôSåu˘uª
.
ADC_C⁄töuousC⁄vMode
 = 
ENABLE
;

54 
ADC_InôSåu˘uª
.
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

55 
ADC_InôSåu˘uª
.
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

56 
ADC_InôSåu˘uª
.
ADC_NbrOfCh™√l
 = 
ADC_Ch™√lCou¡
;

57 
	`ADC_Inô
(
ADC1
, &
ADC_InôSåu˘uª
);

60 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_10
, 1, 
ADC_Sam∂eTime_55Cy˛es5
);

62 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_11
, 2, 
ADC_Sam∂eTime_55Cy˛es5
);

64 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_12
, 3, 
ADC_Sam∂eTime_55Cy˛es5
);

66 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_13
, 4, 
ADC_Sam∂eTime_55Cy˛es5
);

68 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_14
, 5, 
ADC_Sam∂eTime_55Cy˛es5
);

70 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_15
, 6, 
ADC_Sam∂eTime_55Cy˛es5
);

73 
	`ADC_DMACmd
(
ADC1
, 
ENABLE
);

75 
	`ADC_Exã∫ÆTrigC⁄vCmd
(
ADC1
,
ENABLE
);

77 
	`ADC_Cmd
(
ADC1
, 
ENABLE
);

80 
	`ADC_Re£tCÆibøti⁄
(
ADC1
);

82 
	`ADC_GëRe£tCÆibøti⁄Sètus
(
ADC1
));

85 
	`ADC_SèπCÆibøti⁄
(
ADC1
);

87 
	`ADC_GëCÆibøti⁄Sètus
(
ADC1
));

90 
	`ADC_So·w¨eSèπC⁄vCmd
(
ADC1
, 
ENABLE
);

92 
	}
}

98 
	$DMA_C⁄fig
()

100 
DMA_InôTy≥Def
 
DMA_InôSåu˘uª
;

101 
	`RCC_AHBPîùhClockCmd
(
RCC_AHBPîùh_DMA1
, 
ENABLE
);

103 
	`DMA_DeInô
(
DMA1_Ch™√l1
);

104 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = 
ADC1_DR_Addªss
;

105 
DMA_InôSåu˘uª
.
DMA_Mem‹yBa£Addr
 = (
u32
)&
ADGëVÆue
;

106 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

107 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
ADC_Ch™√lCou¡
* 
ADC1_Cou¡
);

108 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

109 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

110 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_HÆfW‹d
;

111 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_HÆfW‹d
;

112 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_Cúcuœr
;

113 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

114 
DMA_InôSåu˘uª
.
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

115 
	`DMA_Inô
(
DMA1_Ch™√l1
, &
DMA_InôSåu˘uª
);

118 
	`DMA_Cmd
(
DMA1_Ch™√l1
, 
ENABLE
);

120 
	}
}

127 
	$ADC1_Inô
()

129 
	`ADC1_GPIO_C⁄fig
();

130 
	`ADC1_Mode_C⁄fig
();

131 
	`DMA_C⁄fig
();

132 
	`TIM1_Mode_C⁄fig
();

133 
	}
}

140 
	$ADC1_Tem≥ø
()

142 
u32
 
i
,
k
,
m
,
n
;

143 
u32
 
VÆueCou¡
;

144 
i
=0;i<
ADC_Ch™√lCou¡
;i++)

149 
VÆueCou¡
=0;

150 
k
=0;k<
ADC1_Cou¡
;k++)

152 if(((
ADGëVÆue
[
k
][
i
]-
ﬁdVÆue
[k][i])>
VÆueC‹ª˘i⁄
)||((oldValue[k][i]-ADGetValue[k][i])>ValueCorrection))

154 
ﬁdVÆue
[
k
][
i
]=
ADGëVÆue
[k][i];

156 
VÆueCou¡
+=
ﬁdVÆue
[
k
][
i
];

157 
ADC_Fûãr
[
i
]=(
VÆueCou¡
/
ADC1_Cou¡
);

159 if(
TÊag
==0)

161 
n
=0;n<
SmoŸhNum
;n++)

163 
ADC_SmoŸhFûãr
[
i
][
n
]=
ADC_Fûãr
[i];

165 
ADC_SmoŸhCou¡
[
i
]=
ADC_Fûãr
[i];

170 if(
TÊag
==1)

172 
ADC_SmoŸhFûãr
[
i
][
SmŸh_Num
[i]]=
ADC_Fûãr
[i];

173 
SmŸh_Num
[
i
]++;

174 if(
SmŸh_Num
[
i
]==
SmoŸhNum
)

175 
SmŸh_Num
[
i
]=0;

176 
n
=0;n<
SmoŸhNum
;n++)

178 
ADC_SmoŸhCou¡
[
i
] +
ADC_SmoŸhFûãr
[i][
n
];

180 
ADC_SmoŸhCou¡
[
i
]=(ADC_SmoŸhCou¡[i]/
SmoŸhNum
);

187 if(
Key
.
MíuSñe˘
==5)

189 
ADC_SmoŸhCou¡
[1]=0x05C0;

190 
ADC_SmoŸhCou¡
[3]=0x05BC;

191 
ADC_SmoŸhCou¡
[5]=0x05BD;

193 
m
=0;m<3;m++)

195 
TM⁄ô‹
[
m
]=(((2361*
ADC_SmoŸhCou¡
[2*m])/(ADC_SmoŸhCou¡[2*m+1])-2597)+
Tem≥øEº‹
[m]);

200 if(
TM⁄ô‹
[
m
]>=(
Tem≥øSë
[3]+5))

202 
TM⁄ô‹
[
m
]=(
Tem≥øSë
[3]+5);

204 if(
TM⁄ô‹
[
m
]<=15)

206 
TM⁄ô‹
[
m
]=15;

208 if(
TÊag
==0)

209 
TM⁄ô‹Dis
[
m
]=
TM⁄ô‹
[m];

213 if((
TM⁄ô‹Dis
[
m
]<(
TM⁄ô‹
[m]-2))||(TMonitorDis[m]>(TMonitor[m]+2)))

218 if(
TM⁄ô‹Dis
[
m
]<(
TM⁄ô‹
[m]-1))

219 
TM⁄ô‹Dis
[
m
] += 1;

220 if(
TM⁄ô‹Dis
[
m
]>(
TM⁄ô‹
[m]+1))

221 
TM⁄ô‹Dis
[
m
] -= 1;

224 
TÊag
=1;

225 
	}
}

232 
	$A¡i‰ìzePro
()

234 
	`ADC1_Tem≥ø
();

239 if(
TM⁄ô‹Dis
[2]<100)

241 
TM⁄ô‹Dis
[0]<100)

243 
	`ADC1_Tem≥ø
();

244 if(
TM⁄ô‹Dis
[0]<=20)

247 
ChûÀr
.
ElBow_ON
=1;

248 
ChûÀr
.
ElBow_OFF
=0;

250 if(
TM⁄ô‹Dis
[0]>50)

253 
ChûÀr
.
ElBow_ON
=1;

254 
ChûÀr
.
ElBow_OFF
=0;

256 
ChûÀr
.
Pump_ON
=1;

257 
ChûÀr
.
Pump_OFF
=0;

259 
	`A¡i‰ìzeDis
();

260 
	`OutPro
();

262 if(
TM⁄ô‹Dis
[0]>=100)

265 
ChûÀr
.
ElBow_ON
=0;

266 
ChûÀr
.
ElBow_OFF
=1;

268 
ChûÀr
.
Pump_ON
=0;

269 
ChûÀr
.
Pump_OFF
=1;

270 
	`OutPro
();

273 
	}
}

280 
	$Tem≥øPro
()

286 if(
TM⁄ô‹Dis
[0]>=100)

292 if((
TM⁄ô‹Dis
[0]>(
Tem≥øSë
[3]))||(TMonitorDis[1]>(TemperaSet[3])))

295 
Aœrm
.
UµîW©îSë
=1;

296 
Aœrm
.
Êag
=1;

297 if(
AœrmSaveÊag
==0)

299 
AœrmSaveÊag
=1;

300 
SaveChûÀrN‹mÆP¨a
=
ChûÀr
;

302 
ChûÀr
.
Pump_OFF
=1;

303 
ChûÀr
.
Pump_ON
=0;

306 
Aœrm
.
UµîW©îSë
=0;

307 if((
TM⁄ô‹Dis
[0]<(
Tem≥øSë
[2]))||(TMonitorDis[1]<(TemperaSet[2])))

310 
Aœrm
.
LowîW©îSë
=1;

311 
Aœrm
.
Êag
=1;

312 if(
AœrmSaveÊag
==0)

314 
AœrmSaveÊag
=1;

315 
SaveChûÀrN‹mÆP¨a
=
ChûÀr
;

317 
ChûÀr
.
Pump_OFF
=1;

318 
ChûÀr
.
Pump_ON
=0;

321 
Aœrm
.
LowîW©îSë
=0;

322 if((
TM⁄ô‹Dis
[2]<30)||(TM⁄ô‹Dis[2]>
Tem≥øSë
[3]))

325 
Aœrm
.
Envú⁄
=1;

326 
Aœrm
.
Êag
=1;

327 if(
AœrmSaveÊag
==0)

329 
AœrmSaveÊag
=1;

330 
SaveChûÀrN‹mÆP¨a
=
ChûÀr
;

332 
ChûÀr
.
Pump_OFF
=1;

333 
ChûÀr
.
Pump_ON
=0;

336 
Aœrm
.
Envú⁄
=0;

341 if(
TM⁄ô‹Dis
[0]>(
Tem≥øSë
[0]-(TemperaSet[4]/2)))

344 
ChûÀr
.
ElBow_ON
=0;

345 
ChûÀr
.
ElBow_OFF
=1;

346 if(
TM⁄ô‹Dis
[0]>(
Tem≥øSë
[0]+(TemperaSet[4]/2)))

349 
ChûÀr
.
Com¥ess‹_ON
=1;

350 
ChûÀr
.
Com¥ess‹_OFF
=0;

355 if(
TM⁄ô‹Dis
[0]<(
Tem≥øSë
[0]-(TemperaSet[4]/2)))

358 
ChûÀr
.
Com¥ess‹_ON
=0;

359 
ChûÀr
.
Com¥ess‹_OFF
=1;

360 if(
TM⁄ô‹Dis
[0]<(
Tem≥øSë
[0]-(TemperaSet[4]/2)-20))

363 
ChûÀr
.
ElBow_ON
=1;

364 
ChûÀr
.
ElBow_OFF
=0;

371 if((
TM⁄ô‹Dis
[0]>(TMonitorDis[1]+20))|| \

372 (
TM⁄ô‹Dis
[1]>(
Tem≥øSë
[1]+(TemperaSet[5]/2))))

375 
ChûÀr
.
VÆve_ON
=1;

376 
ChûÀr
.
VÆve_OFF
=0;

382 if((
TM⁄ô‹Dis
[0]<(TMonitorDis[1]+10))&& \

383 (
TM⁄ô‹Dis
[1]<(
Tem≥øSë
[1]-(TemperaSet[5]/2))))

386 
ChûÀr
.
VÆve_ON
=0;

387 
ChûÀr
.
VÆve_OFF
=1;

390 
	}
}

	@ChillerMonitorRev2.0/USER/src/flash.c

1 
	~"In˛ude.h
"

3 
	gC⁄fig_D©a
[] = {1,0,220,280,100,450,20,20,0,0,0,100,100,100};

5 
	#SIZE
 (
C⁄fig_D©a
)

6 

	)

7 
	#FLASH_SAVE_ADDR
 0x0803f800

8 

	)

14 
	$St‹eSysPøma
()

19 
C⁄fig_D©a
[0]=()
Key
.
Modñ_cou¡
;

20 
C⁄fig_D©a
[2]=
Tem≥øSë
[0];

21 
C⁄fig_D©a
[3]=
Tem≥øSë
[1];

22 
C⁄fig_D©a
[4]=
Tem≥øSë
[2];

23 
C⁄fig_D©a
[5]=
Tem≥øSë
[3];

24 
C⁄fig_D©a
[6]=
Tem≥øSë
[4];

25 
C⁄fig_D©a
[7]=
Tem≥øSë
[5];

29 
C⁄fig_D©a
[8]=
Tem≥øEº‹
[0];

30 
C⁄fig_D©a
[9]=
Tem≥øEº‹
[1];

31 
C⁄fig_D©a
[10]=
Tem≥øEº‹
[2];

32 
C⁄fig_D©a
[11]=
Tem≥øEº‹Dis
[0];

33 
C⁄fig_D©a
[12]=
Tem≥øEº‹Dis
[1];

34 
C⁄fig_D©a
[13]=
Tem≥øEº‹Dis
[2];

35 
	`STMFLASH_Wrôe
(
FLASH_SAVE_ADDR
,(
u16
*)
C⁄fig_D©a
,
SIZE
);

36 
	}
}

44 
	$GëSysPøma
()

46 
	`STMFLASH_Ród
(
FLASH_SAVE_ADDR
,(
u16
*)
C⁄fig_D©a
,
SIZE
);

47 
Key
.
Modñ_cou¡
=()
C⁄fig_D©a
[0];

51 
Tem≥øSë
[0]=
C⁄fig_D©a
[2];

52 
Tem≥øSë
[1]=
C⁄fig_D©a
[3];

53 
Tem≥øSë
[2]=
C⁄fig_D©a
[4];

54 
Tem≥øSë
[3]=
C⁄fig_D©a
[5];

55 
Tem≥øSë
[4]=
C⁄fig_D©a
[6];

56 
Tem≥øSë
[5]=
C⁄fig_D©a
[7];

60 
Tem≥øEº‹
[0]=
C⁄fig_D©a
[8];

61 
Tem≥øEº‹
[1]=
C⁄fig_D©a
[9];

62 
Tem≥øEº‹
[2]=
C⁄fig_D©a
[10];

63 
Tem≥øEº‹Dis
[0]=
C⁄fig_D©a
[11];

64 
Tem≥øEº‹Dis
[1]=
C⁄fig_D©a
[12];

65 
Tem≥øEº‹Dis
[2]=
C⁄fig_D©a
[13];

66 
	}
}

	@ChillerMonitorRev2.0/USER/src/key.c

11 
	~"In˛ude.h
"

14 
Key_Ty≥def
 
	gKey
={0,0,0,0,0,1,0,0};

15 
	gTem≥øSë
[6]={220,280,100,450,20,20};

16 
	#L⁄gTime
 20

17 

	)

24 
	$Key_GPIO_C⁄fig
()

26 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
,
OnOf
;

27 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOC
,
ENABLE
);

28 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = (
Key_£t
|
Key_up
|
Key_down
);

29 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

30 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

31 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

33 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOD
,
ENABLE
);

34 
OnOf
.
GPIO_Pö
 = 
Key_OnOf
;

35 
OnOf
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

36 
OnOf
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

37 
	`GPIO_Inô
(
GPIOD
, &
OnOf
);

38 
	}
}

44 
u8
 
	$Key_Sˇn
(
GPIO_Ty≥Def
* 
GPIOx
,
u16
 
GPIO_Pö
)

46 
uöt16_t
 
Key_judge
;

47 
L⁄gTimeFœg
=0;

48 
SëFœg
=0;

49 
UpFœg
=0;

50 
DownFœg
=0;

51 
DubÀKeyFœg
=0;

53 if((
	`GPIO_RódI≈utD©a
(
GPIOx
)&(
GPIO_Pö
))!=(GPIO_Pin))

56 
	`Dñayms
(200);

57 if((
	`GPIO_RódI≈utD©a
(
GPIOx
)&(
GPIO_Pö
))!=(GPIO_Pin))

59 
Key_judge
=(
	`GPIO_RódI≈utD©a
(
GPIOx
)&(
GPIO_Pö
));

60 
Key_judge
)

63 (
Key_up
|
Key_down
):

64 
Key
.
Së_Êag
=1;

65 
Key
.
Up_Êag
=0;

66 
Key
.
Down_Êag
=0;

67 
DubÀKeyFœg
=0;

70 (
Key_£t
|
Key_down
):

71 
Key
.
Së_Êag
=0;

72 
Key
.
Up_Êag
=1;

73 
Key
.
Down_Êag
=0;

74 
DubÀKeyFœg
=0;

77 (
Key_£t
|
Key_up
):

78 
Key
.
Së_Êag
=0;

79 
Key
.
Up_Êag
=0;

80 
Key
.
Down_Êag
=1;

81 
DubÀKeyFœg
=0;

83 (
Key_£t
):

84 
Key
.
Së_Êag
=0;

85 
Key
.
Up_Êag
=0;

86 
Key
.
Down_Êag
=0;

87 
DubÀKeyFœg
=1;

90 
Key
.
Së_Êag
=0;

91 
Key
.
Up_Êag
=0;

92 
Key
.
Down_Êag
=0;

93 
Key
.
DubÀKeyÊag
=0;

94 
DubÀKeyFœg
=0;

97 if((
Key
.
Së_Êag
==1)||(Key.
Up_Êag
==1)||(Key.
Down_Êag
==1)||(
DubÀKeyFœg
==1))

99 
SëFœg
=
Key
.
Së_Êag
;

100 
UpFœg
=
Key
.
Up_Êag
;

101 
DownFœg
=
Key
.
Down_Êag
;

103 
L⁄gTimeFœg
=0;

104 
L⁄gKeyTime
=0;

107 (
	`GPIO_RódI≈utD©a
(
GPIOx
)&(
GPIO_Pö
))!=(GPIO_Pin))

112 if((
SëFœg
==1)||(
UpFœg
==1)||(
DownFœg
==1)||(
DubÀKeyFœg
==1))

114 if(
L⁄gKeyTime
>=
L⁄gTime
)

116 
L⁄gTimeFœg
=1;

117 
L⁄gKeyTime
=0;

118 
Key
.
Modñ_Êag
 +=(
SëFœg
+
DubÀKeyFœg
);

119 if((
Key
.
Modñ_Êag
==1)&&(
DubÀKeyFœg
==1))

121 
Key
.
MíuSñe˘
=13;

122 
Key
.
DubÀKeyÊag
=1;

124 if(
Key
.
Modñ_Êag
>=2)

126 
Key
.
Modñ_Êag
=0;

127 
Key
.
MíuSñe˘
=5;

128 
Key
.
DubÀKeyÊag
=0;

130 
SëFœg
=0;

131 
DubÀKeyFœg
=0;

133 if((
L⁄gTimeFœg
==1)&&(
Fa°AddTime
>=1))

135 
Key
.
Up_Êag
=
UpFœg
;

136 
Key
.
Down_Êag
=
DownFœg
;

137 
Fa°AddTime
=0;

140 
	`Së_Pro
();

141 
	`Dis_Míu
(
Key
.
MíuSñe˘
);

143  
KEY_ON
;

146  
KEY_OFF
;

149  
KEY_OFF
;

150 
	}
}

156 
	$Së_Pro
()

158 
i
=0;

159 *
±em≥r
=
Tem≥øSë
;

160 *
±
=
Tem≥øEº‹
;

161 if(
Key
.
Modñ_Êag
==1)

163 if(
Key
.
Së_Êag
==1)

165 
Key
.
Së_Êag
=0;

166 
Key
.
MíuSñe˘
++;

167 if(
Key
.
DubÀKeyÊag
==1)

169 if(
Key
.
MíuSñe˘
>=
MíuNum
)

171 
Key
.
MíuSñe˘
=(
MíuNum
-3);

176 if(
Key
.
MíuSñe˘
>=(
MíuNum
-3))

178 
Key
.
MíuSñe˘
=6;

182 if((
Key
.
Up_Êag
==1)||(Key.
Down_Êag
==1))

184 if(
Key
.
MíuSñe˘
==6)

186 
Key
.
Modñ_cou¡
 +(Key.
Up_Êag
-Key.
Down_Êag
);

187 if(
Key
.
Modñ_cou¡
>=4)

188 
Key
.
Modñ_cou¡
=1;

189 if(
Key
.
Modñ_cou¡
<=0)

190 
Key
.
Modñ_cou¡
=3;

192 if((
Key
.
MíuSñe˘
>=7)&&(Key.MíuSñe˘<(
MíuNum
-3)))

194 
i
=
Key
.
MíuSñe˘
-7;

195 *(
±em≥r
+
i
Ë+(
Key
.
Up_Êag
-Key.
Down_Êag
);

199 if(*
±em≥r
>=350)

200 *
±em≥r
=350;

201 if(*
±em≥r
<=150)

202 *
±em≥r
=150;

204 if(*(
±em≥r
+1)>=350)

205 *(
±em≥r
+1)=350;

206 if(*(
±em≥r
+1)<=150)

207 *(
±em≥r
+1)=150;

209 if(*(
±em≥r
+2)>=140)

210 *(
±em≥r
+2)=140;

211 if(*(
±em≥r
+2)<=0)

212 *(
±em≥r
+2)=0;

214 if(*(
±em≥r
+3)>=500)

215 *(
±em≥r
+3)=500;

216 if(*(
±em≥r
+3)<=410)

217 *(
±em≥r
+3)=410;

218 if(*
±em≥r
>=*(ptemper+1))

220 *(
±em≥r
+1)=*ptemper;

223 if((
Key
.
MíuSñe˘
>=(
MíuNum
-3))&&(Key.MíuSñe˘<MíuNum)&&(Key.
DubÀKeyÊag
==1))

225 
i
=
Key
.
MíuSñe˘
-(
MíuNum
-3);

226 *(
±
+
i
Ë+(
Key
.
Up_Êag
-Key.
Down_Êag
);

227 
TM⁄ô‹
[
i
]=(((2361*
ADC_SmoŸhCou¡
[2*i])/(ADC_SmoŸhCou¡[2*i+1])-2597)+
Tem≥øEº‹
[i]);

228 
TM⁄ô‹Dis
[
i
]=
TM⁄ô‹
[i];

229 
Tem≥øEº‹Dis
[
i
]=100+
Tem≥øEº‹
[i];

231 
Key
.
Up_Êag
=0;

232 
Key
.
Down_Êag
=0;

233 
	`St‹eSysPøma
();

236 
	}
}

242 
	$Key_Pro˚ss
()

244 if(
C⁄fig_D©a
[0]==3)

246 if(
	`GPIO_RódI≈utD©aBô
(
GPIOA
,
ExCå_IN
Ë=
Bô_SET
)

248 
	`Dñayms
(20);

249 if(
	`GPIO_RódI≈utD©aBô
(
GPIOA
,
ExCå_IN
Ë=
Bô_SET
)

251 
Key
.
MíuSëFœg
=2;

255 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
Key_OnOf
Ë=
KEY_ON
)

257 
	`Dñayms
(20);

258 if(
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
Key_OnOf
Ë=
KEY_ON
)

260 
Key
.
MíuSëFœg
++;

261 if(
Key
.
MíuSëFœg
==2)

263 
Aœrm
.
Êag
=0;

265 if(
Key
.
MíuSëFœg
>=3)

267 
Key
.
MíuSëFœg
=1;

270 
	`GPIO_RódI≈utD©aBô
(
GPIOD
,
Key_OnOf
Ë=
KEY_ON
);

272 if(
Key
.
MíuSëFœg
==1)

274 if–
	`Key_Sˇn
(
GPIOC
,(
Key_£t
|
Key_up
 |
Key_down
)Ë=
KEY_ON
 )

276 
	`Së_Pro
();

279 
	}
}

	@STM32F103Lib/FWlib/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt8_t
 
	mNVIC_IRQCh™√l
;

48 
uöt8_t
 
	mNVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

49 
uöt8_t
 
	mNVIC_IRQCh™√lSubPri‹ôy
;

50 
Fun˘i⁄ÆSèã
 
	mNVIC_IRQCh™√lCmd
;

51 } 
	tNVIC_InôTy≥Def
;

65 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

66 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

67 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

68 ((
	gVECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

77 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

78 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

79 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

80 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

81 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

82 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

91 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

93 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

95 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

97 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

99 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

102 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

103 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

104 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

105 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

106 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

108 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

110 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

112 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x0007FFFF)

	)

122 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

123 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

124 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

125 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

146 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

147 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

148 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

149 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

150 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

	@STM32F103Lib/FWlib/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mADC_Mode
;

48 
Fun˘i⁄ÆSèã
 
	mADC_SˇnC⁄vMode
;

49 
Fun˘i⁄ÆSèã
 
	mADC_C⁄töuousC⁄vMode
;

50 
uöt32_t
 
	mADC_Exã∫ÆTrigC⁄v
;

51 
uöt32_t
 
	mADC_D©aAlign
;

52 
uöt8_t
 
	mADC_NbrOfCh™√l
;

53 }
	tADC_InôTy≥Def
;

62 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

63 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
ADC2_BASE
) || \

64 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

66 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
ADC1_BASE
Ë|| \

	)

67 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
ADC3_BASE
))

73 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

74 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

75 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

76 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

77 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

78 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

79 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

80 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

81 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

82 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

84 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

85 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

86 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

87 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

88 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

89 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

90 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

91 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

92 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

93 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

106 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

107 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000)

	)

108 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000)

	)

109 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000)

	)

110 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000)

	)

111 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000)

	)

117 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000)

	)

118 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000)

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000)

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000)

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000)

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000)

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000)

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000)

	)

131 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

132 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

133 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

134 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

135 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

136 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

137 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

138 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

139 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

153 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

154 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

155 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

156 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

165 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

166 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

167 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

168 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

169 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

170 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

171 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

172 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

173 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

174 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

175 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

176 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

177 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

178 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

179 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

180 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

181 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

182 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

184 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

185 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

186 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

187 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

188 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

189 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

190 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

191 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

192 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

201 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

202 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

203 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

204 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

205 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

206 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

207 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

208 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

209 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

210 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

211 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

212 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

213 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

214 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

215 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

216 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

229 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000)

	)

230 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000)

	)

231 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000)

	)

232 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000)

	)

233 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000)

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000)

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000)

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000)

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000)

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000)

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000)

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000)

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000)

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

320 ((
IT
Ë=
ADC_IT_JEOC
))

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

27 
	~"°m32f10x.h
"

53 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

54 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

55 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

56 ((
	gLEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

65 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

66 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

67 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

68 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

69 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

70 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

71 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

72 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

81 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

82 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

83 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

84 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

85 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

86 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

87 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

88 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

89 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

90 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

91 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

92 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

93 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

94 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

95 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

96 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

97 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

98 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

99 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

100 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

101 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

102 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

103 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

104 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

105 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

106 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

107 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

108 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

109 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

110 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

111 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

112 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

113 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

114 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

115 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

116 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

117 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

118 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

119 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

120 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

121 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

122 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

124 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

125 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

126 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

127 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

128 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

129 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

130 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

131 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

132 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

133 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

134 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

135 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

136 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

137 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

139 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

160 
BKP_DeInô
();

161 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

162 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

163 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

164 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

165 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

166 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

167 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

168 
FœgSètus
 
BKP_GëFœgSètus
();

169 
BKP_CÀ¨Fœg
();

170 
ITSètus
 
BKP_GëITSètus
();

171 
BKP_CÀ¨ITPídögBô
();

	@STM32F103Lib/FWlib/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
CAN1_BASE
))

	)

49 
Fun˘i⁄ÆSèã
 
	mCAN_TTCM
;

50 
Fun˘i⁄ÆSèã
 
	mCAN_ABOM
;

51 
Fun˘i⁄ÆSèã
 
	mCAN_AWUM
;

52 
Fun˘i⁄ÆSèã
 
	mCAN_NART
;

53 
Fun˘i⁄ÆSèã
 
	mCAN_RFLM
;

54 
Fun˘i⁄ÆSèã
 
	mCAN_TXFP
;

55 
uöt8_t
 
	mCAN_Mode
;

56 
uöt8_t
 
	mCAN_SJW
;

57 
uöt8_t
 
	mCAN_BS1
;

58 
uöt8_t
 
	mCAN_BS2
;

59 
uöt16_t
 
	mCAN_PªsˇÀr
;

60 } 
	tCAN_InôTy≥Def
;

68 
uöt8_t
 
	mCAN_FûãrNumbî
;

69 
uöt8_t
 
	mCAN_FûãrMode
;

70 
uöt8_t
 
	mCAN_FûãrSˇÀ
;

71 
uöt16_t
 
	mCAN_FûãrIdHigh
;

72 
uöt16_t
 
	mCAN_FûãrIdLow
;

73 
uöt16_t
 
	mCAN_FûãrMaskIdHigh
;

74 
uöt16_t
 
	mCAN_FûãrMaskIdLow
;

75 
uöt16_t
 
	mCAN_FûãrFIFOAssignmít
;

76 
Fun˘i⁄ÆSèã
 
	mCAN_FûãrA˘iv©i⁄
;

77 } 
	tCAN_FûãrInôTy≥Def
;

85 
uöt32_t
 
	mStdId
;

86 
uöt32_t
 
	mExtId
;

87 
uöt8_t
 
	mIDE
;

88 
uöt8_t
 
	mRTR
;

89 
uöt8_t
 
	mDLC
;

90 
uöt8_t
 
	mD©a
[8];

91 } 
	tC™TxMsg
;

99 
uöt32_t
 
	mStdId
;

100 
uöt32_t
 
	mExtId
;

101 
uöt8_t
 
	mIDE
;

102 
uöt8_t
 
	mRTR
;

103 
uöt8_t
 
	mDLC
;

104 
uöt8_t
 
	mD©a
[8];

105 
uöt8_t
 
	mFMI
;

106 } 
	tC™RxMsg
;

120 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

121 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

131 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

132 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

133 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

134 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

136 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

137 ((
	gMODE
Ë=
CAN_Mode_Sûít
Ë|| ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

146 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

147 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

148 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

149 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

151 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

152 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

161 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

162 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

163 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

164 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

165 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

166 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

167 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

168 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

169 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

170 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

171 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

172 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

173 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

174 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

175 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

176 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

178 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

187 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

188 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

189 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

190 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

191 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

192 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

193 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

194 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

196 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

206 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

216 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

226 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

227 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

229 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

230 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

239 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

240 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

242 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

243 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

253 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

254 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

255 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

256 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

266 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

267 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

268 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

269 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

279 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

280 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

281 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

291 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

292 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

293 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

303 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

304 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

305 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

306 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

317 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

319 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

329 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

330 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

340 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

341 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

351 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

352 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

353 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

355 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

356 ((
FLAG
Ë=
CAN_FLAG_BOF
))

366 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

367 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

368 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

369 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

370 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

371 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

372 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

373 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

374 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

375 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

376 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

377 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

378 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

379 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

380 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

381 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

382 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

384 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

385 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

386 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

387 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

388 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

389 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

390 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

392 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

393 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

394 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

395 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

396 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

397 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

418 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

419 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

420 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

421 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

422 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

423 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

424 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

425 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

426 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

427 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

428 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

429 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

431 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

432 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

433 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

434 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

435 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

27 
	~"°m32f10x.h
"

65 
CRC_Re£tDR
();

66 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

67 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

68 
uöt32_t
 
CRC_GëCRC
();

69 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

70 
uöt8_t
 
CRC_GëIDRegi°î
();

	@STM32F103Lib/FWlib/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDAC_Triggî
;

48 
uöt32_t
 
	mDAC_WaveGíî©i⁄
;

49 
uöt32_t
 
	mDAC_LFSRUnmask_TrüngÀAm∂ôude
;

50 
uöt32_t
 
	mDAC_OuçutBuf„r
;

51 }
	tDAC_InôTy≥Def
;

65 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000)

	)

66 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004)

	)

67 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000C)

	)

68 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014)

	)

69 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001C)

	)

70 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024)

	)

71 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002C)

	)

72 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034)

	)

73 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003C)

	)

75 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

76 ((
	gTRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

77 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

78 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

79 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

80 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

81 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

82 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

83 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

93 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

94 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

95 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

96 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

97 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

98 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

107 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000)

	)

108 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100)

	)

109 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200)

	)

110 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300)

	)

111 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400)

	)

112 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500)

	)

113 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600)

	)

114 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700)

	)

115 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800)

	)

116 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900)

	)

117 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00)

	)

118 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00)

	)

119 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000)

	)

120 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100)

	)

121 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200)

	)

122 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300)

	)

123 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400)

	)

124 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500)

	)

125 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600)

	)

126 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700)

	)

127 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800)

	)

128 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900)

	)

129 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00)

	)

130 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00)

	)

132 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

133 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

134 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

135 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

136 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

137 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

138 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

139 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

140 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

141 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

142 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

143 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

144 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

145 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

146 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

147 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

148 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

149 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

150 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

151 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

152 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

153 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

154 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

155 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

164 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

165 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

166 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

167 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

176 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

177 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

178 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

179 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

188 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

189 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

190 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

192 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

193 ((
ALIGN
Ë=
DAC_Align_8b_R
))

202 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

203 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

204 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

205 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

214 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

235 
DAC_DeInô
();

236 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

237 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

238 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

239 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

240 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

241 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

242 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

243 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

244 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

245 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

246 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

	@STM32F103Lib/FWlib/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

27 
	~"°m32f10x.h
"

49 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

50 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

51 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

52 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

53 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

54 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

55 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

56 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

57 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

58 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

59 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

60 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

61 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

62 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

63 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

64 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

66 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFE000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

83 
uöt32_t
 
DBGMCU_GëREVID
();

84 
uöt32_t
 
DBGMCU_GëDEVID
();

85 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

	@STM32F103Lib/FWlib/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mDMA_PîùhîÆBa£Addr
;

48 
uöt32_t
 
	mDMA_Mem‹yBa£Addr
;

49 
uöt32_t
 
	mDMA_DIR
;

50 
uöt32_t
 
	mDMA_Buf„rSize
;

51 
uöt32_t
 
	mDMA_PîùhîÆInc
;

52 
uöt32_t
 
	mDMA_Mem‹yInc
;

53 
uöt32_t
 
	mDMA_PîùhîÆD©aSize
;

54 
uöt32_t
 
	mDMA_Mem‹yD©aSize
;

55 
uöt32_t
 
	mDMA_Mode
;

56 
uöt32_t
 
	mDMA_Pri‹ôy
;

57 
uöt32_t
 
	mDMA_M2M
;

58 }
	tDMA_InôTy≥Def
;

68 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
DMA1_Ch™√l1_BASE
Ë|| \

	)

69 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
DMA1_Ch™√l2_BASE
) || \

70 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l3_BASE
) || \

71 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l4_BASE
) || \

72 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l5_BASE
) || \

73 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l6_BASE
) || \

74 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA1_Ch™√l7_BASE
) || \

75 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l1_BASE
) || \

76 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
DMA2_Ch™√l5_BASE
))

85 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

86 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

87 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

88 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

97 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

98 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

99 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

100 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

109 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

110 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

111 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

112 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

121 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

122 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

123 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

124 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

125 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

126 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

135 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

136 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

137 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

138 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

139 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

140 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

149 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

150 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

151 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

160 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

161 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

162 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

163 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

164 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

165 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

166 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

167 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

176 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

177 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

188 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

189 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

190 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

191 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

197 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

198 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

199 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

200 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

201 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

202 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

203 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

204 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

205 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

206 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

207 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

208 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

209 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

210 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

211 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

212 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

213 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

214 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

215 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

216 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

217 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

218 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

219 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

220 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

221 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

222 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

223 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

224 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

230 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

231 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

232 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

233 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

234 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

235 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

236 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

237 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

238 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

239 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

240 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

241 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

242 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

243 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

244 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

245 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

246 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

247 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

248 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

249 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

251 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

253 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

254 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

255 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

256 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

257 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

258 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

259 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

260 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

261 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

262 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

263 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

264 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

265 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

266 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

267 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

268 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

269 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

270 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

271 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

272 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

273 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

274 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

275 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

276 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

290 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

293 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

294 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

295 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

296 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

297 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

298 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

299 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

300 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

301 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

302 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

303 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

304 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

305 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

306 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

307 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

308 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

309 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

310 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

311 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

312 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

313 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

314 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

315 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

316 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

317 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

323 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

324 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

325 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

326 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

327 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

328 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

329 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

330 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

331 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

332 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

333 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

334 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

335 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

336 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

337 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

338 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

339 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

340 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

341 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

342 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

344 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

346 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

347 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

348 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

349 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

350 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

351 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

352 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

353 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

354 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

355 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

356 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

360 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

361 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

362 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

363 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

364 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

365 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

366 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

367 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

368 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

378 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

400 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

401 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

402 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

403 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

405 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

406 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

407 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

408 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

409 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

27 
	~"°m32f10x.h
"

47 
	mEXTI_Mode_I¡îru±
 = 0x00,

48 
	mEXTI_Mode_Evít
 = 0x04

49 }
	tEXTIMode_Ty≥Def
;

51 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

59 
	mEXTI_Triggî_Risög
 = 0x08,

60 
	mEXTI_Triggî_FÆlög
 = 0x0C,

61 
	mEXTI_Triggî_Risög_FÆlög
 = 0x10

62 }
	tEXTITriggî_Ty≥Def
;

64 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

65 ((
	gTRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

66 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

73 
uöt32_t
 
EXTI_Löe
;

74 
EXTIMode_Ty≥Def
 
	mEXTI_Mode
;

75 
EXTITriggî_Ty≥Def
 
	mEXTI_Triggî
;

76 
Fun˘i⁄ÆSèã
 
	mEXTI_LöeCmd
;

77 }
	tEXTI_InôTy≥Def
;

91 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

92 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

93 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

94 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

95 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

96 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

97 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

98 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

99 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

100 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

101 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

102 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

103 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

104 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

105 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

106 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

107 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

109 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

111 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

115 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF80000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

117 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

118 ((
	gLINE
Ë=
EXTI_Löe2
Ë|| ((
LINE
Ë=
EXTI_Löe3
) || \

119 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

120 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

121 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

122 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

123 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

124 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

125 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

126 ((
LINE
Ë=
EXTI_Löe18
))

148 
EXTI_DeInô
();

149 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

150 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

151 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

152 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

153 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

154 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

155 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

	@STM32F103Lib/FWlib/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

27 
	~"°m32f10x.h
"

47 
	mFLASH_BUSY
 = 1,

48 
	mFLASH_ERROR_PG
,

49 
	mFLASH_ERROR_WRP
,

50 
	mFLASH_COMPLETE
,

51 
	mFLASH_TIMEOUT


52 }
	tFLASH_Sètus
;

66 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

67 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

68 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

69 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

70 ((
	gLATENCY
Ë=
FLASH_L©ícy_1
) || \

71 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

80 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

81 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

82 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

83 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

92 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

93 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

94 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

95 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

106 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

107 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

108 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

109 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

110 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

111 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

112 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

113 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

114 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

115 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

116 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

117 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

118 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

119 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

120 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

121 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

122 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

123 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

125 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

127 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

128 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

130 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

131 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

132 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

133 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

134 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

135 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

142 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

143 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

144 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

145 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

146 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

147 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

148 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

149 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

150 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

151 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

152 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

153 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

154 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

155 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

156 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

157 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

158 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

159 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

160 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

161 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

162 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

163 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

164 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

165 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

166 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

167 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

168 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

169 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

170 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

171 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

172 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

173 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

175 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

177 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x0807FFFF))

	)

179 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

189 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

190 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

191 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

201 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

202 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

203 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

213 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

214 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

215 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

225 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

226 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

227 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

237 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

238 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

239 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

240 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

241 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

243 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

244 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

245 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

246 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

268 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

269 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

270 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

271 
FLASH_U∆ock
();

272 
FLASH_Lock
();

273 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

274 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

275 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

276 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

277 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

278 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

279 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

280 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

282 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

283 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

284 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

285 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

286 
FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
);

288 
FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
);

289 
FLASH_Sètus
 
FLASH_GëSètus
();

290 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

	@STM32F103Lib/FWlib/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mFSMC_AddªssSëupTime
;

48 
uöt32_t
 
	mFSMC_AddªssHﬁdTime
;

49 
uöt32_t
 
	mFSMC_D©aSëupTime
;

50 
uöt32_t
 
	mFSMC_BusTu∫AroundDuøti⁄
;

51 
uöt32_t
 
	mFSMC_CLKDivisi⁄
;

52 
uöt32_t
 
	mFSMC_D©aL©ícy
;

53 
uöt32_t
 
	mFSMC_Ac˚ssMode
;

54 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

62 
uöt32_t
 
	mFSMC_B™k
;

63 
uöt32_t
 
	mFSMC_D©aAddªssMux
;

64 
uöt32_t
 
	mFSMC_Mem‹yTy≥
;

65 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

66 
uöt32_t
 
	mFSMC_Bur°Ac˚ssMode
;

67 
uöt32_t
 
	mFSMC_WaôSig«lPﬁ¨ôy
;

68 
uöt32_t
 
	mFSMC_WøpMode
;

69 
uöt32_t
 
	mFSMC_WaôSig«lA˘ive
;

70 
uöt32_t
 
	mFSMC_WrôeO≥øti⁄
;

71 
uöt32_t
 
	mFSMC_WaôSig«l
;

72 
uöt32_t
 
	mFSMC_ExãndedMode
;

73 
uöt32_t
 
	mFSMC_WrôeBur°
;

74 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_RódWrôeTimögSåu˘
;

75 
FSMC_NORSRAMTimögInôTy≥Def
* 
	mFSMC_WrôeTimögSåu˘
;

76 }
	tFSMC_NORSRAMInôTy≥Def
;

84 
uöt32_t
 
	mFSMC_SëupTime
;

85 
uöt32_t
 
	mFSMC_WaôSëupTime
;

86 
uöt32_t
 
	mFSMC_HﬁdSëupTime
;

87 
uöt32_t
 
	mFSMC_HiZSëupTime
;

88 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

96 
uöt32_t
 
	mFSMC_B™k
;

97 
uöt32_t
 
	mFSMC_Waô„©uª
;

98 
uöt32_t
 
	mFSMC_Mem‹yD©aWidth
;

99 
uöt32_t
 
	mFSMC_ECC
;

100 
uöt32_t
 
	mFSMC_ECCPageSize
;

101 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

102 
uöt32_t
 
	mFSMC_TARSëupTime
;

103 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

104 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

105 }
	tFSMC_NANDInôTy≥Def
;

113 
uöt32_t
 
	mFSMC_Waô„©uª
;

114 
uöt32_t
 
	mFSMC_TCLRSëupTime
;

115 
uöt32_t
 
	mFSMC_TARSëupTime
;

116 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_Comm⁄S∑˚TimögSåu˘
;

117 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_AâribuãS∑˚TimögSåu˘
;

118 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
	mFSMC_IOS∑˚TimögSåu˘
;

119 }
	tFSMC_PCCARDInôTy≥Def
;

133 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

134 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

135 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

136 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

137 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

138 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

139 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

141 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

142 ((
	gBANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

143 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

144 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

146 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

147 ((
BANK
Ë=
FSMC_B™k3_NAND
))

149 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

150 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

151 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

153 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

154 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

155 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

168 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

169 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

170 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

171 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

181 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

182 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

183 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

184 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

185 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

186 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

196 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

197 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

199 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

209 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

210 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

211 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

212 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

221 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

222 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

223 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

224 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

234 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

235 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

236 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

237 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

247 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

249 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

250 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

260 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

261 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

262 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

263 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

273 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

274 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

275 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

276 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

285 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

286 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

288 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

289 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

299 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

300 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

301 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

302 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

311 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

321 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

331 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

341 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

351 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

361 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

371 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

372 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

373 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

374 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

375 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

376 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

377 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

378 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

396 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

397 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

398 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

399 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

408 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

409 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

410 
	#IS_FSMC_DATA_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

411 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

421 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

422 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

423 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

424 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

434 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

435 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

436 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

437 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

438 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

439 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

440 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

441 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

442 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

443 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

444 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

445 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

455 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

465 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

475 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

485 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

495 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

505 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

515 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

516 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

517 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

518 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

519 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

520 ((
IT
Ë=
FSMC_IT_Levñ
) || \

521 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

530 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

531 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

532 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

533 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

534 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

535 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

536 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

537 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

539 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

565 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

566 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

567 
FSMC_PCCARDDeInô
();

568 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

569 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

570 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

571 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

572 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

573 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

574 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

578 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

579 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

581 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

582 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

583 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

27 
	~"°m32f10x.h
"

41 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
GPIOA_BASE
Ë|| \

	)

42 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
GPIOB_BASE
) || \

43 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOC_BASE
) || \

44 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOD_BASE
) || \

45 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOE_BASE
) || \

46 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOF_BASE
) || \

47 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
GPIOG_BASE
))

55 
GPIO_S≥ed_10MHz
 = 1,

56 
	mGPIO_S≥ed_2MHz
,

57 
	mGPIO_S≥ed_50MHz


58 }
	tGPIOS≥ed_Ty≥Def
;

59 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

60 ((
	gSPEED
Ë=
GPIO_S≥ed_50MHz
))

67 { 
GPIO_Mode_AIN
 = 0x0,

68 
	mGPIO_Mode_IN_FLOATING
 = 0x04,

69 
	mGPIO_Mode_IPD
 = 0x28,

70 
	mGPIO_Mode_IPU
 = 0x48,

71 
	mGPIO_Mode_Out_OD
 = 0x14,

72 
	mGPIO_Mode_Out_PP
 = 0x10,

73 
	mGPIO_Mode_AF_OD
 = 0x1C,

74 
	mGPIO_Mode_AF_PP
 = 0x18

75 }
	tGPIOMode_Ty≥Def
;

77 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

78 ((
	gMODE
Ë=
GPIO_Mode_IPD
Ë|| ((
MODE
Ë=
GPIO_Mode_IPU
) || \

79 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

80 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

88 
uöt16_t
 
GPIO_Pö
;

89 
GPIOS≥ed_Ty≥Def
 
	mGPIO_S≥ed
;

90 
GPIOMode_Ty≥Def
 
	mGPIO_Mode
;

91 }
	tGPIO_InôTy≥Def
;

98 { 
	mBô_RESET
 = 0,

99 
	mBô_SET


100 }
	tBôA˘i⁄
;

102 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

116 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

117 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

118 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

119 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

120 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

121 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

122 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

123 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

124 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

125 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

126 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

127 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

128 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

129 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

130 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

131 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

132 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

134 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

136 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

137 ((
	gPIN
Ë=
GPIO_Pö_1
) || \

138 ((
PIN
Ë=
GPIO_Pö_2
) || \

139 ((
PIN
Ë=
GPIO_Pö_3
) || \

140 ((
PIN
Ë=
GPIO_Pö_4
) || \

141 ((
PIN
Ë=
GPIO_Pö_5
) || \

142 ((
PIN
Ë=
GPIO_Pö_6
) || \

143 ((
PIN
Ë=
GPIO_Pö_7
) || \

144 ((
PIN
Ë=
GPIO_Pö_8
) || \

145 ((
PIN
Ë=
GPIO_Pö_9
) || \

146 ((
PIN
Ë=
GPIO_Pö_10
) || \

147 ((
PIN
Ë=
GPIO_Pö_11
) || \

148 ((
PIN
Ë=
GPIO_Pö_12
) || \

149 ((
PIN
Ë=
GPIO_Pö_13
) || \

150 ((
PIN
Ë=
GPIO_Pö_14
) || \

151 ((
PIN
Ë=
GPIO_Pö_15
))

161 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

162 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

163 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

164 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

165 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

166 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

167 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

168 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

169 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

170 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

171 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

172 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

173 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

174 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

175 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

176 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

177 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

179 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

180 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

181 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

182 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

183 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

184 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

185 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

187 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

188 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

189 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

190 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

191 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

192 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

193 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

194 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

195 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

196 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

197 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

198 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
)|| \

199 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
))

209 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

210 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

211 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

212 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

213 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

214 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

215 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

216 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

217 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

218 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

219 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

220 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

222 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

223 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

224 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

225 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

226 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

227 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

228 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

238 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

239 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

240 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

241 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

242 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

243 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

244 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

245 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

246 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

247 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

248 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

249 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

250 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

251 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

252 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

253 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

255 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

256 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

257 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

258 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

259 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

260 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

261 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

262 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

263 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

264 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

265 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

266 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

267 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

268 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

269 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

270 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

292 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

293 
GPIO_AFIODeInô
();

294 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

295 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

296 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

297 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

298 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

299 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

300 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

301 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

302 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

303 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

304 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

305 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

306 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

307 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

308 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

	@STM32F103Lib/FWlib/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mI2C_Mode
;

48 
uöt16_t
 
	mI2C_DutyCy˛e
;

49 
uöt16_t
 
	mI2C_OwnAddªss1
;

50 
uöt16_t
 
	mI2C_Ack
;

51 
uöt16_t
 
	mI2C_AcknowÀdgedAddªss
;

52 
uöt32_t
 
	mI2C_ClockS≥ed
;

53 }
	tI2C_InôTy≥Def
;

64 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
I2C1_BASE
Ë|| \

	)

65 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
I2C2_BASE
))

70 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

71 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

72 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

73 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

74 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

75 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

84 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000)

	)

85 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFF)

	)

86 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

87 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

96 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

97 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

98 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

108 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

109 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

110 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

111 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

120 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

121 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

122 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

123 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

132 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

133 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

134 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

135 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

136 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

137 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

138 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

139 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

140 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

141 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

142 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

143 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

144 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

145 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

146 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

147 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

148 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

149 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

158 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

159 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

160 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

161 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

170 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

171 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

172 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

173 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

182 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

183 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

184 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

185 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

194 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

195 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

196 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

197 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

198 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

199 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

200 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

201 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

202 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

203 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

204 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

205 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

206 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

207 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

209 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

211 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

212 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

213 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

214 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

215 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

216 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

217 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

230 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

231 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

232 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

233 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

234 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

235 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

236 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

242 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

243 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

244 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

245 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

246 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

247 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

248 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

249 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

250 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

251 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

252 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

253 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

254 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

255 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

257 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

259 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

260 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

261 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

262 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

263 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

264 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

265 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

266 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

267 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

268 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

269 ((
FLAG
Ë=
I2C_FLAG_SB
))

282 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

283 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

284 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

285 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

286 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

292 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

298 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

304 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

310 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

316 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

317 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

323 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

329 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

335 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

341 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

347 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

349 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

350 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

351 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

352 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

353 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

354 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

355 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

356 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

357 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

358 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

359 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

360 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

361 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

362 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

363 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

364 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

365 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

366 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

367 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

368 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

377 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

386 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

407 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

408 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

409 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

410 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

416 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

417 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

418 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

420 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

421 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

422 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

423 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

424 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

425 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

426 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

427 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

428 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

430 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

433 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

434 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

435 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

436 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

437 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

438 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

30 
vu32
 
L⁄gKeyTime
;

31 
vu32
 
Fa°AddTime
;

33 
vu32
 
MíuTime
;

34 
vu32
 
LogoTime
;

35 
vu32
 
AutoTime
;

36 
vu32
 
Com¥ess‹TimeCou¡
;

39 
	#Com¥ess‹DñayTime
 (10*120)

40 

	)

43 
NMI_H™dÀr
();

44 
H¨dFau…_H™dÀr
();

45 
MemM™age_H™dÀr
();

46 
BusFau…_H™dÀr
();

47 
UßgeFau…_H™dÀr
();

48 
SVC_H™dÀr
();

49 
DebugM⁄_H™dÀr
();

50 
PídSV_H™dÀr
();

51 
SysTick_H™dÀr
();

	@STM32F103Lib/FWlib/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

54 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

55 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

56 ((
	gACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

65 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

66 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

67 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

68 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

69 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

70 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

71 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

72 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

73 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

74 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

75 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

76 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

87 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

88 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

89 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

90 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

111 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

112 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

113 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

114 
IWDG_RñﬂdCou¡î
();

115 
IWDG_E«bÀ
();

116 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

	@STM32F103Lib/FWlib/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

27 
	~"°m32f10x.h
"

53 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

54 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

55 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

56 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

57 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

58 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

59 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

60 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

61 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

62 ((
	gLEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((
LEVEL
Ë=
PWR_PVDLevñ_2V5
)|| \

63 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

64 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

73 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

74 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

75 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

76 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

85 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

86 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

87 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

97 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

98 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

99 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

100 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

101 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

103 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

124 
PWR_DeInô
();

125 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

126 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

127 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

128 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

129 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

130 
PWR_E¡îSTANDBYMode
();

131 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

132 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

	@STM32F103Lib/FWlib/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

27 
	~"°m32f10x.h
"

43 
uöt32_t
 
	mSYSCLK_Fªquícy
;

44 
uöt32_t
 
	mHCLK_Fªquícy
;

45 
uöt32_t
 
	mPCLK1_Fªquícy
;

46 
uöt32_t
 
	mPCLK2_Fªquícy
;

47 
uöt32_t
 
	mADCCLK_Fªquícy
;

48 }
	tRCC_ClocksTy≥Def
;

62 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

63 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

64 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

65 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

66 ((
	gHSE
Ë=
RCC_HSE_By∑ss
))

76 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

77 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

78 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

79 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

80 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

81 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

90 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

91 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

92 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

93 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

94 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

95 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

96 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

97 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

98 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

99 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

100 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

101 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

102 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

103 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

104 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

105 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

106 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

107 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

108 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

109 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

110 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

111 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

112 ((
MUL
Ë=
RCC_PLLMul_16
))

121 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

122 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

123 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

124 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

125 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

126 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

135 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

136 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

137 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

138 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

139 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

140 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

141 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

142 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

143 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

144 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

145 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

146 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

147 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

148 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

157 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

158 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

159 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

160 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

161 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

162 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

163 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

164 ((
PCLK
Ë=
RCC_HCLK_Div16
))

173 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

174 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

175 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

176 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

177 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

178 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

179 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

180 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

181 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

182 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

184 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

193 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

194 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

195 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

196 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

205 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

207 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

208 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

209 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

210 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

219 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

220 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

221 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

222 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

223 ((
LSE
Ë=
RCC_LSE_By∑ss
))

232 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

233 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

235 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

236 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

237 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

246 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

247 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

248 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

249 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

250 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

251 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

252 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

253 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

262 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

263 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

264 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

265 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

266 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

267 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

268 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

269 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

270 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

271 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

272 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

273 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

274 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

275 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

276 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

277 
	#RCC_APB2Pîùh_ALL
 ((
uöt32_t
)0x0000FFFD)

	)

279 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFF0002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

288 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

289 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

290 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

291 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

292 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

293 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

294 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

295 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

296 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

297 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

298 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

299 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

300 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

301 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

302 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

303 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

304 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

305 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

306 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

307 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

308 
	#RCC_APB1Pîùh_ALL
 ((
uöt32_t
)0x3AFEC83F)

	)

310 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC50137C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

319 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

321 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

322 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

323 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

324 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

325 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

326 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

335 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

336 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

337 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

338 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

339 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

340 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

341 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

342 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

343 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

344 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

345 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

346 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

347 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

348 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

349 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

350 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

351 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

353 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

374 
RCC_DeInô
();

375 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

376 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

377 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

378 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

380 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

382 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

383 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

384 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

385 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

386 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

388 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

389 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

390 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

392 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

394 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

395 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

396 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

397 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

398 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

402 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

403 
RCC_CÀ¨Fœg
();

404 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

405 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

27 
	~"°m32f10x.h
"

53 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

54 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

55 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

56 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

57 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

58 ((
	gIT
Ë=
RTC_IT_SEC
))

67 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

68 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

69 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

70 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

71 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

72 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

73 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

74 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

75 ((
FLAG
Ë=
RTC_FLAG_SEC
))

76 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

98 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

99 
RTC_E¡îC⁄figMode
();

100 
RTC_ExôC⁄figMode
();

101 
uöt32_t
 
RTC_GëCou¡î
();

102 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

103 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

104 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

105 
uöt32_t
 
RTC_GëDividî
();

106 
RTC_WaôF‹La°Task
();

107 
RTC_WaôF‹Synchro
();

108 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

109 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

110 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

111 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

27 
	~"°m32f10x.h
"

43 
uöt8_t
 
	mSDIO_ClockDiv
;

44 
uöt32_t
 
	mSDIO_ClockEdge
;

45 
uöt32_t
 
	mSDIO_ClockBy∑ss
;

46 
uöt32_t
 
	mSDIO_ClockPowîSave
;

47 
uöt32_t
 
	mSDIO_BusWide
;

48 
uöt32_t
 
	mSDIO_H¨dw¨eFlowC⁄åﬁ
;

49 } 
	tSDIO_InôTy≥Def
;

53 
uöt32_t
 
	mSDIO_Argumít
;

54 
uöt32_t
 
	mSDIO_CmdIndex
;

55 
uöt32_t
 
	mSDIO_Re•⁄£
;

56 
uöt32_t
 
	mSDIO_Waô
;

57 
uöt32_t
 
	mSDIO_CPSM
;

58 } 
	tSDIO_CmdInôTy≥Def
;

62 
uöt32_t
 
	mSDIO_D©aTimeOut
;

63 
uöt32_t
 
	mSDIO_D©aLígth
;

64 
uöt32_t
 
	mSDIO_D©aBlockSize
;

65 
uöt32_t
 
	mSDIO_Tøns„rDú
;

66 
uöt32_t
 
	mSDIO_Tøns„rMode
;

67 
uöt32_t
 
	mSDIO_DPSM
;

68 } 
	tSDIO_D©aInôTy≥Def
;

82 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

83 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

84 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

85 ((
	gEDGE
Ë=
SDIO_ClockEdge_FÆlög
))

94 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

95 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

96 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

97 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

106 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

107 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

108 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

109 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

118 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

119 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

120 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

121 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

122 ((
WIDE
Ë=
SDIO_BusWide_8b
))

132 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

133 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

134 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

135 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

144 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

145 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

146 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

156 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

157 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

158 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

159 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

160 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

161 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

162 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

163 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

164 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

165 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

166 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

167 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

168 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

169 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

170 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

171 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

172 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

173 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

174 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

175 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

176 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

177 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

178 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

179 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

180 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

189 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

198 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

199 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

200 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

201 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

202 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

203 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

212 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

213 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

214 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

215 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

216 ((
WAIT
Ë=
SDIO_Waô_Píd
))

225 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

226 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

227 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

236 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

237 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

238 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

239 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

240 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

241 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

250 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

259 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

260 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

261 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

262 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

263 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

264 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

265 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

266 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

267 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

268 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

269 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

270 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

271 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

272 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

273 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

274 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

275 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

276 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

277 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

278 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

279 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

280 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

281 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

282 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

283 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

284 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

285 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

286 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

287 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

288 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

297 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

299 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

300 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

309 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

310 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

311 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

312 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

321 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

322 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

323 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

332 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

333 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

334 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

335 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

336 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

337 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

338 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

339 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

340 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

341 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

342 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

343 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

344 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

345 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

346 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

347 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

348 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

349 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

350 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

351 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

352 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

353 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

354 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

355 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

356 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

357 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

358 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

359 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

360 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

361 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

362 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

363 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

364 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

365 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

366 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

367 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

368 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

369 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

370 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

371 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

372 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

373 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

374 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

375 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

376 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

377 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

378 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

379 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

381 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

383 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

384 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

385 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

386 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

387 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

388 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

389 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

390 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

391 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

392 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

393 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

394 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

395 ((
IT
Ë=
SDIO_IT_TXACT
) || \

396 ((
IT
Ë=
SDIO_IT_RXACT
) || \

397 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

398 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

399 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

400 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

401 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

402 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

403 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

404 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

405 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

406 ((
IT
Ë=
SDIO_IT_CEATAEND
))

408 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

418 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

419 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

420 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

421 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

442 
SDIO_DeInô
();

443 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

444 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

445 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

447 
uöt32_t
 
SDIO_GëPowîSèã
();

448 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

451 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

452 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

453 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

454 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

455 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

456 
uöt32_t
 
SDIO_GëD©aCou¡î
();

457 
uöt32_t
 
SDIO_RódD©a
();

458 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

459 
uöt32_t
 
SDIO_GëFIFOCou¡
();

460 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

461 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

463 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

464 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

466 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

467 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

469 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

470 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

471 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mSPI_Dúe˘i⁄
;

48 
uöt16_t
 
	mSPI_Mode
;

49 
uöt16_t
 
	mSPI_D©aSize
;

50 
uöt16_t
 
	mSPI_CPOL
;

51 
uöt16_t
 
	mSPI_CPHA
;

52 
uöt16_t
 
	mSPI_NSS
;

53 
uöt16_t
 
	mSPI_BaudR©ePªsˇÀr
;

54 
uöt16_t
 
	mSPI_Fú°Bô
;

55 
uöt16_t
 
	mSPI_CRCPﬁynomül
;

56 }
	tSPI_InôTy≥Def
;

64 
uöt16_t
 
	mI2S_Mode
;

65 
uöt16_t
 
	mI2S_Sènd¨d
;

66 
uöt16_t
 
	mI2S_D©aF‹m©
;

67 
uöt16_t
 
	mI2S_MCLKOuçut
;

68 
uöt16_t
 
	mI2S_AudioFªq
;

69 
uöt16_t
 
	mI2S_CPOL
;

70 }
	tI2S_InôTy≥Def
;

80 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI1_BASE
Ë|| \

	)

81 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
SPI2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

83 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
SPI2_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
SPI3_BASE
))

90 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

91 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

92 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

93 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

94 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

95 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

96 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

97 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

106 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

107 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

108 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

109 ((
MODE
Ë=
SPI_Mode_Sœve
))

118 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

119 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

120 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

121 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

130 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

131 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

132 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

133 ((
CPOL
Ë=
SPI_CPOL_High
))

142 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

143 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

144 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

145 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

154 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

155 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

157 ((
NSS
Ë=
SPI_NSS_H¨d
))

166 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

167 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

168 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

169 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

170 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

171 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

172 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

173 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

174 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

175 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

176 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

177 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

178 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

179 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

180 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

181 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

190 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

191 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

192 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

193 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

202 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

203 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

204 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

205 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

206 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

207 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

208 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

209 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

218 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

219 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

220 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

221 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

222 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

223 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

224 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

225 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

226 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

227 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

236 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

237 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

238 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

239 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

240 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

241 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

242 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

243 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

252 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

253 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

254 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

255 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

264 
	#I2S_AudioFªq_48k
 ((
uöt16_t
)48000)

	)

265 
	#I2S_AudioFªq_44k
 ((
uöt16_t
)44100)

	)

266 
	#I2S_AudioFªq_22k
 ((
uöt16_t
)22050)

	)

267 
	#I2S_AudioFªq_16k
 ((
uöt16_t
)16000)

	)

268 
	#I2S_AudioFªq_8k
 ((
uöt16_t
)8000)

	)

269 
	#I2S_AudioFªq_DeÁu…
 ((
uöt16_t
)2)

	)

270 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_48k
Ë|| \

	)

271 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

272 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

273 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

274 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

275 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

284 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

285 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

286 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

287 ((
CPOL
Ë=
I2S_CPOL_High
))

296 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

297 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

298 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

307 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

308 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

309 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

310 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

319 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

320 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

321 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

330 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

331 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

332 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

333 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

342 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

343 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

344 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

345 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

346 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

347 ((
IT
Ë=
SPI_I2S_IT_ERR
))

348 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

349 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

350 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

351 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

352 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

353 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

354 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

355 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

364 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

365 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

366 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

367 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

368 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

369 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

370 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

371 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

372 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

373 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

374 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

375 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

376 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

385 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

406 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

407 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

408 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

409 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

410 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

411 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

416 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

417 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

418 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

420 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

421 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

422 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

423 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

424 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

425 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

426 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

427 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

428 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

27 
	~"°m32f10x.h
"

47 
uöt16_t
 
	mTIM_PªsˇÀr
;

48 
uöt16_t
 
	mTIM_Cou¡îMode
;

49 
uöt16_t
 
	mTIM_Pîiod
;

50 
uöt16_t
 
	mTIM_ClockDivisi⁄
;

51 
uöt8_t
 
	mTIM_Rïëôi⁄Cou¡î
;

52 } 
	tTIM_TimeBa£InôTy≥Def
;

60 
uöt16_t
 
	mTIM_OCMode
;

61 
uöt16_t
 
	mTIM_OuçutSèã
;

62 
uöt16_t
 
	mTIM_OuçutNSèã
;

63 
uöt16_t
 
	mTIM_Pul£
;

64 
uöt16_t
 
	mTIM_OCPﬁ¨ôy
;

65 
uöt16_t
 
	mTIM_OCNPﬁ¨ôy
;

66 
uöt16_t
 
	mTIM_OCIdÀSèã
;

67 
uöt16_t
 
	mTIM_OCNIdÀSèã
;

68 } 
	tTIM_OCInôTy≥Def
;

76 
uöt16_t
 
	mTIM_Ch™√l
;

77 
uöt16_t
 
	mTIM_ICPﬁ¨ôy
;

78 
uöt16_t
 
	mTIM_ICSñe˘i⁄
;

79 
uöt16_t
 
	mTIM_ICPªsˇÀr
;

80 
uöt16_t
 
	mTIM_ICFûãr
;

81 } 
	tTIM_ICInôTy≥Def
;

89 
uöt16_t
 
	mTIM_OSSRSèã
;

90 
uöt16_t
 
	mTIM_OSSISèã
;

91 
uöt16_t
 
	mTIM_LOCKLevñ
;

92 
uöt16_t
 
	mTIM_DódTime
;

93 
uöt16_t
 
	mTIM_Bªak
;

94 
uöt16_t
 
	mTIM_BªakPﬁ¨ôy
;

95 
uöt16_t
 
	mTIM_Autom©icOuçut
;

96 } 
	tTIM_BDTRInôTy≥Def
;

102 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

103 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM2_BASE
) || \

104 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

105 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

106 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

107 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
) || \

108 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM7_BASE
) || \

109 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

110 
	#IS_TIM_18_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

111 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

112 
	#IS_TIM_123458_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
TIM1_BASE
Ë|| \

	)

113 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
) || \

114 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
) || \

115 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
) || \

116 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
) || \

117 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM8_BASE
))

126 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

127 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

128 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

129 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

130 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

131 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

132 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

133 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

134 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

135 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

136 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

137 ((
MODE
Ë=
TIM_OCMode_PWM2
))

138 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

139 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

140 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

141 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

142 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

143 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

144 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

145 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

154 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

155 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

156 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

157 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

166 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

167 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

168 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

169 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

170 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

171 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

172 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

173 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

174 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

175 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

176 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

177 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

178 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

187 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

188 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

189 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

190 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

191 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

192 ((
DIV
Ë=
TIM_CKD_DIV4
))

201 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

202 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

203 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

204 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

205 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

206 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

207 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

208 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

209 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

210 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

219 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

220 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

221 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

222 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

231 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

232 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

233 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

234 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

243 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

244 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

245 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

246 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

255 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

256 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

257 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

258 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

267 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

268 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

269 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

270 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

279 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

280 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

281 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

282 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

291 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

292 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

293 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

294 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

303 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

305 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

306 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

315 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

316 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

318 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

327 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

329 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

330 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

331 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

332 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

333 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

334 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

343 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

344 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

345 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

346 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

355 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

356 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

357 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

358 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

367 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

368 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

369 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

370 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

379 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

380 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

381 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

382 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

391 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

392 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

393 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

394 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

403 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001)

	)

404 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002)

	)

405 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003)

	)

406 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

407 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

408 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

417 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004)

	)

419 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008)

	)

420 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000C)

	)

421 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

422 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

423 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

424 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

433 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

434 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

435 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

436 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

437 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

438 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

439 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

440 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

441 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

442 
	#IS_TIM_PERIPH_IT
(
PERIPH
, 
TIM_IT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

443 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

444 (((
TIM_IT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

445 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

446 (((
TIM_IT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((TIM_IT) != 0x0000)) ||\

447 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

448 (((
TIM_IT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_IT) != 0x0000)))

449 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

450 ((
IT
Ë=
TIM_IT_CC1
) || \

451 ((
IT
Ë=
TIM_IT_CC2
) || \

452 ((
IT
Ë=
TIM_IT_CC3
) || \

453 ((
IT
Ë=
TIM_IT_CC4
) || \

454 ((
IT
Ë=
TIM_IT_COM
) || \

455 ((
IT
Ë=
TIM_IT_Triggî
) || \

456 ((
IT
Ë=
TIM_IT_Bªak
))

465 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

467 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

468 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

469 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

470 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

471 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

472 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

473 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

474 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

475 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

476 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

477 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

478 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

479 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

480 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

481 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

482 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

483 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

484 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

485 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

486 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

487 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

488 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

489 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

490 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

491 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

492 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

493 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

494 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

495 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

496 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

497 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

498 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

499 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

500 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

501 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

502 ((
BASE
Ë=
TIM_DMABa£_DCR
))

511 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

512 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

513 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

514 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

515 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

516 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

517 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

518 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

519 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

520 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

521 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

522 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

523 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

524 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

525 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

526 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

527 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

528 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

529 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

530 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

531 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

532 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

533 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

534 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

535 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

536 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

537 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

538 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

539 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

540 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

541 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

542 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

543 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

544 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

545 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

546 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

555 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

556 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

557 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

558 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

559 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

560 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

561 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

562 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

563 
	#IS_TIM_PERIPH_DMA
(
PERIPH
, 
SOURCE
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

564 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

565 (((
SOURCE
Ë& (
uöt16_t
)0xA0FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

566 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

567 (((
SOURCE
Ë& (
uöt16_t
)0x80FF) == 0x0000) && ((SOURCE) != 0x0000)) ||\

568 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

569 (((
SOURCE
Ë& (
uöt16_t
)0xFEFF) == 0x0000) && ((SOURCE) != 0x0000)))

578 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

579 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

580 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

581 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

582 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

583 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

584 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

585 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

594 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

595 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

597 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

598 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

599 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

600 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

601 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

602 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

603 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

604 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

605 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

606 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

607 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

608 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

609 ((
SELECTION
Ë=
TIM_TS_ETRF
))

610 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

611 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

612 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

613 ((
SELECTION
Ë=
TIM_TS_ITR3
))

622 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

623 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

624 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

625 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

626 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

627 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

635 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

636 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

637 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

638 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

647 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

648 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

649 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

650 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

659 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

660 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

661 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

662 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

671 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

672 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

673 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

674 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

675 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

676 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

686 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

687 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

688 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

689 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

690 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

691 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

692 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

693 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

694 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

695 
	#IS_TIM_PERIPH_EVENT
(
PERIPH
, 
EVENT
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

696 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

697 (((
EVENT
Ë& (
uöt16_t
)0xFFA0) == 0x0000) && ((EVENT) != 0x0000)) ||\

698 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

699 (((
EVENT
Ë& (
uöt16_t
)0xFF00) == 0x0000) && ((EVENT) != 0x0000)) ||\

700 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

701 (((
EVENT
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((EVENT) != 0x0000)))

710 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000)

	)

711 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001)

	)

712 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

713 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

722 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

723 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

724 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

725 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

734 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

735 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

736 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

737 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

747 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

748 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

749 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

750 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

759 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

760 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

761 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

762 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

763 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

764 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

765 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

766 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

767 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

768 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

769 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

770 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

771 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

772 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

773 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

774 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

775 
	#IS_TIM_PERIPH_TRGO
(
PERIPH
, 
TRGO
Ë(((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

	)

776 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM3_BASE
))||(((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
))|| \

777 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

778 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

779 ((
TRGO
Ë=
TIM_TRGOSour˚_Re£t
)) ||\

780 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

781 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

782 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

783 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

784 ((
TRGO
Ë=
TIM_TRGOSour˚_E«bÀ
)) ||\

785 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

786 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))|| \

787 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

788 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

789 ((
TRGO
Ë=
TIM_TRGOSour˚_Upd©e
)) ||\

790 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

791 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

792 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

793 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1
)) ||\

794 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

795 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

796 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

797 ((
TRGO
Ë=
TIM_TRGOSour˚_OC1Ref
)) ||\

798 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

799 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

800 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

801 ((
TRGO
Ë=
TIM_TRGOSour˚_OC2Ref
)) ||\

802 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

803 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

804 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

805 ((
TRGO
Ë=
TIM_TRGOSour˚_OC3Ref
)) ||\

806 ((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM2_BASE
)||(((*(uöt32_t*)&(PERIPH)Ë=
TIM1_BASE
))||\

807 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM3_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM4_BASE
))|| \

808 (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))||(((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))) && \

809 ((
TRGO
Ë=
TIM_TRGOSour˚_OC4Ref
)))

818 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

819 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

820 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

821 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

822 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

823 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

824 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

825 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

834 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

835 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

836 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

837 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

846 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

847 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

848 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

849 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

850 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

851 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

852 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

853 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

854 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

855 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

856 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

857 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

858 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

859 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

860 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

861 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

862 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

863 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

864 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

865 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

866 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

867 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

868 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

869 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

870 
	#IS_TIM_CLEAR_FLAG
(
PERIPH
, 
TIM_FLAG
Ë((((((*(
uöt32_t
*)&(PERIPH)Ë=
TIM2_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
))||\

	)

871 (((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
)Ë|| (((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM5_BASE
))))&& \

872 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE1A0) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

873 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM1_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
))))&& \

874 (((
TIM_FLAG
Ë& (
uöt16_t
)0xE100) == 0x0000) && ((TIM_FLAG) != 0x0000)) ||\

875 (((((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM6_BASE
Ë|| (((*(uöt32_t*)&(PERIPH)Ë=
TIM7_BASE
))))&& \

876 (((
TIM_FLAG
Ë& (
uöt16_t
)0xFFFE) == 0x0000) && ((TIM_FLAG) != 0x0000)))

877 
	#IS_TIM_PERIPH_FLAG
(
PERIPH
, 
TIM_FLAG
Ë(((((*(
uöt32_t
*)&(PERIPH))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
Ë||\

	)

878 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
TIM4_BASE
Ë|| ((*(
uöt32_t
*)&(
PERIPH
))==
TIM5_BASE
) || \

879 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

880 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2
) ||\

881 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4
) || \

882 ((
TIM_FLAG
Ë=
TIM_FLAG_Triggî
))) ||\

883 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

884 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) ||\

885 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
)|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
) || \

886 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM7_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM6_BASE
)) && \

887 (((
TIM_FLAG
Ë=
TIM_FLAG_Upd©e
))) ||\

888 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM8_BASE
)) &&\

889 (((
TIM_FLAG
Ë=
TIM_FLAG_COM
Ë|| ((TIM_FLAGË=
TIM_FLAG_Bªak
))) ||\

890 ((((*(
uöt32_t
*)&(
PERIPH
))==
TIM2_BASE
Ë|| ((*(uöt32_t*)&(PERIPH)Ë=
TIM3_BASE
) || \

891 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
TIM4_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM5_BASE
) || \

892 ((*(
uöt32_t
*)&(
PERIPH
))==
TIM1_BASE
Ë|| ((*(uöt32_t*)&(PERIPH))==
TIM8_BASE
)) &&\

893 (((
TIM_FLAG
Ë=
TIM_FLAG_CC1OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC2OF
) ||\

894 ((
TIM_FLAG
Ë=
TIM_FLAG_CC3OF
Ë|| ((TIM_FLAGË=
TIM_FLAG_CC4OF
))))

904 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

913 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

934 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

935 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

936 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

937 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

938 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

939 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

940 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

941 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

942 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

943 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

944 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

945 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

946 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

947 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

948 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

949 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

950 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

951 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

952 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

953 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

954 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

955 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

956 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

957 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

958 
uöt16_t
 
ExtTRGFûãr
);

959 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

960 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

961 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

962 
uöt16_t
 
ExtTRGFûãr
);

963 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

964 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

965 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

966 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

967 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

968 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

969 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

970 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

971 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

972 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

973 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

974 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

975 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

976 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

977 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

978 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

979 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

980 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

981 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

982 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

983 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

984 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

985 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

986 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

987 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

988 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

989 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

990 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

991 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

992 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

993 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

994 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

995 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

996 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

997 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

998 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

999 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1000 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1001 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1002 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1003 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1004 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1005 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1006 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1007 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1008 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1009 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1010 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1011 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1012 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1013 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1014 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1015 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1016 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1017 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1018 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1019 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1020 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1021 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1022 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1023 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1024 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1025 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

27 
	~"°m32f10x.h
"

47 
uöt32_t
 
	mUSART_BaudR©e
;

48 
uöt16_t
 
	mUSART_W‹dLígth
;

49 
uöt16_t
 
	mUSART_St›Bôs
;

50 
uöt16_t
 
	mUSART_P¨ôy
;

51 
uöt16_t
 
	mUSART_Mode
;

52 
uöt16_t
 
	mUSART_H¨dw¨eFlowC⁄åﬁ
;

53 } 
	tUSART_InôTy≥Def
;

61 
uöt16_t
 
	mUSART_Clock
;

62 
uöt16_t
 
	mUSART_CPOL
;

63 
uöt16_t
 
	mUSART_CPHA
;

64 
uöt16_t
 
	mUSART_La°Bô
;

65 } 
	tUSART_ClockInôTy≥Def
;

75 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

76 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë=
USART2_BASE
) || \

77 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

78 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
) || \

79 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART5_BASE
))

80 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

81 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

82 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
))

83 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((*(
uöt32_t
*)&(PERIPH)Ë=
USART1_BASE
Ë|| \

	)

84 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART2_BASE
) || \

85 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
USART3_BASE
) || \

86 ((*(
uöt32_t
*)&(
PERIPH
)Ë=
UART4_BASE
))

91 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

92 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

94 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

95 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

104 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

105 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

106 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

107 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

108 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

109 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

110 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

111 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

120 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

121 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

122 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

123 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

124 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

125 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

134 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

135 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

136 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

144 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

145 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

146 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

147 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

148 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

149 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

150 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

151 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

152 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

153 
	#IS_USART_PERIPH_HFC
(
PERIPH
, 
HFC
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

154 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

155 || ((
HFC
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
))

163 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

164 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

165 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

166 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

175 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

176 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

177 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

187 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

188 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

189 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

199 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

200 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

201 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

202 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

211 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

212 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

213 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

214 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

215 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

216 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

217 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

218 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

219 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

220 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

221 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

222 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

223 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

224 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

225 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

226 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

227 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

228 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

229 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

230 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

231 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

232 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

233 
	#IS_USART_PERIPH_IT
(
PERIPH
, 
USART_IT
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&& \

	)

234 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

235 || ((
USART_IT
Ë!
USART_IT_CTS
))

244 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

245 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

246 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

256 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

257 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

258 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

259 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

268 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

269 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

270 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

271 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

272 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

281 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

282 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

283 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

284 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

293 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

294 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

295 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

296 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

297 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

298 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

299 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

300 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

301 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

302 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

303 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

304 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

305 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

306 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

307 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

309 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

310 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

311 ((*(
	guöt32_t
*)&(
	gPERIPH
)Ë!
UART5_BASE
)) \

312 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

313 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

314 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

315 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

337 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

338 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

339 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

340 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

341 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

342 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

343 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

344 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

345 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

346 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

347 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

348 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

349 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

350 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

351 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

352 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

353 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

354 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

355 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

356 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

357 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

359 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

360 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

361 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

362 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

363 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

	@STM32F103Lib/FWlib/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

27 
	~"°m32f10x.h
"

53 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

54 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

55 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

56 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

57 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

58 ((
	gPRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

59 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

60 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

61 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

62 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

83 
WWDG_DeInô
();

84 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

85 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

86 
WWDG_E«bÀIT
();

87 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

88 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

89 
FœgSètus
 
WWDG_GëFœgSètus
();

90 
WWDG_CÀ¨Fœg
();

	@STM32F103Lib/FWlib/src/misc.c

22 
	~"misc.h
"

45 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

95 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

98 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

101 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

102 
	}
}

112 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

114 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

118 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

119 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

121 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

124 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

125 
tmµª
 = (0x4 - 
tmµri‹ôy
);

126 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

128 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

129 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

130 
tmµri‹ôy
 =Åmppriority << 0x04;

132 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

135 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

136 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

141 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

144 
	}
}

157 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

160 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

161 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

163 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

164 
	}
}

178 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

184 i‡(
NewSèã
 !
DISABLE
)

186 
SCB
->
SCR
 |
LowPowîMode
;

190 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

192 
	}
}

204 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

207 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

208 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

210 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

214 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

216 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_adc.c

22 
	~"°m32f10x_adc.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

50 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

51 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

54 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

55 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

58 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

59 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

62 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

65 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

71 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

72 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

75 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

76 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

79 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

82 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

85 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

88 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

89 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

92 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

93 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

96 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

99 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

100 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

103 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

106 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

110 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

111 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

114 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

117 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

118 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

122 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

125 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

128 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

129 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

133 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

136 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

139 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

179 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

182 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

183 *(
uöt32_t
*)&
ADCx
)

185 
ADC1_BASE
:

187 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

189 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

192 
ADC2_BASE
:

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

199 
ADC3_BASE
:

201 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

208 
	}
}

219 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

221 
uöt32_t
 
tm¥eg1
 = 0;

222 
uöt8_t
 
tm¥eg2
 = 0;

224 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

225 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

228 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

229 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

230 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

233 
tm¥eg1
 = 
ADCx
->
CR1
;

235 
tm¥eg1
 &
CR1_CLEAR_Mask
;

239 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

241 
ADCx
->
CR1
 = 
tm¥eg1
;

244 
tm¥eg1
 = 
ADCx
->
CR2
;

246 
tm¥eg1
 &
CR2_CLEAR_Mask
;

251 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

252 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

254 
ADCx
->
CR2
 = 
tm¥eg1
;

257 
tm¥eg1
 = 
ADCx
->
SQR1
;

259 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

262 
tm¥eg2
 |(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - 1);

263 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

265 
ADCx
->
SQR1
 = 
tm¥eg1
;

266 
	}
}

274 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

278 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

280 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

282 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

284 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

286 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

288 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

289 
	}
}

298 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

301 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 i‡(
NewSèã
 !
DISABLE
)

306 
ADCx
->
CR2
 |
CR2_ADON_Së
;

311 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

313 
	}
}

323 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
ADCx
->
CR2
 |
CR2_DMA_Së
;

336 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

338 
	}
}

353 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

355 
uöt8_t
 
ômask
 = 0;

357 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

358 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

361 
ômask
 = (
uöt8_t
)
ADC_IT
;

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR1
 |
ômask
;

370 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

372 
	}
}

379 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

384 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

385 
	}
}

392 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

394 
FœgSètus
 
bô°©us
 = 
RESET
;

396 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

398 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

401 
bô°©us
 = 
SET
;

406 
bô°©us
 = 
RESET
;

409  
bô°©us
;

410 
	}
}

417 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

420 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422 
ADCx
->
CR2
 |
CR2_CAL_Së
;

423 
	}
}

430 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

432 
FœgSètus
 
bô°©us
 = 
RESET
;

434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

439 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

457 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

460 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

462 i‡(
NewSèã
 !
DISABLE
)

466 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

472 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

474 
	}
}

481 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

483 
FœgSètus
 
bô°©us
 = 
RESET
;

485 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

487 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

490 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

498  
bô°©us
;

499 
	}
}

509 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

511 
uöt32_t
 
tm¥eg1
 = 0;

512 
uöt32_t
 
tm¥eg2
 = 0;

514 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

515 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

517 
tm¥eg1
 = 
ADCx
->
CR1
;

519 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

521 
tm¥eg2
 = 
Numbî
 - 1;

522 
tm¥eg1
 |
tm¥eg2
 << 13;

524 
ADCx
->
CR1
 = 
tm¥eg1
;

525 
	}
}

536 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

549 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

551 
	}
}

592 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

594 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

596 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

597 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

598 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

599 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

601 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

604 
tm¥eg1
 = 
ADCx
->
SMPR1
;

606 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

608 
tm¥eg1
 &~
tm¥eg2
;

610 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

612 
tm¥eg1
 |
tm¥eg2
;

614 
ADCx
->
SMPR1
 = 
tm¥eg1
;

619 
tm¥eg1
 = 
ADCx
->
SMPR2
;

621 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

623 
tm¥eg1
 &~
tm¥eg2
;

625 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

627 
tm¥eg1
 |
tm¥eg2
;

629 
ADCx
->
SMPR2
 = 
tm¥eg1
;

632 i‡(
R™k
 < 7)

635 
tm¥eg1
 = 
ADCx
->
SQR3
;

637 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

639 
tm¥eg1
 &~
tm¥eg2
;

641 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

643 
tm¥eg1
 |
tm¥eg2
;

645 
ADCx
->
SQR3
 = 
tm¥eg1
;

648 i‡(
R™k
 < 13)

651 
tm¥eg1
 = 
ADCx
->
SQR2
;

653 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

655 
tm¥eg1
 &~
tm¥eg2
;

657 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

659 
tm¥eg1
 |
tm¥eg2
;

661 
ADCx
->
SQR2
 = 
tm¥eg1
;

667 
tm¥eg1
 = 
ADCx
->
SQR1
;

669 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

671 
tm¥eg1
 &~
tm¥eg2
;

673 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

675 
tm¥eg1
 |
tm¥eg2
;

677 
ADCx
->
SQR1
 = 
tm¥eg1
;

679 
	}
}

689 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

692 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

693 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

694 i‡(
NewSèã
 !
DISABLE
)

697 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

702 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

704 
	}
}

711 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

714 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

716  (
uöt16_t
Ë
ADCx
->
DR
;

717 
	}
}

723 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

726  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

727 
	}
}

738 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

741 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

742 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

743 i‡(
NewSèã
 !
DISABLE
)

746 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

751 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

753 
	}
}

764 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

767 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

768 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

769 i‡(
NewSèã
 !
DISABLE
)

772 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

777 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

779 
	}
}

817 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

819 
uöt32_t
 
tm¥eg
 = 0;

821 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

822 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

824 
tm¥eg
 = 
ADCx
->
CR2
;

826 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

828 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

830 
ADCx
->
CR2
 = 
tm¥eg
;

831 
	}
}

842 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

845 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

846 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

847 i‡(
NewSèã
 !
DISABLE
)

850 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

855 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

857 
	}
}

868 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

871 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

872 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

873 i‡(
NewSèã
 !
DISABLE
)

877 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

883 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

885 
	}
}

892 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

894 
FœgSètus
 
bô°©us
 = 
RESET
;

896 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

898 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

901 
bô°©us
 = 
SET
;

906 
bô°©us
 = 
RESET
;

909  
bô°©us
;

910 
	}
}

951 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

953 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

955 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

956 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

957 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

958 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

960 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

963 
tm¥eg1
 = 
ADCx
->
SMPR1
;

965 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

967 
tm¥eg1
 &~
tm¥eg2
;

969 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

971 
tm¥eg1
 |
tm¥eg2
;

973 
ADCx
->
SMPR1
 = 
tm¥eg1
;

978 
tm¥eg1
 = 
ADCx
->
SMPR2
;

980 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

982 
tm¥eg1
 &~
tm¥eg2
;

984 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

986 
tm¥eg1
 |
tm¥eg2
;

988 
ADCx
->
SMPR2
 = 
tm¥eg1
;

992 
tm¥eg1
 = 
ADCx
->
JSQR
;

994 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

996 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

998 
tm¥eg1
 &~
tm¥eg2
;

1000 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1002 
tm¥eg1
 |
tm¥eg2
;

1004 
ADCx
->
JSQR
 = 
tm¥eg1
;

1005 
	}
}

1014 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1016 
uöt32_t
 
tm¥eg1
 = 0;

1017 
uöt32_t
 
tm¥eg2
 = 0;

1019 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1020 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1023 
tm¥eg1
 = 
ADCx
->
JSQR
;

1025 
tm¥eg1
 &
JSQR_JL_Re£t
;

1027 
tm¥eg2
 = 
Lígth
 - 1;

1028 
tm¥eg1
 |
tm¥eg2
 << 20;

1030 
ADCx
->
JSQR
 = 
tm¥eg1
;

1031 
	}
}

1047 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1050 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1051 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1052 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1054 *((
__IO
 
uöt32_t
 *)((*(uöt32_t*)&
ADCx
Ë+ 
ADC_Inje˘edCh™√l
)Ë(uöt32_t)
Off£t
;

1055 
	}
}

1068 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1071 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1072 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1074  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë(((*(uöt32_t*)&
ADCx
Ë+ 
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
)));

1075 
	}
}

1099 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1101 
uöt32_t
 
tm¥eg
 = 0;

1103 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1104 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1106 
tm¥eg
 = 
ADCx
->
CR1
;

1108 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1110 
tm¥eg
 |
ADC_A«logW©chdog
;

1112 
ADCx
->
CR1
 = 
tm¥eg
;

1113 
	}
}

1124 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1125 
uöt16_t
 
LowThªshﬁd
)

1128 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1129 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1130 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1132 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1134 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1135 
	}
}

1163 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1165 
uöt32_t
 
tm¥eg
 = 0;

1167 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1168 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1170 
tm¥eg
 = 
ADCx
->
CR1
;

1172 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1174 
tm¥eg
 |
ADC_Ch™√l
;

1176 
ADCx
->
CR1
 = 
tm¥eg
;

1177 
	}
}

1185 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1188 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1189 i‡(
NewSèã
 !
DISABLE
)

1192 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1197 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1199 
	}
}

1213 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1215 
FœgSètus
 
bô°©us
 = 
RESET
;

1217 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1218 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1220 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1223 
bô°©us
 = 
SET
;

1228 
bô°©us
 = 
RESET
;

1231  
bô°©us
;

1232 
	}
}

1246 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1249 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1250 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1252 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1253 
	}
}

1265 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1267 
ITSètus
 
bô°©us
 = 
RESET
;

1268 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1270 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1271 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1273 
ômask
 = 
ADC_IT
 >> 8;

1275 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1277 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1280 
bô°©us
 = 
SET
;

1285 
bô°©us
 = 
RESET
;

1288  
bô°©us
;

1289 
	}
}

1301 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1303 
uöt8_t
 
ômask
 = 0;

1305 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1306 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1308 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1310 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1311 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_bkp.c

22 
	~"°m32f10x_bkp.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

53 
	#TPAL_BôNumbî
 0x01

	)

54 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

57 
	#TPE_BôNumbî
 0x00

	)

58 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

64 
	#TPIE_BôNumbî
 0x02

	)

65 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

68 
	#TIF_BôNumbî
 0x09

	)

69 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

72 
	#TEF_BôNumbî
 0x08

	)

73 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

78 
	#RTCCR_CAL_Mask
 ((
uöt16_t
)0xFF80)

	)

79 
	#RTCCR_Mask
 ((
uöt16_t
)0xFC7F)

	)

82 
	#CSR_CTE_Së
 ((
uöt16_t
)0x0001)

	)

83 
	#CSR_CTI_Së
 ((
uöt16_t
)0x0002)

	)

124 
	$BKP_DeInô
()

126 
	`RCC_BackupRe£tCmd
(
ENABLE
);

127 
	`RCC_BackupRe£tCmd
(
DISABLE
);

128 
	}
}

138 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

141 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

142 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

143 
	}
}

151 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

154 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

155 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

156 
	}
}

164 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

168 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

169 
	}
}

184 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

186 
uöt16_t
 
tm¥eg
 = 0;

188 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

189 
tm¥eg
 = 
BKP
->
RTCCR
;

191 
tm¥eg
 &
RTCCR_Mask
;

194 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

196 
BKP
->
RTCCR
 = 
tm¥eg
;

197 
	}
}

205 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

207 
uöt16_t
 
tm¥eg
 = 0;

209 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

210 
tm¥eg
 = 
BKP
->
RTCCR
;

212 
tm¥eg
 &
RTCCR_CAL_Mask
;

214 
tm¥eg
 |
CÆibøti⁄VÆue
;

216 
BKP
->
RTCCR
 = 
tm¥eg
;

217 
	}
}

226 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

229 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

230 *(
__IO
 
uöt16_t
 *Ë(
BKP_BASE
 + 
BKP_DR
Ë
D©a
;

231 
	}
}

239 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

242 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

243  (*(
__IO
 
uöt16_t
 *Ë(
BKP_BASE
 + 
BKP_DR
));

244 
	}
}

251 
FœgSètus
 
	$BKP_GëFœgSètus
()

253  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

254 
	}
}

261 
	$BKP_CÀ¨Fœg
()

264 
BKP
->
CSR
 |
CSR_CTE_Së
;

265 
	}
}

272 
ITSètus
 
	$BKP_GëITSètus
()

274  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

275 
	}
}

282 
	$BKP_CÀ¨ITPídögBô
()

285 
BKP
->
CSR
 |
CSR_CTI_Së
;

286 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_can.c

22 
	~"°m32f10x_ˇn.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

48 
	#MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

49 
	#MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

50 
	#MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

51 
	#MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

52 
	#MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

53 
	#MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

54 
	#MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

55 
	#MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

56 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

59 
	#MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

60 
	#MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

61 
	#MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

64 
	#TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

65 
	#TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

66 
	#TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

67 
	#TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

68 
	#TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

69 
	#TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

70 
	#TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

71 
	#TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

72 
	#TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

73 
	#TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

74 
	#TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

75 
	#TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

78 
	#RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

79 
	#RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

80 
	#RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

83 
	#RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

84 
	#RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

85 
	#RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

88 
	#ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

89 
	#ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

90 
	#ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

96 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

99 
	#INAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

102 
	#SLAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

128 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

144 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

147 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

149 *(
uöt32_t
*)&
CANx
)

151 
CAN1_BASE
:

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

160 
	}
}

171 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

173 
uöt8_t
 
InôSètus
 = 
CANINITFAILED
;

174 
uöt32_t
 
waô_ack
 = 0x00000000;

176 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

183 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

184 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

185 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

186 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

187 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

189 
CANx
->
MCR
 &~
MCR_SLEEP
;

191 
CANx
->
MCR
 |
MCR_INRQ
 ;

193 (
waô_ack
 !
INAK_TimeOut
)&&((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK))

195 
waô_ack
++;

198 i‡((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK)

200 
InôSètus
 = 
CANINITFAILED
;

205 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

207 
CANx
->
MCR
 |
MCR_TTCM
;

211 
CANx
->
MCR
 &~
MCR_TTCM
;

214 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

216 
CANx
->
MCR
 |
MCR_ABOM
;

220 
CANx
->
MCR
 &~
MCR_ABOM
;

223 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

225 
CANx
->
MCR
 |
MCR_AWUM
;

229 
CANx
->
MCR
 &~
MCR_AWUM
;

232 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

234 
CANx
->
MCR
 |
MCR_NART
;

238 
CANx
->
MCR
 &~
MCR_NART
;

241 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

243 
CANx
->
MCR
 |
MCR_RFLM
;

247 
CANx
->
MCR
 &~
MCR_RFLM
;

250 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

252 
CANx
->
MCR
 |
MCR_TXFP
;

256 
CANx
->
MCR
 &~
MCR_TXFP
;

259 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_SJW
 << 24) |

260 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_BS2
 << 20) |

261 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

263 
CANx
->
MCR
 &~
MCR_INRQ
;

265 
waô_ack
 = 0x00;

266 (
waô_ack
 !
INAK_TimeOut
)&&((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK))

268 
waô_ack
++;

271 i‡((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK)

273 
InôSètus
 = 
CANINITFAILED
;

277 
InôSètus
 = 
CANINITOK
 ;

281  
InôSètus
;

282 
	}
}

291 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

293 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

295 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

296 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

297 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

298 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

299 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

300 
fûãr_numbî_bô_pos
 =

301 (
uöt32_t
)(((uöt32_t)0x00000001Ë<< ((uöt32_t)
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

303 
CAN1
->
FMR
 |
FMR_FINIT
;

305 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

307 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

310 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

313 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

314 ((
uöt32_t
)((uöt32_t)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

315 ((
uöt32_t
)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

318 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

319 ((
uöt32_t
)((uöt32_t)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

320 ((
uöt32_t
)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

322 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

325 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

327 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

328 ((
uöt32_t
)((uöt32_t)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

329 ((
uöt32_t
)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

331 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

332 ((
uöt32_t
)((uöt32_t)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

333 ((
uöt32_t
)0x0000FFFF & 
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

336 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

339 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

344 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

347 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO0
)

350 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO1
)

355 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

359 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

361 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

364 
CAN1
->
FMR
 &~
FMR_FINIT
;

365 
	}
}

373 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

377 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

379 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

381 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

383 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

385 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

387 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

389 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

391 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

393 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

395 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

397 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

398 
	}
}

414 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
New°©e
)

417 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

418 
	`as£π_∑øm
(
	`IS_CAN_ITC⁄fig
(
CAN_IT
));

419 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
New°©e
));

420 i‡(
New°©e
 !
DISABLE
)

423 
CANx
->
IER
 |
CAN_IT
;

428 
CANx
->
IER
 &~
CAN_IT
;

430 
	}
}

440 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

442 
uöt8_t
 
å™smô_maûbox
 = 0;

444 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

445 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

446 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

447 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

449 i‡((
CANx
->
TSR
&
TSR_TME0
) == TSR_TME0)

451 
å™smô_maûbox
 = 0;

453 i‡((
CANx
->
TSR
&
TSR_TME1
) == TSR_TME1)

455 
å™smô_maûbox
 = 1;

457 i‡((
CANx
->
TSR
&
TSR_TME2
) == TSR_TME2)

459 
å™smô_maûbox
 = 2;

463 
å™smô_maûbox
 = 
CAN_NO_MB
;

465 i‡(
å™smô_maûbox
 !
CAN_NO_MB
)

468 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

469 i‡(
TxMesßge
->
IDE
 =
CAN_ID_STD
)

471 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

472 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21Ë| TxMesßge->
RTR
);

476 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

477 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
<<3Ë| TxMesßge->
IDE
 |

478 
TxMesßge
->
RTR
);

482 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

483 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

484 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

486 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

487 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

488 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

489 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

490 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

491 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

492 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

493 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

495 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

497  
å™smô_maûbox
;

498 
	}
}

508 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
å™smô_maûbox
)

511 
uöt8_t
 
°©e
 = 0;

513 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

514 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
å™smô_maûbox
));

515 
å™smô_maûbox
)

517 (0): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP0
) << 2);

518 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK0
) >> 0);

519 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME0
) >> 26);

521 (1): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP1
) >> 6);

522 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK1
) >> 8);

523 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME1
) >> 27);

525 (2): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP2
) >> 14);

526 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK2
) >> 16);

527 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME2
) >> 28);

530 
°©e
 = 
CANTXFAILED
;

533 
°©e
)

536 (0x0): 
°©e
 = 
CANTXPENDING
;

539 (0x5): 
°©e
 = 
CANTXFAILED
;

542 (0x7): 
°©e
 = 
CANTXOK
;

545 
°©e
 = 
CANTXFAILED
;

548  
°©e
;

549 
	}
}

557 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

560 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

561 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

563 
Maûbox
)

565 (0): 
CANx
->
TSR
 |
TSR_ABRQ0
;

567 (1): 
CANx
->
TSR
 |
TSR_ABRQ1
;

569 (2): 
CANx
->
TSR
 |
TSR_ABRQ2
;

574 
	}
}

582 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

585 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

586 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

588 i‡(
FIFONumbî
 =
CAN_FIFO0
)

590 
CANx
->
RF0R
 = 
RF0R_RFOM0
;

595 
CANx
->
RF1R
 = 
RF1R_RFOM1
;

597 
	}
}

605 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

607 
uöt8_t
 
mesßge_≥ndög
=0;

609 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

610 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

611 i‡(
FIFONumbî
 =
CAN_FIFO0
)

613 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

615 i‡(
FIFONumbî
 =
CAN_FIFO1
)

617 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

621 
mesßge_≥ndög
 = 0;

623  
mesßge_≥ndög
;

624 
	}
}

634 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

637 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

638 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

640 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

641 i‡(
RxMesßge
->
IDE
 =
CAN_ID_STD
)

643 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

647 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

650 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

652 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

654 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

656 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

657 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

658 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

659 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

660 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

661 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

662 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

663 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

665 
	`CAN_FIFORñó£
(
CANx
, 
FIFONumbî
);

666 
	}
}

675 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
New°©e
)

678 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

679 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
New°©e
));

680 i‡(
New°©e
 !
DISABLE
)

683 
CANx
->
MCR
 |
MCR_DBF
;

688 
CANx
->
MCR
 &~
MCR_DBF
;

690 
	}
}

697 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

699 
uöt8_t
 
¶ìp°©us
 = 
CANSLEEPFAILED
;

702 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

705 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~
MCR_INRQ
)Ë| 
MCR_SLEEP
);

708 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

711 
¶ìp°©us
 = 
CANSLEEPOK
;

714  (
uöt8_t
)
¶ìp°©us
;

715 
	}
}

723 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

725 
uöt32_t
 
waô_¶ak
 = 
SLAK_TimeOut
 ;

726 
uöt8_t
 
wakeup°©us
 = 
CANWAKEUPFAILED
;

729 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

732 
CANx
->
MCR
 &~
MCR_SLEEP
;

735 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

737 
waô_¶ak
--;

739 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

742 
wakeup°©us
 = 
CANWAKEUPOK
;

745  (
uöt8_t
)
wakeup°©us
;

746 
	}
}

756 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

758 
FœgSètus
 
bô°©us
 = 
RESET
;

760 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

761 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

763 i‡((
CANx
->
ESR
 & 
CAN_FLAG
Ë!(
uöt32_t
)
RESET
)

766 
bô°©us
 = 
SET
;

771 
bô°©us
 = 
RESET
;

774  
bô°©us
;

775 
	}
}

783 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

786 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

787 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

789 
CANx
->
ESR
 &~
CAN_FLAG
;

790 
	}
}

803 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

805 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

807 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

808 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

809 
CAN_IT
)

811 
CAN_IT_RQCP0
:

812 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP0
);

814 
CAN_IT_RQCP1
:

815 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP1
);

817 
CAN_IT_RQCP2
:

818 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP2
);

820 
CAN_IT_FF0
:

821 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FULL0
);

823 
CAN_IT_FOV0
:

824 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FOVR0
);

826 
CAN_IT_FF1
:

827 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FULL1
);

829 
CAN_IT_FOV1
:

830 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FOVR1
);

832 
CAN_IT_EWG
:

833 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EWGF
);

835 
CAN_IT_EPV
:

836 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EPVF
);

838 
CAN_IT_BOF
:

839 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_BOFF
);

841 
CAN_IT_SLK
:

842 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_SLAKI
);

844 
CAN_IT_WKU
:

845 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_WKUI
);

848 
≥ndögbô°©us
 = 
RESET
;

852  
≥ndögbô°©us
;

853 
	}
}

861 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

864 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

865 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

866 
CAN_IT
)

868 
CAN_IT_RQCP0
:

869 
CANx
->
TSR
 = 
TSR_RQCP0
;

871 
CAN_IT_RQCP1
:

872 
CANx
->
TSR
 = 
TSR_RQCP1
;

874 
CAN_IT_RQCP2
:

875 
CANx
->
TSR
 = 
TSR_RQCP2
;

877 
CAN_IT_FF0
:

878 
CANx
->
RF0R
 = 
RF0R_FULL0
;

880 
CAN_IT_FOV0
:

881 
CANx
->
RF0R
 = 
RF0R_FOVR0
;

883 
CAN_IT_FF1
:

884 
CANx
->
RF1R
 = 
RF1R_FULL1
;

886 
CAN_IT_FOV1
:

887 
CANx
->
RF1R
 = 
RF1R_FOVR1
;

889 
CAN_IT_EWG
:

890 
CANx
->
ESR
 &~ 
ESR_EWGF
;

892 
CAN_IT_EPV
:

893 
CANx
->
ESR
 &~ 
ESR_EPVF
;

895 
CAN_IT_BOF
:

896 
CANx
->
ESR
 &~ 
ESR_BOFF
;

898 
CAN_IT_WKU
:

899 
CANx
->
MSR
 = 
MSR_WKUI
;

901 
CAN_IT_SLK
:

902 
CANx
->
MSR
 = 
MSR_SLAKI
;

907 
	}
}

915 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

917 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

919 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

922 
≥ndögbô°©us
 = 
SET
;

927 
≥ndögbô°©us
 = 
RESET
;

929  
≥ndögbô°©us
;

930 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_crc.c

22 
	~"°m32f10x_¸c.h
"

47 
	#CR_RESET_Së
 ((
uöt32_t
)0x00000001)

	)

86 
	$CRC_Re£tDR
()

89 
CRC
->
CR
 = 
CR_RESET_Së
;

90 
	}
}

97 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

99 
CRC
->
DR
 = 
D©a
;

101  (
CRC
->
DR
);

102 
	}
}

111 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

113 
uöt32_t
 
ödex
 = 0;

115 
ödex
 = 0; index < 
Buf„rLígth
; index++)

117 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

119  (
CRC
->
DR
);

120 
	}
}

127 
uöt32_t
 
	$CRC_GëCRC
()

129  (
CRC
->
DR
);

130 
	}
}

137 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

139 
CRC
->
IDR
 = 
IDVÆue
;

140 
	}
}

147 
uöt8_t
 
	$CRC_GëIDRegi°î
()

149  (
CRC
->
IDR
);

150 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_dac.c

22 
	~"°m32f10x_dac.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR_EN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#CR_DMAEN_Së
 ((
uöt32_t
)0x00001000)

	)

53 
	#CR_CLEAR_Mask
 ((
uöt32_t
)0x00000FFE)

	)

56 
	#SWTRIGR_SWTRIG_Së
 ((
uöt32_t
)0x00000001)

	)

59 
	#DUAL_SWTRIG_Së
 ((
uöt32_t
)0x00000003)

	)

60 
	#DUAL_SWTRIG_Re£t
 ((
uöt32_t
)0xFFFFFFFC)

	)

63 
	#DHR12R1_Off£t
 ((
uöt32_t
)0x00000008)

	)

64 
	#DHR12R2_Off£t
 ((
uöt32_t
)0x00000014)

	)

65 
	#DHR12RD_Off£t
 ((
uöt32_t
)0x00000020)

	)

68 
	#DOR_Off£t
 ((
uöt32_t
)0x0000002C)

	)

107 
	$DAC_DeInô
()

110 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

112 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

113 
	}
}

127 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

129 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

131 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

132 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

133 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

134 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

137 
tm¥eg1
 = 
DAC
->
CR
;

139 
tm¥eg1
 &~(
CR_CLEAR_Mask
 << 
DAC_Ch™√l
);

146 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

147 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

149 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

151 
DAC
->
CR
 = 
tm¥eg1
;

152 
	}
}

160 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

164 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

166 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

168 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

170 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

171 
	}
}

183 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

186 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

187 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

188 i‡(
NewSèã
 !
DISABLE
)

191 
DAC
->
CR
 |
CR_EN_Së
 << 
DAC_Ch™√l
;

196 
DAC
->
CR
 &~(
CR_EN_Së
 << 
DAC_Ch™√l
);

198 
	}
}

210 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

213 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

214 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

215 i‡(
NewSèã
 !
DISABLE
)

218 
DAC
->
CR
 |
CR_DMAEN_Së
 << 
DAC_Ch™√l
;

223 
DAC
->
CR
 &~(
CR_DMAEN_Së
 << 
DAC_Ch™√l
);

225 
	}
}

237 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

240 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

241 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

242 i‡(
NewSèã
 !
DISABLE
)

245 
DAC
->
SWTRIGR
 |
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4);

250 
DAC
->
SWTRIGR
 &~(
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4));

252 
	}
}

261 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_Së
 ;

273 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_Re£t
;

275 
	}
}

291 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

294 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

295 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

296 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

297 i‡(
NewSèã
 !
DISABLE
)

300 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

305 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

307 
	}
}

320 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

323 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

324 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

326 *((
__IO
 
uöt32_t
 *)(
DAC_BASE
 + 
DHR12R1_Off£t
 + 
DAC_Align
)Ë(uöt32_t)
D©a
;

327 
	}
}

340 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

343 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

344 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

346 *((
__IO
 
uöt32_t
 *)(
DAC_BASE
 + 
DHR12R2_Off£t
 + 
DAC_Align
)Ë(uöt32_t)
D©a
;

347 
	}
}

363 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

365 
uöt32_t
 
d©a
 = 0;

367 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

368 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

369 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

372 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

374 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

378 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

381 *((
__IO
 
uöt32_t
 *)(
DAC_BASE
 + 
DHR12RD_Off£t
 + 
DAC_Align
)Ë
d©a
;

382 
	}
}

392 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

395 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

397  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*)(
DAC_BASE
 + 
DOR_Off£t
 + ((uöt32_t)
DAC_Ch™√l
 >> 2)));

398 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_dbgmcu.c

22 
	~"°m32f10x_dbgmcu.h
"

45 
	#IDCODE_DEVID_Mask
 ((
uöt32_t
)0x00000FFF)

	)

83 
uöt32_t
 
	$DBGMCU_GëREVID
()

85 (
DBGMCU
->
IDCODE
 >> 16);

86 
	}
}

93 
uöt32_t
 
	$DBGMCU_GëDEVID
()

95 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_Mask
);

96 
	}
}

125 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

128 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

129 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

130 i‡(
NewSèã
 !
DISABLE
)

132 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

136 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

138 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_dma.c

22 
	~"°m32f10x_dma.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CCR_ENABLE_Së
 ((
uöt32_t
)0x00000001)

	)

47 
	#CCR_ENABLE_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

50 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

51 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

52 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

53 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

54 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

55 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)0x00F00000)

	)

56 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)0x0F000000)

	)

59 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

60 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

61 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

62 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

63 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

66 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

69 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

111 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

114 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

116 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

118 
DMAy_Ch™√lx
->
CCR
 = 0;

121 
DMAy_Ch™√lx
->
CNDTR
 = 0;

124 
DMAy_Ch™√lx
->
CPAR
 = 0;

127 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 *(
uöt32_t
*)&
DMAy_Ch™√lx
)

130 
DMA1_Ch™√l1_BASE
:

132 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

134 
DMA1_Ch™√l2_BASE
:

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 
DMA1_Ch™√l3_BASE
:

140 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

142 
DMA1_Ch™√l4_BASE
:

144 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

146 
DMA1_Ch™√l5_BASE
:

148 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

150 
DMA1_Ch™√l6_BASE
:

152 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

154 
DMA1_Ch™√l7_BASE
:

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

158 
DMA2_Ch™√l1_BASE
:

160 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

162 
DMA2_Ch™√l2_BASE
:

164 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

166 
DMA2_Ch™√l3_BASE
:

168 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

170 
DMA2_Ch™√l4_BASE
:

172 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

174 
DMA2_Ch™√l5_BASE
:

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

182 
	}
}

195 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

197 
uöt32_t
 
tm¥eg
 = 0;

199 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

200 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

201 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

202 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

203 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

204 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

205 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

206 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

207 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

208 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

211 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

213 
tm¥eg
 &
CCR_CLEAR_Mask
;

223 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

224 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

225 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

226 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

228 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

231 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

234 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

237 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

238 
	}
}

246 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

250 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

252 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

254 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

256 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

258 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

260 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

262 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

264 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

266 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

268 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

270 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

271 
	}
}

282 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

285 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

286 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

287 i‡(
NewSèã
 !
DISABLE
)

290 
DMAy_Ch™√lx
->
CCR
 |
CCR_ENABLE_Së
;

295 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

297 
	}
}

314 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

318 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 i‡(
NewSèã
 !
DISABLE
)

323 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

328 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

330 
	}
}

341 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

344 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

346  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

347 
	}
}

403 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
)

405 
FœgSètus
 
bô°©us
 = 
RESET
;

406 
uöt32_t
 
tm¥eg
 = 0;

408 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

410 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

413 
tm¥eg
 = 
DMA2
->
ISR
 ;

418 
tm¥eg
 = 
DMA1
->
ISR
 ;

421 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

424 
bô°©us
 = 
SET
;

429 
bô°©us
 = 
RESET
;

433  
bô°©us
;

434 
	}
}

491 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
)

494 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

496 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

499 
DMA2
->
IFCR
 = 
DMA_FLAG
;

504 
DMA1
->
IFCR
 = 
DMA_FLAG
;

506 
	}
}

563 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMA_IT
)

565 
ITSètus
 
bô°©us
 = 
RESET
;

566 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

570 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

573 
tm¥eg
 = 
DMA2
->
ISR
 ;

578 
tm¥eg
 = 
DMA1
->
ISR
 ;

581 i‡((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
)

584 
bô°©us
 = 
SET
;

589 
bô°©us
 = 
RESET
;

592  
bô°©us
;

593 
	}
}

650 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
)

653 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

655 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

658 
DMA2
->
IFCR
 = 
DMA_IT
;

663 
DMA1
->
IFCR
 = 
DMA_IT
;

665 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_exti.c

22 
	~"°m32f10x_exti.h
"

45 
	#EXTI_LöeN⁄e
 ((
uöt32_t
)0x00000Ë

	)

85 
	$EXTI_DeInô
()

87 
EXTI
->
IMR
 = 0x00000000;

88 
EXTI
->
EMR
 = 0x00000000;

89 
EXTI
->
RTSR
 = 0x00000000;

90 
EXTI
->
FTSR
 = 0x00000000;

91 
EXTI
->
PR
 = 0x0007FFFF;

92 
	}
}

102 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

105 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

106 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

107 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

110 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

113 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

114 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

116 *(
__IO
 
uöt32_t
 *)(
EXTI_BASE
 + (uöt32_t)
EXTI_InôSåu˘
->
EXTI_Mode
)|EXTI_InôSåu˘->
EXTI_Löe
;

118 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

119 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

122 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

125 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

126 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

130 *(
__IO
 
uöt32_t
 *)(
EXTI_BASE
 + (uöt32_t)
EXTI_InôSåu˘
->
EXTI_Triggî
)|EXTI_InôSåu˘->
EXTI_Löe
;

136 *(
__IO
 
uöt32_t
 *)(
EXTI_BASE
 + (uöt32_t)
EXTI_InôSåu˘
->
EXTI_Mode
)&~EXTI_InôSåu˘->
EXTI_Löe
;

138 
	}
}

146 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

148 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LöeN⁄e
;

149 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

150 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

151 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

152 
	}
}

162 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

165 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

167 
EXTI
->
SWIER
 |
EXTI_Löe
;

168 
	}
}

177 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

179 
FœgSètus
 
bô°©us
 = 
RESET
;

181 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

183 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

185 
bô°©us
 = 
SET
;

189 
bô°©us
 = 
RESET
;

191  
bô°©us
;

192 
	}
}

201 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

204 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

206 
EXTI
->
PR
 = 
EXTI_Löe
;

207 
	}
}

216 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

218 
ITSètus
 
bô°©us
 = 
RESET
;

219 
uöt32_t
 
íabÀ°©us
 = 0;

221 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

223 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

224 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

226 
bô°©us
 = 
SET
;

230 
bô°©us
 = 
RESET
;

232  
bô°©us
;

233 
	}
}

242 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

245 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

247 
EXTI
->
PR
 = 
EXTI_Löe
;

248 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_flash.c

22 
	~"°m32f10x_Êash.h
"

46 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

47 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

48 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

51 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

54 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

55 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

56 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

57 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

58 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

59 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

60 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

61 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

62 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

63 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

64 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

65 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

68 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

69 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

70 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

71 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

72 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

75 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

76 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

77 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

80 
	#Eø£Timeout
 ((
uöt32_t
)0x00000FFF)

	)

81 
	#ProgømTimeout
 ((
uöt32_t
)0x0000000F)

	)

107 
dñay
();

125 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

127 
uöt32_t
 
tm¥eg
 = 0;

130 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

133 
tm¥eg
 = 
FLASH
->
ACR
;

136 
tm¥eg
 &
ACR_LATENCY_Mask
;

137 
tm¥eg
 |
FLASH_L©ícy
;

140 
FLASH
->
ACR
 = 
tm¥eg
;

141 
	}
}

151 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

154 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

157 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

158 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

159 
	}
}

169 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

172 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

175 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

176 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

177 
	}
}

184 
	$FLASH_U∆ock
()

187 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

188 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

189 
	}
}

196 
	$FLASH_Lock
()

199 
FLASH
->
CR
 |
CR_LOCK_Së
;

200 
	}
}

209 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

211 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

213 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

215 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

217 if(
°©us
 =
FLASH_COMPLETE
)

220 
FLASH
->
CR
|
CR_PER_Së
;

221 
FLASH
->
AR
 = 
Page_Addªss
;

222 
FLASH
->
CR
|
CR_STRT_Së
;

225 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

226 if(
°©us
 !
FLASH_BUSY
)

229 
FLASH
->
CR
 &
CR_PER_Re£t
;

233  
°©us
;

234 
	}
}

243 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

245 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

247 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

249 if(
°©us
 =
FLASH_COMPLETE
)

252 
FLASH
->
CR
 |
CR_MER_Së
;

253 
FLASH
->
CR
 |
CR_STRT_Së
;

256 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

257 if(
°©us
 !
FLASH_BUSY
)

260 
FLASH
->
CR
 &
CR_MER_Re£t
;

264  
°©us
;

265 
	}
}

274 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

276 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

279 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

280 if(
°©us
 =
FLASH_COMPLETE
)

283 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

284 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

287 
FLASH
->
CR
 |
CR_OPTER_Së
;

288 
FLASH
->
CR
 |
CR_STRT_Së
;

290 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

292 if(
°©us
 =
FLASH_COMPLETE
)

295 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

298 
FLASH
->
CR
 |
CR_OPTPG_Së
;

300 
OB
->
RDP

RDP_Key
;

302 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

304 if(
°©us
 !
FLASH_BUSY
)

307 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

312 i‡(
°©us
 !
FLASH_BUSY
)

315 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

320  
°©us
;

321 
	}
}

331 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

333 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

335 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

337 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

339 if(
°©us
 =
FLASH_COMPLETE
)

343 
FLASH
->
CR
 |
CR_PG_Së
;

345 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

347 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

349 if(
°©us
 =
FLASH_COMPLETE
)

353 *(
__IO
 
uöt16_t
*)(
Addªss
 + 2Ë
D©a
 >> 16;

356 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

358 if(
°©us
 !
FLASH_BUSY
)

361 
FLASH
->
CR
 &
CR_PG_Re£t
;

366 i‡(
°©us
 !
FLASH_BUSY
)

369 
FLASH
->
CR
 &
CR_PG_Re£t
;

374  
°©us
;

375 
	}
}

385 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

387 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

389 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

391 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

393 if(
°©us
 =
FLASH_COMPLETE
)

396 
FLASH
->
CR
 |
CR_PG_Së
;

398 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

400 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

401 if(
°©us
 !
FLASH_BUSY
)

404 
FLASH
->
CR
 &
CR_PG_Re£t
;

408  
°©us
;

409 
	}
}

420 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

422 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

424 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

425 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

426 if(
°©us
 =
FLASH_COMPLETE
)

429 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

430 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

432 
FLASH
->
CR
 |
CR_OPTPG_Së
;

433 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

436 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

437 if(
°©us
 !
FLASH_BUSY
)

440 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

444  
°©us
;

445 
	}
}

461 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

463 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

465 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

468 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

470 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

471 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

472 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

473 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

474 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

477 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

479 if(
°©us
 =
FLASH_COMPLETE
)

482 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

483 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

484 
FLASH
->
CR
 |
CR_OPTPG_Së
;

485 if(
WRP0_D©a
 != 0xFF)

487 
OB
->
WRP0
 = 
WRP0_D©a
;

490 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

492 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

494 
OB
->
WRP1
 = 
WRP1_D©a
;

497 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

499 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

501 
OB
->
WRP2
 = 
WRP2_D©a
;

504 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

507 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

509 
OB
->
WRP3
 = 
WRP3_D©a
;

512 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

515 if(
°©us
 !
FLASH_BUSY
)

518 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

522  
°©us
;

523 
	}
}

536 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

542 if(
°©us
 =
FLASH_COMPLETE
)

545 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

546 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

547 
FLASH
->
CR
 |
CR_OPTER_Së
;

548 
FLASH
->
CR
 |
CR_STRT_Së
;

550 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

551 if(
°©us
 =
FLASH_COMPLETE
)

554 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

556 
FLASH
->
CR
 |
CR_OPTPG_Së
;

557 if(
NewSèã
 !
DISABLE
)

559 
OB
->
RDP
 = 0x00;

563 
OB
->
RDP
 = 
RDP_Key
;

566 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

568 if(
°©us
 !
FLASH_BUSY
)

571 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

576 if(
°©us
 !
FLASH_BUSY
)

579 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

584  
°©us
;

585 
	}
}

606 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

608 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

610 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

611 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

612 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

614 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

615 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

618 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

620 if(
°©us
 =
FLASH_COMPLETE
)

623 
FLASH
->
CR
 |
CR_OPTPG_Së
;

625 
OB
->
USER
 = ( 
OB_IWDG
 | 
OB_STOP
 |
OB_STDBY
Ë| (
uöt16_t
)0xF8;

628 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

629 if(
°©us
 !
FLASH_BUSY
)

632 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

636  
°©us
;

637 
	}
}

645 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

648  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

649 
	}
}

656 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

659  (
uöt32_t
)(
FLASH
->
WRPR
);

660 
	}
}

668 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

670 
FœgSètus
 
ªadout°©us
 = 
RESET
;

671 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

673 
ªadout°©us
 = 
SET
;

677 
ªadout°©us
 = 
RESET
;

679  
ªadout°©us
;

680 
	}
}

687 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

689 
FœgSètus
 
bô°©us
 = 
RESET
;

691 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

693 
bô°©us
 = 
SET
;

697 
bô°©us
 = 
RESET
;

700  
bô°©us
;

701 
	}
}

714 
	$FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

717 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

718 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

719 if(
NewSèã
 !
DISABLE
)

722 
FLASH
->
CR
 |
FLASH_IT
;

727 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

729 
	}
}

742 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
)

744 
FœgSètus
 
bô°©us
 = 
RESET
;

746 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

747 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

749 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

751 
bô°©us
 = 
SET
;

755 
bô°©us
 = 
RESET
;

760 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

762 
bô°©us
 = 
SET
;

766 
bô°©us
 = 
RESET
;

770  
bô°©us
;

771 
	}
}

783 
	$FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
)

786 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

789 
FLASH
->
SR
 = 
FLASH_FLAG
;

790 
	}
}

798 
FLASH_Sètus
 
	$FLASH_GëSètus
()

800 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

802 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

804 
Êash°©us
 = 
FLASH_BUSY
;

808 if(
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
)

810 
Êash°©us
 = 
FLASH_ERROR_PG
;

814 if(
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
)

816 
Êash°©us
 = 
FLASH_ERROR_WRP
;

820 
Êash°©us
 = 
FLASH_COMPLETE
;

825  
Êash°©us
;

826 
	}
}

835 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

837 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

840 
°©us
 = 
	`FLASH_GëSètus
();

842 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

844 
	`dñay
();

845 
°©us
 = 
	`FLASH_GëSètus
();

846 
Timeout
--;

848 if(
Timeout
 == 0x00 )

850 
°©us
 = 
FLASH_TIMEOUT
;

853  
°©us
;

854 
	}
}

861 
	$dñay
()

863 
__IO
 
uöt32_t
 
i
 = 0;

864 
i
 = 0xFF; i != 0; i--)

867 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_fsmc.c

22 
	~"°m32f10x_fsmc.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

49 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

50 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

53 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

54 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

55 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

56 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

57 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

101 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

104 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

107 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

109 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

114 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

116 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

117 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

118 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

159 
	$FSMC_PCCARDDeInô
()

162 
FSMC_B™k4
->
PCR4
 = 0x00000018;

163 
FSMC_B™k4
->
SR4
 = 0x00000000;

164 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

166 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

167 
	}
}

177 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

180 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

183 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

184 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

213 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

215 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

218 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

219 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

225 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

229 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

231 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

232 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

233 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

234 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

235 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

236 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

237 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

238 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

239 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

240 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

241 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

243 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

247 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

249 
	}
}

259 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

261 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

264 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

265 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

266 
	`as£π_∑øm
–
	`IS_FSMC_DATA_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

267 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

268 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

269 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

270 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

271 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

272 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

273 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

281 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

282 
PCR_Mem‹yTy≥_NAND
 |

283 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

284 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

285 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

286 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

287 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

290 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

291 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

292 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

293 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

296 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

297 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

298 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

299 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

301 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

304 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

305 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

306 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

311 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

312 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

313 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

315 
	}
}

325 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

328 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

329 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

330 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

332 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

334 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

339 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

347 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

348 
FSMC_Mem‹yD©aWidth_16b
 |

349 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

350 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

353 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

354 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

355 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

356 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

359 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

360 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

361 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

362 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

365 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

366 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

367 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

368 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

369 
	}
}

377 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

380 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

381 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

382 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

406 
	}
}

414 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

417 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

418 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

419 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

420 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

421 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

422 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

423 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

424 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

425 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

426 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

427 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

428 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
	}
}

440 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

443 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

444 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

445 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

446 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
	}
}

472 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

474 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

475 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

477 i‡(
NewSèã
 !
DISABLE
)

480 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

485 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

487 
	}
}

499 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

501 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

502 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

504 i‡(
NewSèã
 !
DISABLE
)

507 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

509 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

513 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

519 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

521 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

525 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

528 
	}
}

536 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 !
DISABLE
)

543 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

548 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

550 
	}
}

562 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

564 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

565 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

567 i‡(
NewSèã
 !
DISABLE
)

570 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

572 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

576 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

582 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

584 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

588 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

591 
	}
}

601 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

603 
uöt32_t
 
eccvÆ
 = 0x00000000;

605 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

608 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

613 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

616 (
eccvÆ
);

617 
	}
}

636 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

638 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

639 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

640 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

642 i‡(
NewSèã
 !
DISABLE
)

645 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

647 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

650 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

652 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

657 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

663 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

666 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

669 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

671 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

676 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

679 
	}
}

696 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

698 
FœgSètus
 
bô°©us
 = 
RESET
;

699 
uöt32_t
 
tmp§
 = 0x00000000;

702 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

703 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

705 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

707 
tmp§
 = 
FSMC_B™k2
->
SR2
;

709 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

711 
tmp§
 = 
FSMC_B™k3
->
SR3
;

716 
tmp§
 = 
FSMC_B™k4
->
SR4
;

720 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

722 
bô°©us
 = 
SET
;

726 
bô°©us
 = 
RESET
;

729  
bô°©us
;

730 
	}
}

746 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

749 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

750 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

752 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

754 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

756 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

758 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

763 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

765 
	}
}

781 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

783 
ITSètus
 
bô°©us
 = 
RESET
;

784 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

787 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

788 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

790 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

792 
tmp§
 = 
FSMC_B™k2
->
SR2
;

794 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

796 
tmp§
 = 
FSMC_B™k3
->
SR3
;

801 
tmp§
 = 
FSMC_B™k4
->
SR4
;

804 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

806 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

807 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

809 
bô°©us
 = 
SET
;

813 
bô°©us
 = 
RESET
;

815  
bô°©us
;

816 
	}
}

832 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

835 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

836 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

838 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

840 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

842 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

844 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

849 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

851 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_gpio.c

22 
	~"°m32f10x_gpio.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

52 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

53 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

54 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

55 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

56 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

57 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

58 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

59 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

60 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

100 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

103 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

105 *(
uöt32_t
*)&
GPIOx
)

107 
GPIOA_BASE
:

108 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

109 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

111 
GPIOB_BASE
:

112 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

113 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

115 
GPIOC_BASE
:

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

117 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

119 
GPIOD_BASE
:

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

124 
GPIOE_BASE
:

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

128 
GPIOF_BASE
:

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

132 
GPIOG_BASE
:

133 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

139 
	}
}

148 
	$GPIO_AFIODeInô
()

150 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

151 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

152 
	}
}

163 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

165 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

166 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

168 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

169 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

170 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

173 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

174 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

177 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

179 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

183 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

185 
tm¥eg
 = 
GPIOx
->
CRL
;

186 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

188 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

190 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

191 i‡(
cuºíçö
 =
pos
)

193 
pos
 = 
pöpos
 << 2;

195 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

196 
tm¥eg
 &~
pömask
;

198 
tm¥eg
 |(
cuºítmode
 << 
pos
);

200 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

202 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

207 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

209 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

214 
GPIOx
->
CRL
 = 
tm¥eg
;

218 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

220 
tm¥eg
 = 
GPIOx
->
CRH
;

221 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

223 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

225 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

226 i‡(
cuºíçö
 =
pos
)

228 
pos
 = 
pöpos
 << 2;

230 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

231 
tm¥eg
 &~
pömask
;

233 
tm¥eg
 |(
cuºítmode
 << 
pos
);

235 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

237 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

240 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

242 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

246 
GPIOx
->
CRH
 = 
tm¥eg
;

248 
	}
}

256 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

259 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

260 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

261 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

262 
	}
}

271 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

273 
uöt8_t
 
bô°©us
 = 0x00;

276 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

277 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

279 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

281 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

285 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

287  
bô°©us
;

288 
	}
}

295 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

298 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

300  ((
uöt16_t
)
GPIOx
->
IDR
);

301 
	}
}

310 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

312 
uöt8_t
 
bô°©us
 = 0x00;

314 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

315 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

317 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

319 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

323 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

325  
bô°©us
;

326 
	}
}

333 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

336 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

338  ((
uöt16_t
)
GPIOx
->
ODR
);

339 
	}
}

349 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

352 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

353 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

355 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

356 
	}
}

366 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

369 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

370 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

372 
GPIOx
->
BRR
 = 
GPIO_Pö
;

373 
	}
}

386 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

389 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

390 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

391 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

393 i‡(
BôVÆ
 !
Bô_RESET
)

395 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

399 
GPIOx
->
BRR
 = 
GPIO_Pö
;

401 
	}
}

410 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

413 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

415 
GPIOx
->
ODR
 = 
P‹tVÆ
;

416 
	}
}

426 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

428 
uöt32_t
 
tmp
 = 0x00010000;

431 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

432 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

434 
tmp
 |
GPIO_Pö
;

436 
GPIOx
->
LCKR
 = 
tmp
;

438 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

440 
GPIOx
->
LCKR
 = 
tmp
;

442 
tmp
 = 
GPIOx
->
LCKR
;

444 
tmp
 = 
GPIOx
->
LCKR
;

445 
	}
}

457 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

459 
uöt32_t
 
tm¥eg
 = 0x00;

461 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

462 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

464 
tm¥eg
 = 
AFIO
->
EVCR
;

466 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

467 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

468 
tm¥eg
 |
GPIO_PöSour˚
;

469 
AFIO
->
EVCR
 = 
tm¥eg
;

470 
	}
}

478 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

483 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

484 
	}
}

519 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

523 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

524 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

526 
tm¥eg
 = 
AFIO
->
MAPR
;

527 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

528 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

529 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

531 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

532 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

534 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

536 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

537 
tm¥eg
 &~
tmp1
;

538 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

542 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

543 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

545 i‡(
NewSèã
 !
DISABLE
)

547 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

549 
AFIO
->
MAPR
 = 
tm¥eg
;

550 
	}
}

562 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

564 
uöt32_t
 
tmp
 = 0x00;

566 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

567 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

569 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

570 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

571 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

572 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_i2c.c

22 
	~"°m32f10x_i2c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

49 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

52 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

53 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

56 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

57 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

60 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

61 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

64 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

65 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

68 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

69 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

72 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

73 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

76 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

77 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

80 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

81 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

84 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

85 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

88 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

91 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

92 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

95 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

96 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

99 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

102 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

103 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

106 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

107 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

110 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

113 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

116 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

119 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

122 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

162 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

166 *(
uöt32_t
*)&
I2Cx
)

168 
I2C1_BASE
:

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

174 
I2C2_BASE
:

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

178 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

183 
	}
}

194 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

196 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

197 
uöt16_t
 
ªsu…
 = 0x04;

198 
uöt32_t
 
p˛k1
 = 8000000;

199 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

201 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

202 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

203 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

204 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

205 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

206 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

207 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

210 
tm¥eg
 = 
I2Cx
->
CR2
;

212 
tm¥eg
 &
CR2_FREQ_Re£t
;

214 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

215 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

217 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

218 
tm¥eg
 |
‰eqønge
;

220 
I2Cx
->
CR2
 = 
tm¥eg
;

223 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

226 
tm¥eg
 = 0;

228 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

231 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

233 i‡(
ªsu…
 < 0x04)

236 
ªsu…
 = 0x04;

239 
tm¥eg
 |
ªsu…
;

241 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

246 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

249 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

254 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

256 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

259 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

262 
ªsu…
 |(
uöt16_t
)0x0001;

265 
tm¥eg
 |
ªsu…
 | 
CCR_FS_Së
;

267 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * 300) / 1000) + 1);

270 
I2Cx
->
CCR
 = 
tm¥eg
;

272 
I2Cx
->
CR1
 |
CR1_PE_Së
;

275 
tm¥eg
 = 
I2Cx
->
CR1
;

277 
tm¥eg
 &
CR1_CLEAR_Mask
;

281 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

283 
I2Cx
->
CR1
 = 
tm¥eg
;

286 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

287 
	}
}

295 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

299 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

301 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

303 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

305 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

307 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

309 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

310 
	}
}

319 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

322 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

323 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

324 i‡(
NewSèã
 !
DISABLE
)

327 
I2Cx
->
CR1
 |
CR1_PE_Së
;

332 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

334 
	}
}

343 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

346 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

347 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

348 i‡(
NewSèã
 !
DISABLE
)

351 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

356 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

358 
	}
}

367 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

370 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

371 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

372 i‡(
NewSèã
 !
DISABLE
)

375 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

380 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

382 
	}
}

391 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

394 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

395 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

396 i‡(
NewSèã
 !
DISABLE
)

399 
I2Cx
->
CR1
 |
CR1_START_Së
;

404 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

406 
	}
}

415 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

418 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

419 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

420 i‡(
NewSèã
 !
DISABLE
)

423 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

428 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

430 
	}
}

439 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

442 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

443 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

444 i‡(
NewSèã
 !
DISABLE
)

447 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

452 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

454 
	}
}

462 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

464 
uöt16_t
 
tm¥eg
 = 0;

466 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

468 
tm¥eg
 = 
I2Cx
->
OAR2
;

470 
tm¥eg
 &
OAR2_ADD2_Re£t
;

472 
tm¥eg
 |(
uöt16_t
)(
Addªss
 & (uint16_t)0x00FE);

474 
I2Cx
->
OAR2
 = 
tm¥eg
;

475 
	}
}

484 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

487 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

488 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

489 i‡(
NewSèã
 !
DISABLE
)

492 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

497 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

499 
	}
}

508 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

511 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

512 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

513 i‡(
NewSèã
 !
DISABLE
)

516 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

521 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

523 
	}
}

538 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

541 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

542 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

543 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

545 i‡(
NewSèã
 !
DISABLE
)

548 
I2Cx
->
CR2
 |
I2C_IT
;

553 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

555 
	}
}

563 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

566 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

568 
I2Cx
->
DR
 = 
D©a
;

569 
	}
}

576 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

579 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

581  (
uöt8_t
)
I2Cx
->
DR
;

582 
	}
}

595 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

598 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

599 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

601 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

604 
Addªss
 |
OAR1_ADD0_Së
;

609 
Addªss
 &
OAR1_ADD0_Re£t
;

612 
I2Cx
->
DR
 = 
Addªss
;

613 
	}
}

630 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

633 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

634 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

636  (*(
__IO
 
uöt16_t
 *)(*((__IO 
uöt32_t
 *)&
I2Cx
Ë+ 
I2C_Regi°î
));

637 
	}
}

646 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

649 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

650 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

651 i‡(
NewSèã
 !
DISABLE
)

654 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

659 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

661 
	}
}

672 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

675 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

676 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

677 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

680 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

685 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

687 
	}
}

696 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

701 i‡(
NewSèã
 !
DISABLE
)

704 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

709 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

711 
	}
}

724 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

727 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

728 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

729 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

732 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

737 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

739 
	}
}

749 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

752 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

753 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

754 i‡(
NewSèã
 !
DISABLE
)

757 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

762 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

764 
	}
}

771 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

774 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

776  ((
I2Cx
->
SR2
) >> 8);

777 
	}
}

786 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

789 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

790 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

791 i‡(
NewSèã
 !
DISABLE
)

794 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

799 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

801 
	}
}

810 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

813 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

814 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

815 i‡(
NewSèã
 =
DISABLE
)

818 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

823 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

825 
	}
}

836 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

839 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

840 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

841 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

844 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

849 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

851 
	}
}

858 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

860 
uöt32_t
 
œ°evít
 = 0;

861 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

863 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

865 
Êag1
 = 
I2Cx
->
SR1
;

866 
Êag2
 = 
I2Cx
->
SR2
;

867 
Êag2
 = flag2 << 16;

869 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

871  
œ°evít
;

872 
	}
}

894 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

896 
uöt32_t
 
œ°evít
 = 0;

897 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

898 
Eº‹Sètus
 
°©us
 = 
ERROR
;

900 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

901 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

903 
Êag1
 = 
I2Cx
->
SR1
;

904 
Êag2
 = 
I2Cx
->
SR2
;

905 
Êag2
 = flag2 << 16;

907 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

909 i‡(
œ°evít
 =
I2C_EVENT
 )

912 
°©us
 = 
SUCCESS
;

917 
°©us
 = 
ERROR
;

920  
°©us
;

921 
	}
}

952 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

954 
FœgSètus
 
bô°©us
 = 
RESET
;

955 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

957 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

958 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

960 
i2cxba£
 = (*(
uöt32_t
*)&(
I2Cx
));

963 
i2¸eg
 = 
I2C_FLAG
 >> 28;

966 
I2C_FLAG
 &
FLAG_Mask
;

968 if(
i2¸eg
 != 0)

971 
i2cxba£
 += 0x14;

976 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

978 
i2cxba£
 += 0x18;

981 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

984 
bô°©us
 = 
SET
;

989 
bô°©us
 = 
RESET
;

993  
bô°©us
;

994 
	}
}

1027 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1029 
uöt32_t
 
Êagpos
 = 0;

1031 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1032 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1034 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1036 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1037 
	}
}

1061 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1063 
ITSètus
 
bô°©us
 = 
RESET
;

1064 
uöt32_t
 
íabÀ°©us
 = 0;

1066 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1067 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1069 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1071 
I2C_IT
 &
FLAG_Mask
;

1073 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1076 
bô°©us
 = 
SET
;

1081 
bô°©us
 = 
RESET
;

1084  
bô°©us
;

1085 
	}
}

1118 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1120 
uöt32_t
 
Êagpos
 = 0;

1122 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1123 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1125 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1127 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1128 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_it.c

24 
	~"°m32f10x_ô.h
"

29 
vu32
 
	gL⁄gKeyTime
;

30 
vu32
 
	gFa°AddTime
;

32 
vu32
 
	gMíuTime
;

33 
vu32
 
	gLogoTime
;

34 
vu32
 
	gAutoTime
;

35 
vu32
 
	gCom¥ess‹TimeCou¡
;

57 
	$NMI_H™dÀr
()

59 
	}
}

66 
	$H¨dFau…_H™dÀr
()

72 
	}
}

79 
	$MemM™age_H™dÀr
()

85 
	}
}

92 
	$BusFau…_H™dÀr
()

98 
	}
}

105 
	$UßgeFau…_H™dÀr
()

111 
	}
}

118 
	$SVC_H™dÀr
()

120 
	}
}

127 
	$DebugM⁄_H™dÀr
()

129 
	}
}

136 
	$PídSV_H™dÀr
()

138 
	}
}

145 
	$SysTick_H™dÀr
()

147 
	}
}

163 
	$TIM2_IRQH™dÀr
()

165 i‡–
	`TIM_GëITSètus
(
TIM2
 , 
TIM_IT_Upd©e
Ë!
RESET
 )

167 
	`TIM_CÀ¨ITPídögBô
(
TIM2
 , 
TIM_FLAG_Upd©e
);

168 
L⁄gKeyTime
++;

169 
Fa°AddTime
++;

170 
MíuTime
++;

171 
LogoTime
++;

172 
AutoTime
++;

173 
Com¥ess‹TimeCou¡
++;

174 if(
Com¥ess‹TimeCou¡
>=(
Com¥ess‹DñayTime
+2))

175 
Com¥ess‹TimeCou¡
=(
Com¥ess‹DñayTime
+2);

177 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_iwdg.c

22 
	~"°m32f10x_iwdg.h
"

48 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

49 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

95 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

98 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

99 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

100 
	}
}

115 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

118 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

119 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

120 
	}
}

128 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

131 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

132 
IWDG
->
RLR
 = 
Rñﬂd
;

133 
	}
}

141 
	$IWDG_RñﬂdCou¡î
()

143 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

144 
	}
}

152 
	$IWDG_E«bÀ
()

154 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

155 
	}
}

165 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

167 
FœgSètus
 
bô°©us
 = 
RESET
;

169 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

170 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

172 
bô°©us
 = 
SET
;

176 
bô°©us
 = 
RESET
;

179  
bô°©us
;

180 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_pwr.c

22 
	~"°m32f10x_pwr.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

64 
	#EWUP_BôNumbî
 0x08

	)

65 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

70 
	#CR_PDDS_Së
 ((
uöt32_t
)0x00000002)

	)

71 
	#CR_DS_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_CWUF_Së
 ((
uöt32_t
)0x00000004)

	)

73 
	#CR_PLS_Mask
 ((
uöt32_t
)0xFFFFFF1F)

	)

78 
	#SCB_SysCål
 ((
uöt32_t
)0xE000ED10)

	)

81 
	#SysCål_SLEEPDEEP_Së
 ((
uöt32_t
)0x00000004)

	)

120 
	$PWR_DeInô
()

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

124 
	}
}

132 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

136 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

137 
	}
}

145 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

149 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

150 
	}
}

167 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

169 
uöt32_t
 
tm¥eg
 = 0;

171 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

172 
tm¥eg
 = 
PWR
->
CR
;

174 
tm¥eg
 &
CR_PLS_Mask
;

176 
tm¥eg
 |
PWR_PVDLevñ
;

178 
PWR
->
CR
 = 
tm¥eg
;

179 
	}
}

187 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

190 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

208 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

210 
uöt32_t
 
tm¥eg
 = 0;

212 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

213 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

216 
tm¥eg
 = 
PWR
->
CR
;

218 
tm¥eg
 &
CR_DS_Mask
;

220 
tm¥eg
 |
PWR_Reguœt‹
;

222 
PWR
->
CR
 = 
tm¥eg
;

224 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

227 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

230 
	`__WFI
();

235 
	`__WFE
();

237 
	}
}

244 
	$PWR_E¡îSTANDBYMode
()

247 
PWR
->
CR
 |
CR_CWUF_Së
;

249 
PWR
->
CR
 |
CR_PDDS_Së
;

251 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

253 #i‡
	`deföed
 ( 
__CC_ARM
 )

254 
	`__f‹˚_°‹es
();

257 
	`__WFI
();

258 
	}
}

269 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

271 
FœgSètus
 
bô°©us
 = 
RESET
;

273 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

275 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

277 
bô°©us
 = 
SET
;

281 
bô°©us
 = 
RESET
;

284  
bô°©us
;

285 
	}
}

295 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

298 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

300 
PWR
->
CR
 |
PWR_FLAG
 << 2;

301 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_rcc.c

22 
	~"°m32f10x_rcc.h
"

46 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

52 
	#HSION_BôNumbî
 0x00

	)

53 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

56 
	#PLLON_BôNumbî
 0x18

	)

57 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

60 
	#CSSON_BôNumbî
 0x13

	)

61 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

66 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

67 
	#USBPRE_BôNumbî
 0x16

	)

68 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

73 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

74 
	#RTCEN_BôNumbî
 0x0F

	)

75 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

78 
	#BDRST_BôNumbî
 0x10

	)

79 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

84 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

85 
	#LSION_BôNumbî
 0x00

	)

86 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

91 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

92 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

93 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

94 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

95 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

98 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

99 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

100 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

101 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

102 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

103 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

104 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

105 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

106 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

107 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

108 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

109 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

110 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

111 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

114 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

117 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

120 
	#HSI_VÆue
 ((
uöt32_t
)8000000)

	)

123 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

126 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

129 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

132 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

134 #i‚de‡
HSESèπUp_TimeOut


136 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500)

	)

155 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

156 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

179 
	$RCC_DeInô
()

182 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

184 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

187 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

189 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

191 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

193 
RCC
->
CIR
 = 0x00000000;

194 
	}
}

208 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

211 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

214 
RCC
->
CR
 &
CR_HSEON_Re£t
;

216 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

218 
RCC_HSE
)

220 
RCC_HSE_ON
:

222 
RCC
->
CR
 |
CR_HSEON_Së
;

225 
RCC_HSE_By∑ss
:

227 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

233 
	}
}

242 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

244 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

245 
Eº‹Sètus
 
°©us
 = 
ERROR
;

246 
FœgSètus
 
HSESètus
 = 
RESET
;

251 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

252 
SèπUpCou¡î
++;

253 } (
HSESètus
 =
RESET
Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

254 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

256 
°©us
 = 
SUCCESS
;

260 
°©us
 = 
ERROR
;

262  (
°©us
);

263 
	}
}

272 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

274 
uöt32_t
 
tm¥eg
 = 0;

276 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

277 
tm¥eg
 = 
RCC
->
CR
;

279 
tm¥eg
 &
CR_HSITRIM_Mask
;

281 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

283 
RCC
->
CR
 = 
tm¥eg
;

284 
	}
}

294 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

298 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

299 
	}
}

316 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

318 
uöt32_t
 
tm¥eg
 = 0;

320 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

321 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

322 
tm¥eg
 = 
RCC
->
CFGR
;

324 
tm¥eg
 &
CFGR_PLL_Mask
;

326 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

328 
RCC
->
CFGR
 = 
tm¥eg
;

329 
	}
}

338 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

341 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

342 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

343 
	}
}

354 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

356 
uöt32_t
 
tm¥eg
 = 0;

358 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

359 
tm¥eg
 = 
RCC
->
CFGR
;

361 
tm¥eg
 &
CFGR_SW_Mask
;

363 
tm¥eg
 |
RCC_SYSCLKSour˚
;

365 
RCC
->
CFGR
 = 
tm¥eg
;

366 
	}
}

377 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

379  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

380 
	}
}

398 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

400 
uöt32_t
 
tm¥eg
 = 0;

402 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

403 
tm¥eg
 = 
RCC
->
CFGR
;

405 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

407 
tm¥eg
 |
RCC_SYSCLK
;

409 
RCC
->
CFGR
 = 
tm¥eg
;

410 
	}
}

424 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

426 
uöt32_t
 
tm¥eg
 = 0;

428 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

429 
tm¥eg
 = 
RCC
->
CFGR
;

431 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

433 
tm¥eg
 |
RCC_HCLK
;

435 
RCC
->
CFGR
 = 
tm¥eg
;

436 
	}
}

450 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

452 
uöt32_t
 
tm¥eg
 = 0;

454 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

455 
tm¥eg
 = 
RCC
->
CFGR
;

457 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

459 
tm¥eg
 |
RCC_HCLK
 << 3;

461 
RCC
->
CFGR
 = 
tm¥eg
;

462 
	}
}

477 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

480 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

481 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

482 i‡(
NewSèã
 !
DISABLE
)

485 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

490 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

492 
	}
}

504 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

507 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

508 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

509 
	}
}

522 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

524 
uöt32_t
 
tm¥eg
 = 0;

526 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

527 
tm¥eg
 = 
RCC
->
CFGR
;

529 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

531 
tm¥eg
 |
RCC_PCLK2
;

533 
RCC
->
CFGR
 = 
tm¥eg
;

534 
	}
}

546 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

549 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

552 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

554 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

556 
RCC_LSE
)

558 
RCC_LSE_ON
:

560 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

563 
RCC_LSE_By∑ss
:

565 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

571 
	}
}

580 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

583 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

584 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

585 
	}
}

599 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

602 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

604 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

605 
	}
}

615 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

618 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

620 
	}
}

628 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

630 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

632 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

633 
tmp
)

636 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

639 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
;

643 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

644 
∂lmuŒ
 = (Öllmull >> 18) + 2;

645 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

646 i‡(
∂lsour˚
 == 0x00)

648 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

652 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

654 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

658 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
 * 
∂lmuŒ
;

663 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

668 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

669 
tmp
 =Åmp >> 4;

670 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

672 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

674 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

675 
tmp
 =Åmp >> 8;

676 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

678 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

680 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

681 
tmp
 =Åmp >> 11;

682 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

684 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

686 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

687 
tmp
 =Åmp >> 14;

688 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

690 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

691 
	}
}

709 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 i‡(
NewSèã
 !
DISABLE
)

716 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

720 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

722 
	}
}

739 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

742 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

743 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

744 i‡(
NewSèã
 !
DISABLE
)

746 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

750 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

752 
	}
}

770 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

773 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

774 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

775 i‡(
NewSèã
 !
DISABLE
)

777 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

781 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

783 
	}
}

799 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

802 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

803 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

804 i‡(
NewSèã
 !
DISABLE
)

806 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

810 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

812 
	}
}

829 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

832 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

833 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

834 i‡(
NewSèã
 !
DISABLE
)

836 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

840 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

842 
	}
}

850 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

854 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

855 
	}
}

863 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

866 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

867 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

868 
	}
}

881 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

884 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

886 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

887 
	}
}

906 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

908 
uöt32_t
 
tmp
 = 0;

909 
uöt32_t
 
°©u§eg
 = 0;

910 
FœgSètus
 
bô°©us
 = 
RESET
;

912 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

914 
tmp
 = 
RCC_FLAG
 >> 5;

915 i‡(
tmp
 == 1)

917 
°©u§eg
 = 
RCC
->
CR
;

919 i‡(
tmp
 == 2)

921 
°©u§eg
 = 
RCC
->
BDCR
;

925 
°©u§eg
 = 
RCC
->
CSR
;

928 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

929 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

931 
bô°©us
 = 
SET
;

935 
bô°©us
 = 
RESET
;

938  
bô°©us
;

939 
	}
}

949 
	$RCC_CÀ¨Fœg
()

952 
RCC
->
CSR
 |
CSR_RMVF_Së
;

953 
	}
}

967 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

969 
ITSètus
 
bô°©us
 = 
RESET
;

971 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

973 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

975 
bô°©us
 = 
SET
;

979 
bô°©us
 = 
RESET
;

982  
bô°©us
;

983 
	}
}

997 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1000 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1003 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1004 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_rtc.c

22 
	~"°m32f10x_πc.h
"

44 
	#CRL_CNF_Së
 ((
uöt16_t
)0x0010Ë

	)

45 
	#CRL_CNF_Re£t
 ((
uöt16_t
)0xFFEFË

	)

46 
	#RTC_LSB_Mask
 ((
uöt32_t
)0x0000FFFFË

	)

47 
	#PRLH_MSB_Mask
 ((
uöt32_t
)0x000F0000Ë

	)

93 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

96 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

97 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

99 i‡(
NewSèã
 !
DISABLE
)

101 
RTC
->
CRH
 |
RTC_IT
;

105 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

107 
	}
}

114 
	$RTC_E¡îC⁄figMode
()

117 
RTC
->
CRL
 |
CRL_CNF_Së
;

118 
	}
}

125 
	$RTC_ExôC⁄figMode
()

128 
RTC
->
CRL
 &
CRL_CNF_Re£t
;

129 
	}
}

136 
uöt32_t
 
	$RTC_GëCou¡î
()

138 
uöt16_t
 
tmp
 = 0;

139 
tmp
 = 
RTC
->
CNTL
;

140  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

141 
	}
}

148 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

150 
	`RTC_E¡îC⁄figMode
();

152 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

154 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_Mask
);

155 
	`RTC_ExôC⁄figMode
();

156 
	}
}

163 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

166 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

168 
	`RTC_E¡îC⁄figMode
();

170 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_Mask
) >> 16;

172 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_Mask
);

173 
	`RTC_ExôC⁄figMode
();

174 
	}
}

181 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

183 
	`RTC_E¡îC⁄figMode
();

185 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

187 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_Mask
);

188 
	`RTC_ExôC⁄figMode
();

189 
	}
}

196 
uöt32_t
 
	$RTC_GëDividî
()

198 
uöt32_t
 
tmp
 = 0x00;

199 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

200 
tmp
 |
RTC
->
DIVL
;

201  
tmp
;

202 
	}
}

210 
	$RTC_WaôF‹La°Task
()

213 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

216 
	}
}

226 
	$RTC_WaôF‹Synchro
()

229 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

231 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

234 
	}
}

247 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

249 
FœgSètus
 
bô°©us
 = 
RESET
;

252 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

254 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

256 
bô°©us
 = 
SET
;

260 
bô°©us
 = 
RESET
;

262  
bô°©us
;

263 
	}
}

276 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

279 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

282 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

283 
	}
}

294 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

296 
ITSètus
 
bô°©us
 = 
RESET
;

298 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

300 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

301 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

303 
bô°©us
 = 
SET
;

307 
bô°©us
 = 
RESET
;

309  
bô°©us
;

310 
	}
}

321 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

324 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

327 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

328 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_sdio.c

22 
	~"°m32f10x_sdio.h
"

23 
	~"°m32f10x_rcc.h
"

39 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

44 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

45 
	#CLKEN_BôNumbî
 0x08

	)

46 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

51 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

52 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

53 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

56 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

57 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

60 
	#NIEN_BôNumbî
 0x0D

	)

61 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

64 
	#ATACMD_BôNumbî
 0x0E

	)

65 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

70 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

71 
	#DMAEN_BôNumbî
 0x03

	)

72 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

75 
	#RWSTART_BôNumbî
 0x08

	)

76 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

79 
	#RWSTOP_BôNumbî
 0x09

	)

80 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

83 
	#RWMOD_BôNumbî
 0x0A

	)

84 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

87 
	#SDIOEN_BôNumbî
 0x0B

	)

88 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

95 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

100 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

105 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

110 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

113 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

161 
	$SDIO_DeInô
()

163 
SDIO
->
POWER
 = 0x00000000;

164 
SDIO
->
CLKCR
 = 0x00000000;

165 
SDIO
->
ARG
 = 0x00000000;

166 
SDIO
->
CMD
 = 0x00000000;

167 
SDIO
->
DTIMER
 = 0x00000000;

168 
SDIO
->
DLEN
 = 0x00000000;

169 
SDIO
->
DCTRL
 = 0x00000000;

170 
SDIO
->
ICR
 = 0x00C007FF;

171 
SDIO
->
MASK
 = 0x00000000;

172 
	}
}

182 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

184 
uöt32_t
 
tm¥eg
 = 0;

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

188 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

189 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

190 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

191 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

195 
tm¥eg
 = 
SDIO
->
CLKCR
;

198 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

206 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

207 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

208 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

211 
SDIO
->
CLKCR
 = 
tm¥eg
;

212 
	}
}

220 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

223 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

224 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

225 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

226 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

227 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

228 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

229 
	}
}

237 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

242 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

243 
	}
}

253 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

256 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

258 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

259 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

260 
	}
}

271 
uöt32_t
 
	$SDIO_GëPowîSèã
()

273  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

274 
	}
}

311 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

314 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

315 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

317 i‡(
NewSèã
 !
DISABLE
)

320 
SDIO
->
MASK
 |
SDIO_IT
;

325 
SDIO
->
MASK
 &~
SDIO_IT
;

327 
	}
}

335 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

340 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

341 
	}
}

351 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

353 
uöt32_t
 
tm¥eg
 = 0;

356 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

357 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

358 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

359 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

363 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

367 
tm¥eg
 = 
SDIO
->
CMD
;

369 
tm¥eg
 &
CMD_CLEAR_MASK
;

374 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


375 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

378 
SDIO
->
CMD
 = 
tm¥eg
;

379 
	}
}

387 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

390 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

391 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

392 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

393 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

394 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

395 
	}
}

403 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

405  (
uöt8_t
)(
SDIO
->
RESPCMD
);

406 
	}
}

418 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

421 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

423  (*(
__IO
 
uöt32_t
 *)(
SDIO_RESP_ADDR
 + 
SDIO_RESP
));

424 
	}
}

434 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

440 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

441 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

442 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

443 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

447 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

451 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

455 
tm¥eg
 = 
SDIO
->
DCTRL
;

457 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

462 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


463 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

466 
SDIO
->
DCTRL
 = 
tm¥eg
;

467 
	}
}

475 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

478 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

479 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

480 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

481 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

482 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

483 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

484 
	}
}

491 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

493  
SDIO
->
DCOUNT
;

494 
	}
}

501 
uöt32_t
 
	$SDIO_RódD©a
()

503  
SDIO
->
FIFO
;

504 
	}
}

511 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

513 
SDIO
->
FIFO
 = 
D©a
;

514 
	}
}

522 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

524  
SDIO
->
FIFOCNT
;

525 
	}
}

533 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

536 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

538 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

539 
	}
}

547 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

552 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

553 
	}
}

563 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

566 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

568 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

569 
	}
}

577 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

580 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

582 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

583 
	}
}

591 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

594 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

596 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

597 
	}
}

605 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

611 
	}
}

619 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

622 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

624 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

625 
	}
}

633 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

639 
	}
}

672 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

674 
FœgSètus
 
bô°©us
 = 
RESET
;

677 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

679 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

681 
bô°©us
 = 
SET
;

685 
bô°©us
 = 
RESET
;

687  
bô°©us
;

688 
	}
}

710 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

713 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

715 
SDIO
->
ICR
 = 
SDIO_FLAG
;

716 
	}
}

750 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

752 
ITSètus
 
bô°©us
 = 
RESET
;

755 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

756 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

758 
bô°©us
 = 
SET
;

762 
bô°©us
 = 
RESET
;

764  
bô°©us
;

765 
	}
}

786 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

789 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

791 
SDIO
->
ICR
 = 
SDIO_IT
;

792 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_spi.c

22 
	~"°m32f10x_•i.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

49 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

52 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

53 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

56 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

59 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

60 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

63 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

64 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

67 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

68 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

71 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

72 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

112 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

115 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

117 *(
uöt32_t
*)&
SPIx
)

119 
SPI1_BASE
:

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

123 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

125 
SPI2_BASE
:

127 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

129 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

131 
SPI3_BASE
:

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

140 
	}
}

151 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

153 
uöt16_t
 
tm¥eg
 = 0;

156 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

159 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

160 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

161 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

162 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

163 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

164 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

165 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

166 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

167 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

170 
tm¥eg
 = 
SPIx
->
CR1
;

172 
tm¥eg
 &
CR1_CLEAR_Mask
;

181 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

182 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

183 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

184 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

186 
SPIx
->
CR1
 = 
tm¥eg
;

189 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

192 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

193 
	}
}

205 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

207 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

208 
uöt32_t
 
tmp
 = 0;

209 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

212 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

213 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

214 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

215 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

216 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

217 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

218 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

221 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

222 
SPIx
->
I2SPR
 = 0x0002;

225 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

228 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

230 
i2sodd
 = (
uöt16_t
)0;

231 
i2sdiv
 = (
uöt16_t
)2;

237 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

240 
∑ckëÀngth
 = 1;

245 
∑ckëÀngth
 = 2;

248 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

251 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

254 
tmp
 = (
uöt16_t
)(((10 * 
RCC_Clocks
.
SYSCLK_Fªquícy
Ë/ (256 * 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

259 
tmp
 = (
uöt16_t
)(((10 * 
RCC_Clocks
.
SYSCLK_Fªquícy
Ë/ (32 * 
∑ckëÀngth
 * 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

263 
tmp
 =Åmp/10;

266 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

269 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

272 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

276 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

279 
i2sdiv
 = 2;

280 
i2sodd
 = 0;

283 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | 
i2sodd
 | 
I2S_InôSåu˘
->
I2S_MCLKOuçut
);

286 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | 
I2S_InôSåu˘
->
I2S_Mode
 | \

287 
I2S_InôSåu˘
->
I2S_Sènd¨d
 | I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

288 
I2S_InôSåu˘
->
I2S_CPOL
);

291 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

292 
	}
}

300 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

304 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

306 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

308 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

310 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

312 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

314 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

316 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

318 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

320 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

321 
	}
}

329 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

333 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

336 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

339 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

342 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

345 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

348 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

349 
	}
}

358 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

361 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

362 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

363 i‡(
NewSèã
 !
DISABLE
)

366 
SPIx
->
CR1
 |
CR1_SPE_Së
;

371 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

373 
	}
}

382 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

385 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

386 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

387 i‡(
NewSèã
 !
DISABLE
)

390 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

395 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

397 
	}
}

414 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

416 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

418 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

419 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

420 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

422 
ôpos
 = 
SPI_I2S_IT
 >> 4;

424 
ômask
 = (
uöt16_t
)((uöt16_t)1 << 
ôpos
);

425 i‡(
NewSèã
 !
DISABLE
)

428 
SPIx
->
CR2
 |
ômask
;

433 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

435 
	}
}

452 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

455 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

456 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

457 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

458 i‡(
NewSèã
 !
DISABLE
)

461 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

466 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

468 
	}
}

478 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

481 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

484 
SPIx
->
DR
 = 
D©a
;

485 
	}
}

494 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

497 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

500  
SPIx
->
DR
;

501 
	}
}

513 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

516 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

517 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

518 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

521 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

526 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

528 
	}
}

537 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

541 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

550 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

552 
	}
}

563 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

566 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

567 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

569 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

571 
SPIx
->
CR1
 |
SPI_D©aSize
;

572 
	}
}

579 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

582 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

585 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

586 
	}
}

596 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

599 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

600 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

601 i‡(
NewSèã
 !
DISABLE
)

604 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

609 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

611 
	}
}

623 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

625 
uöt16_t
 
¸¸eg
 = 0;

627 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

628 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

629 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

632 
¸¸eg
 = 
SPIx
->
TXCRCR
;

637 
¸¸eg
 = 
SPIx
->
RXCRCR
;

640  
¸¸eg
;

641 
	}
}

648 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

651 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

654  
SPIx
->
CRCPR
;

655 
	}
}

668 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

671 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

672 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

673 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

676 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

681 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

683 
	}
}

702 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

704 
FœgSètus
 
bô°©us
 = 
RESET
;

706 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

707 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

709 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

712 
bô°©us
 = 
SET
;

717 
bô°©us
 = 
RESET
;

720  
bô°©us
;

721 
	}
}

740 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

743 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

744 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

747 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

748 
	}
}

765 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

767 
ITSètus
 
bô°©us
 = 
RESET
;

768 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

770 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

771 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

773 
ôpos
 = (
uöt16_t
)((uöt16_t)0x01 << (
SPI_I2S_IT
 & (
uöt8_t
)0x0F));

775 
ômask
 = 
SPI_I2S_IT
 >> 4;

777 
ômask
 = (
uöt16_t
)((uint16_t)0x01 << itmask);

779 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

781 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

784 
bô°©us
 = 
SET
;

789 
bô°©us
 = 
RESET
;

792  
bô°©us
;

793 
	}
}

813 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

815 
uöt16_t
 
ôpos
 = 0;

817 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

818 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

820 
ôpos
 = (
uöt16_t
)((uöt16_t)0x01 << (
SPI_I2S_IT
 & (
uöt8_t
)0x0F));

822 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

823 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_tim.c

22 
	~"°m32f10x_tim.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_CEN_Së
 ((
uöt16_t
)0x0001)

	)

48 
	#CR1_CEN_Re£t
 ((
uöt16_t
)0x03FE)

	)

49 
	#CR1_UDIS_Së
 ((
uöt16_t
)0x0002)

	)

50 
	#CR1_UDIS_Re£t
 ((
uöt16_t
)0x03FD)

	)

51 
	#CR1_URS_Së
 ((
uöt16_t
)0x0004)

	)

52 
	#CR1_URS_Re£t
 ((
uöt16_t
)0x03FB)

	)

53 
	#CR1_OPM_Re£t
 ((
uöt16_t
)0x03F7)

	)

54 
	#CR1_Cou¡îMode_Mask
 ((
uöt16_t
)0x038F)

	)

55 
	#CR1_ARPE_Së
 ((
uöt16_t
)0x0080)

	)

56 
	#CR1_ARPE_Re£t
 ((
uöt16_t
)0x037F)

	)

57 
	#CR1_CKD_Mask
 ((
uöt16_t
)0x00FF)

	)

58 
	#CR2_CCPC_Së
 ((
uöt16_t
)0x0001)

	)

59 
	#CR2_CCPC_Re£t
 ((
uöt16_t
)0xFFFE)

	)

60 
	#CR2_CCUS_Së
 ((
uöt16_t
)0x0004)

	)

61 
	#CR2_CCUS_Re£t
 ((
uöt16_t
)0xFFFB)

	)

62 
	#CR2_CCDS_Së
 ((
uöt16_t
)0x0008)

	)

63 
	#CR2_CCDS_Re£t
 ((
uöt16_t
)0xFFF7)

	)

64 
	#CR2_MMS_Mask
 ((
uöt16_t
)0xFF8F)

	)

65 
	#CR2_TI1S_Së
 ((
uöt16_t
)0x0080)

	)

66 
	#CR2_TI1S_Re£t
 ((
uöt16_t
)0xFF7F)

	)

67 
	#CR2_OIS1_Re£t
 ((
uöt16_t
)0x7EFF)

	)

68 
	#CR2_OIS1N_Re£t
 ((
uöt16_t
)0x7DFF)

	)

69 
	#CR2_OIS2_Re£t
 ((
uöt16_t
)0x7BFF)

	)

70 
	#CR2_OIS2N_Re£t
 ((
uöt16_t
)0x77FF)

	)

71 
	#CR2_OIS3_Re£t
 ((
uöt16_t
)0x6FFF)

	)

72 
	#CR2_OIS3N_Re£t
 ((
uöt16_t
)0x5FFF)

	)

73 
	#CR2_OIS4_Re£t
 ((
uöt16_t
)0x3FFF)

	)

74 
	#SMCR_SMS_Mask
 ((
uöt16_t
)0xFFF8)

	)

75 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

76 
	#SMCR_TS_Mask
 ((
uöt16_t
)0xFF8F)

	)

77 
	#SMCR_MSM_Re£t
 ((
uöt16_t
)0xFF7F)

	)

78 
	#SMCR_ECE_Së
 ((
uöt16_t
)0x4000)

	)

79 
	#CCMR_CC13S_Mask
 ((
uöt16_t
)0xFFFC)

	)

80 
	#CCMR_CC24S_Mask
 ((
uöt16_t
)0xFCFF)

	)

81 
	#CCMR_TI13Dúe˘_Së
 ((
uöt16_t
)0x0001)

	)

82 
	#CCMR_TI24Dúe˘_Së
 ((
uöt16_t
)0x0100)

	)

83 
	#CCMR_OC13FE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

84 
	#CCMR_OC24FE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

85 
	#CCMR_OC13PE_Re£t
 ((
uöt16_t
)0xFFF7)

	)

86 
	#CCMR_OC24PE_Re£t
 ((
uöt16_t
)0xF7FF)

	)

87 
	#CCMR_OC13M_Mask
 ((
uöt16_t
)0xFF8F)

	)

88 
	#CCMR_OC24M_Mask
 ((
uöt16_t
)0x8FFF)

	)

89 
	#CCMR_OC13CE_Re£t
 ((
uöt16_t
)0xFF7F)

	)

90 
	#CCMR_OC24CE_Re£t
 ((
uöt16_t
)0x7FFF)

	)

91 
	#CCMR_IC13PSC_Mask
 ((
uöt16_t
)0xFFF3)

	)

92 
	#CCMR_IC24PSC_Mask
 ((
uöt16_t
)0xF3FF)

	)

93 
	#CCMR_IC13F_Mask
 ((
uöt16_t
)0xFF0F)

	)

94 
	#CCMR_IC24F_Mask
 ((
uöt16_t
)0x0FFF)

	)

95 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

96 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

97 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

98 
	#CCER_CC1P_Re£t
 ((
uöt16_t
)0xFFFD)

	)

99 
	#CCER_CC2P_Re£t
 ((
uöt16_t
)0xFFDF)

	)

100 
	#CCER_CC3P_Re£t
 ((
uöt16_t
)0xFDFF)

	)

101 
	#CCER_CC4P_Re£t
 ((
uöt16_t
)0xDFFF)

	)

102 
	#CCER_CC1NP_Re£t
 ((
uöt16_t
)0xFFF7)

	)

103 
	#CCER_CC2NP_Re£t
 ((
uöt16_t
)0xFF7F)

	)

104 
	#CCER_CC3NP_Re£t
 ((
uöt16_t
)0xF7FF)

	)

105 
	#CCER_CC1E_Së
 ((
uöt16_t
)0x0001)

	)

106 
	#CCER_CC1E_Re£t
 ((
uöt16_t
)0xFFFE)

	)

107 
	#CCER_CC1NE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

108 
	#CCER_CC2E_Së
 ((
uöt16_t
)0x0010)

	)

109 
	#CCER_CC2E_Re£t
 ((
uöt16_t
)0xFFEF)

	)

110 
	#CCER_CC2NE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

111 
	#CCER_CC3E_Së
 ((
uöt16_t
)0x0100)

	)

112 
	#CCER_CC3E_Re£t
 ((
uöt16_t
)0xFEFF)

	)

113 
	#CCER_CC3NE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

114 
	#CCER_CC4E_Së
 ((
uöt16_t
)0x1000)

	)

115 
	#CCER_CC4E_Re£t
 ((
uöt16_t
)0xEFFF)

	)

116 
	#BDTR_MOE_Së
 ((
uöt16_t
)0x8000)

	)

117 
	#BDTR_MOE_Re£t
 ((
uöt16_t
)0x7FFF)

	)

142 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

143 
uöt16_t
 
TIM_ICFûãr
);

144 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

145 
uöt16_t
 
TIM_ICFûãr
);

146 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

147 
uöt16_t
 
TIM_ICFûãr
);

148 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

149 
uöt16_t
 
TIM_ICFûãr
);

188 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

191 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

193 *(
uöt32_t
*)&
TIMx
)

195 
TIM1_BASE
:

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

197 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

200 
TIM2_BASE
:

201 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

202 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

205 
TIM3_BASE
:

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

207 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

210 
TIM4_BASE
:

211 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

215 
TIM5_BASE
:

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

220 
TIM6_BASE
:

221 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

225 
TIM7_BASE
:

226 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

230 
TIM8_BASE
:

231 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

238 
	}
}

250 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

253 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

254 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

255 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

257 
TIMx
->
CR1
 &
CR1_CKD_Mask
 & 
CR1_Cou¡îMode_Mask
;

258 
TIMx
->
CR1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 |

259 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

262 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

265 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

267 i‡(((*(
uöt32_t
*)&
TIMx
Ë=
TIM1_BASE
Ë|| ((*(uöt32_t*)&TIMxË=
TIM8_BASE
))

270 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

274 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

275 
	}
}

287 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

289 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

292 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

293 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

294 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

295 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

297 
TIMx
->
CCER
 &
CCER_CC1E_Re£t
;

300 
tmpc˚r
 = 
TIMx
->
CCER
;

302 
tmp¸2
 = 
TIMx
->
CR2
;

305 
tmpccmrx
 = 
TIMx
->
CCMR1
;

308 
tmpccmrx
 &
CCMR_OC13M_Mask
;

311 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

314 
tmpc˚r
 &
CCER_CC1P_Re£t
;

316 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

319 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

322 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

324 if((*(
uöt32_t
*)&
TIMx
 =
TIM1_BASE
Ë|| (*(uöt32_t*)&TIMx =
TIM8_BASE
))

326 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

327 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

328 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

329 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

332 
tmpc˚r
 &
CCER_CC1NP_Re£t
;

334 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

336 
tmpc˚r
 &
CCER_CC1NE_Re£t
;

339 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

341 
tmp¸2
 &
CR2_OIS1_Re£t
;

342 
tmp¸2
 &
CR2_OIS1N_Re£t
;

344 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

346 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

349 
TIMx
->
CR2
 = 
tmp¸2
;

352 
TIMx
->
CCMR1
 = 
tmpccmrx
;

355 
TIMx
->
CCER
 = 
tmpc˚r
;

356 
	}
}

368 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

370 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

373 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

374 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

375 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

376 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

378 
TIMx
->
CCER
 &
CCER_CC2E_Re£t
;

381 
tmpc˚r
 = 
TIMx
->
CCER
;

383 
tmp¸2
 = 
TIMx
->
CR2
;

386 
tmpccmrx
 = 
TIMx
->
CCMR1
;

389 
tmpccmrx
 &
CCMR_OC24M_Mask
;

392 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

395 
tmpc˚r
 &
CCER_CC2P_Re£t
;

397 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

400 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

403 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

405 if((*(
uöt32_t
*)&
TIMx
 =
TIM1_BASE
Ë|| (*(uöt32_t*)&TIMx =
TIM8_BASE
))

407 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

408 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

409 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

410 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

413 
tmpc˚r
 &
CCER_CC2NP_Re£t
;

415 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

417 
tmpc˚r
 &
CCER_CC2NE_Re£t
;

420 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

422 
tmp¸2
 &
CR2_OIS2_Re£t
;

423 
tmp¸2
 &
CR2_OIS2N_Re£t
;

425 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

427 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

430 
TIMx
->
CR2
 = 
tmp¸2
;

433 
TIMx
->
CCMR1
 = 
tmpccmrx
;

436 
TIMx
->
CCER
 = 
tmpc˚r
;

437 
	}
}

449 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

451 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

454 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

455 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

456 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

457 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

459 
TIMx
->
CCER
 &
CCER_CC3E_Re£t
;

462 
tmpc˚r
 = 
TIMx
->
CCER
;

464 
tmp¸2
 = 
TIMx
->
CR2
;

467 
tmpccmrx
 = 
TIMx
->
CCMR2
;

470 
tmpccmrx
 &
CCMR_OC13M_Mask
;

473 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

476 
tmpc˚r
 &
CCER_CC3P_Re£t
;

478 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

481 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

484 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

486 if((*(
uöt32_t
*)&
TIMx
 =
TIM1_BASE
Ë|| (*(uöt32_t*)&TIMx =
TIM8_BASE
))

488 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

489 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

490 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

491 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

494 
tmpc˚r
 &
CCER_CC3NP_Re£t
;

496 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

498 
tmpc˚r
 &
CCER_CC3NE_Re£t
;

501 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

503 
tmp¸2
 &
CR2_OIS3_Re£t
;

504 
tmp¸2
 &
CR2_OIS3N_Re£t
;

506 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

508 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

511 
TIMx
->
CR2
 = 
tmp¸2
;

514 
TIMx
->
CCMR2
 = 
tmpccmrx
;

517 
TIMx
->
CCER
 = 
tmpc˚r
;

518 
	}
}

530 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

532 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

535 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

536 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

537 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

538 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

540 
TIMx
->
CCER
 &
CCER_CC4E_Re£t
;

543 
tmpc˚r
 = 
TIMx
->
CCER
;

545 
tmp¸2
 = 
TIMx
->
CR2
;

548 
tmpccmrx
 = 
TIMx
->
CCMR2
;

551 
tmpccmrx
 &
CCMR_OC24M_Mask
;

554 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

557 
tmpc˚r
 &
CCER_CC4P_Re£t
;

559 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

562 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

565 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

567 if((*(
uöt32_t
*)&
TIMx
 =
TIM1_BASE
Ë|| (*(uöt32_t*)&TIMx =
TIM8_BASE
))

569 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

571 
tmp¸2
 &
CR2_OIS4_Re£t
;

573 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

576 
TIMx
->
CR2
 = 
tmp¸2
;

579 
TIMx
->
CCMR2
 = 
tmpccmrx
;

582 
TIMx
->
CCER
 = 
tmpc˚r
;

583 
	}
}

595 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

598 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

599 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

600 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

601 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

602 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

603 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

605 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

608 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

617 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

618 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

619 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

621 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

623 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

626 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

627 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

628 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

630 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

635 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

636 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

637 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

639 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

641 
	}
}

654 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

656 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

657 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

659 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

661 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

663 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

667 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

670 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

672 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

676 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

678 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

681 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

682 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

684 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

686 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

688 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

693 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

694 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

696 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

698 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

700 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

702 
	}
}

713 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

716 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

717 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

718 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

719 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

720 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

721 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

722 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

725 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

726 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

727 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

728 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

729 
	}
}

737 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

740 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

741 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

742 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

743 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

744 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

745 
	}
}

753 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

756 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

757 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

758 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

759 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

760 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

761 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

762 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

763 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

764 
	}
}

772 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

775 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

776 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

777 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

778 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

779 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

780 
	}
}

788 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

791 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

792 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

793 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

794 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

795 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

796 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

797 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

798 
	}
}

807 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

810 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

811 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

813 i‡(
NewSèã
 !
DISABLE
)

816 
TIMx
->
CR1
 |
CR1_CEN_Së
;

821 
TIMx
->
CR1
 &
CR1_CEN_Re£t
;

823 
	}
}

832 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

835 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

836 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

837 i‡(
NewSèã
 !
DISABLE
)

840 
TIMx
->
BDTR
 |
BDTR_MOE_Së
;

845 
TIMx
->
BDTR
 &
BDTR_MOE_Re£t
;

847 
	}
}

867 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

870 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

871 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

872 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_IT
((
TIMx
), (
TIM_IT
)));

873 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

875 i‡(
NewSèã
 !
DISABLE
)

878 
TIMx
->
DIER
 |
TIM_IT
;

883 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

885 
	}
}

900 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

903 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

904 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

905 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_EVENT
((
TIMx
), (
TIM_EvítSour˚
)));

907 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

908 
	}
}

928 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

931 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

932 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

933 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

935 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

936 
	}
}

954 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

957 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

958 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

959 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_DMA
(
TIMx
, 
TIM_DMASour˚
));

960 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

962 i‡(
NewSèã
 !
DISABLE
)

965 
TIMx
->
DIER
 |
TIM_DMASour˚
;

970 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

972 
	}
}

980 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

983 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

985 
TIMx
->
SMCR
 &
SMCR_SMS_Mask
;

986 
	}
}

1000 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1003 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1004 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1006 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1008 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1009 
	}
}

1028 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1029 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1032 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1033 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1034 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1035 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1037 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1039 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1043 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1046 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1048 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1049 
	}
}

1069 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1070 
uöt16_t
 
ExtTRGFûãr
)

1072 
uöt16_t
 
tmpsm¸
 = 0;

1074 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1075 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1076 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1077 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1079 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1082 
tmpsm¸
 = 
TIMx
->
SMCR
;

1084 
tmpsm¸
 &
SMCR_SMS_Mask
;

1086 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1088 
tmpsm¸
 &
SMCR_TS_Mask
;

1089 
tmpsm¸
 |
TIM_TS_ETRF
;

1091 
TIMx
->
SMCR
 = 
tmpsm¸
;

1092 
	}
}

1112 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1113 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1116 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1117 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1118 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1119 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1121 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1123 
TIMx
->
SMCR
 |
SMCR_ECE_Së
;

1124 
	}
}

1144 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1145 
uöt16_t
 
ExtTRGFûãr
)

1147 
uöt16_t
 
tmpsm¸
 = 0;

1149 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1150 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1151 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1152 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1153 
tmpsm¸
 = 
TIMx
->
SMCR
;

1155 
tmpsm¸
 &
SMCR_ETR_Mask
;

1157 
tmpsm¸
 |
TIM_ExtTRGPªsˇÀr
 | 
TIM_ExtTRGPﬁ¨ôy
 | (
uöt16_t
)(
ExtTRGFûãr
 << 8);

1159 
TIMx
->
SMCR
 = 
tmpsm¸
;

1160 
	}
}

1174 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1177 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1178 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1180 
TIMx
->
PSC
 = 
PªsˇÀr
;

1182 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1183 
	}
}

1198 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1200 
uöt16_t
 
tmp¸1
 = 0;

1202 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1203 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1204 
tmp¸1
 = 
TIMx
->
CR1
;

1206 
tmp¸1
 &
CR1_Cou¡îMode_Mask
;

1208 
tmp¸1
 |
TIM_Cou¡îMode
;

1210 
TIMx
->
CR1
 = 
tmp¸1
;

1211 
	}
}

1229 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1231 
uöt16_t
 
tmpsm¸
 = 0;

1233 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1234 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1236 
tmpsm¸
 = 
TIMx
->
SMCR
;

1238 
tmpsm¸
 &
SMCR_TS_Mask
;

1240 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1242 
TIMx
->
SMCR
 = 
tmpsm¸
;

1243 
	}
}

1267 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1268 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1270 
uöt16_t
 
tmpsm¸
 = 0;

1271 
uöt16_t
 
tmpccmr1
 = 0;

1272 
uöt16_t
 
tmpc˚r
 = 0;

1275 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1276 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1277 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1278 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1280 
tmpsm¸
 = 
TIMx
->
SMCR
;

1282 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1284 
tmpc˚r
 = 
TIMx
->
CCER
;

1286 
tmpsm¸
 &
SMCR_SMS_Mask
;

1287 
tmpsm¸
 |
TIM_EncodîMode
;

1289 
tmpccmr1
 &
CCMR_CC13S_Mask
 & 
CCMR_CC24S_Mask
;

1290 
tmpccmr1
 |
CCMR_TI13Dúe˘_Së
 | 
CCMR_TI24Dúe˘_Së
;

1292 
tmpc˚r
 &
CCER_CC1P_Re£t
 & 
CCER_CC2P_Re£t
;

1293 
tmpc˚r
 |(
TIM_IC1Pﬁ¨ôy
 | (
uöt16_t
)(
TIM_IC2Pﬁ¨ôy
 << 4));

1295 
TIMx
->
SMCR
 = 
tmpsm¸
;

1297 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1299 
TIMx
->
CCER
 = 
tmpc˚r
;

1300 
	}
}

1314 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1316 
uöt16_t
 
tmpccmr1
 = 0;

1318 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1319 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1320 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1322 
tmpccmr1
 &
CCMR_OC13M_Mask
;

1324 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1326 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1327 
	}
}

1341 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1343 
uöt16_t
 
tmpccmr1
 = 0;

1345 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1346 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1347 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1349 
tmpccmr1
 &
CCMR_OC24M_Mask
;

1351 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1353 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1354 
	}
}

1368 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1370 
uöt16_t
 
tmpccmr2
 = 0;

1372 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1373 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1374 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1376 
tmpccmr2
 &
CCMR_OC13M_Mask
;

1378 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1380 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1381 
	}
}

1395 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1397 
uöt16_t
 
tmpccmr2
 = 0;

1399 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1400 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1401 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1403 
tmpccmr2
 &
CCMR_OC24M_Mask
;

1405 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1407 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1408 
	}
}

1418 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1421 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1423 i‡(
NewSèã
 !
DISABLE
)

1426 
TIMx
->
CR1
 |
CR1_ARPE_Së
;

1431 
TIMx
->
CR1
 &
CR1_ARPE_Re£t
;

1433 
	}
}

1442 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1445 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1447 i‡(
NewSèã
 !
DISABLE
)

1450 
TIMx
->
CR2
 |
CR2_CCUS_Së
;

1455 
TIMx
->
CR2
 &
CR2_CCUS_Re£t
;

1457 
	}
}

1467 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1470 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1471 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1472 i‡(
NewSèã
 !
DISABLE
)

1475 
TIMx
->
CR2
 |
CR2_CCDS_Së
;

1480 
TIMx
->
CR2
 &
CR2_CCDS_Re£t
;

1482 
	}
}

1492 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1495 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1497 i‡(
NewSèã
 !
DISABLE
)

1500 
TIMx
->
CR2
 |
CR2_CCPC_Së
;

1505 
TIMx
->
CR2
 &
CR2_CCPC_Re£t
;

1507 
	}
}

1520 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1522 
uöt16_t
 
tmpccmr1
 = 0;

1524 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1525 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1526 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1528 
tmpccmr1
 &
CCMR_OC13PE_Re£t
;

1530 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1532 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1533 
	}
}

1546 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1548 
uöt16_t
 
tmpccmr1
 = 0;

1550 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1551 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1552 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1554 
tmpccmr1
 &
CCMR_OC24PE_Re£t
;

1556 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1558 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1559 
	}
}

1572 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1574 
uöt16_t
 
tmpccmr2
 = 0;

1576 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1577 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1578 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1580 
tmpccmr2
 &
CCMR_OC13PE_Re£t
;

1582 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1584 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1585 
	}
}

1598 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1600 
uöt16_t
 
tmpccmr2
 = 0;

1602 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1603 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1604 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1606 
tmpccmr2
 &
CCMR_OC24PE_Re£t
;

1608 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1610 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1611 
	}
}

1623 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1625 
uöt16_t
 
tmpccmr1
 = 0;

1627 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1628 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1630 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1632 
tmpccmr1
 &
CCMR_OC13FE_Re£t
;

1634 
tmpccmr1
 |
TIM_OCFa°
;

1636 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1637 
	}
}

1649 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1651 
uöt16_t
 
tmpccmr1
 = 0;

1653 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1654 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1656 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1658 
tmpccmr1
 &
CCMR_OC24FE_Re£t
;

1660 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1662 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1663 
	}
}

1675 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1677 
uöt16_t
 
tmpccmr2
 = 0;

1679 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1680 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1682 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1684 
tmpccmr2
 &
CCMR_OC13FE_Re£t
;

1686 
tmpccmr2
 |
TIM_OCFa°
;

1688 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1689 
	}
}

1701 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1703 
uöt16_t
 
tmpccmr2
 = 0;

1705 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1706 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1708 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1710 
tmpccmr2
 &
CCMR_OC24FE_Re£t
;

1712 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1714 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1715 
	}
}

1727 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1729 
uöt16_t
 
tmpccmr1
 = 0;

1731 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1732 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1733 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1735 
tmpccmr1
 &
CCMR_OC13CE_Re£t
;

1737 
tmpccmr1
 |
TIM_OCCÀ¨
;

1739 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1740 
	}
}

1752 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1754 
uöt16_t
 
tmpccmr1
 = 0;

1756 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1757 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1758 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1760 
tmpccmr1
 &
CCMR_OC24CE_Re£t
;

1762 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1764 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1765 
	}
}

1777 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1779 
uöt16_t
 
tmpccmr2
 = 0;

1781 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1782 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1783 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1785 
tmpccmr2
 &
CCMR_OC13CE_Re£t
;

1787 
tmpccmr2
 |
TIM_OCCÀ¨
;

1789 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1790 
	}
}

1802 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1804 
uöt16_t
 
tmpccmr2
 = 0;

1806 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1807 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1808 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1810 
tmpccmr2
 &
CCMR_OC24CE_Re£t
;

1812 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1814 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1815 
	}
}

1827 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1829 
uöt16_t
 
tmpc˚r
 = 0;

1831 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1832 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1833 
tmpc˚r
 = 
TIMx
->
CCER
;

1835 
tmpc˚r
 &
CCER_CC1P_Re£t
;

1836 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1838 
TIMx
->
CCER
 = 
tmpc˚r
;

1839 
	}
}

1850 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1852 
uöt16_t
 
tmpc˚r
 = 0;

1854 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1855 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1857 
tmpc˚r
 = 
TIMx
->
CCER
;

1859 
tmpc˚r
 &
CCER_CC1NP_Re£t
;

1860 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1862 
TIMx
->
CCER
 = 
tmpc˚r
;

1863 
	}
}

1875 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1877 
uöt16_t
 
tmpc˚r
 = 0;

1879 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1880 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1881 
tmpc˚r
 = 
TIMx
->
CCER
;

1883 
tmpc˚r
 &
CCER_CC2P_Re£t
;

1884 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1886 
TIMx
->
CCER
 = 
tmpc˚r
;

1887 
	}
}

1898 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1900 
uöt16_t
 
tmpc˚r
 = 0;

1902 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1903 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1905 
tmpc˚r
 = 
TIMx
->
CCER
;

1907 
tmpc˚r
 &
CCER_CC2NP_Re£t
;

1908 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1910 
TIMx
->
CCER
 = 
tmpc˚r
;

1911 
	}
}

1923 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1925 
uöt16_t
 
tmpc˚r
 = 0;

1927 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1928 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1929 
tmpc˚r
 = 
TIMx
->
CCER
;

1931 
tmpc˚r
 &
CCER_CC3P_Re£t
;

1932 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1934 
TIMx
->
CCER
 = 
tmpc˚r
;

1935 
	}
}

1946 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1948 
uöt16_t
 
tmpc˚r
 = 0;

1951 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1952 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1954 
tmpc˚r
 = 
TIMx
->
CCER
;

1956 
tmpc˚r
 &
CCER_CC3NP_Re£t
;

1957 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1959 
TIMx
->
CCER
 = 
tmpc˚r
;

1960 
	}
}

1972 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1974 
uöt16_t
 
tmpc˚r
 = 0;

1976 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1977 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1978 
tmpc˚r
 = 
TIMx
->
CCER
;

1980 
tmpc˚r
 &
CCER_CC4P_Re£t
;

1981 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1983 
TIMx
->
CCER
 = 
tmpc˚r
;

1984 
	}
}

2000 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

2003 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2004 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2005 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

2007 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)(
CCER_CCE_Së
 << 
TIM_Ch™√l
)));

2009 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

2010 
	}
}

2024 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2027 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

2028 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2029 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2031 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)(
CCER_CCNE_Së
 << 
TIM_Ch™√l
)));

2033 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2034 
	}
}

2060 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2063 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2064 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2065 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2068 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)(
CCER_CCE_Së
 << 
TIM_Ch™√l
)));

2069 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2072 *((
__IO
 
uöt32_t
 *)((*(uöt32_t*)&
TIMx
Ë+ 
CCMR_Off£t
 + (
TIM_Ch™√l
>>1))Ë&
CCMR_OC13M_Mask
;

2075 *((
__IO
 
uöt32_t
 *)((*(uöt32_t*)&
TIMx
Ë+ 
CCMR_Off£t
 + (
TIM_Ch™√l
>>1))Ë|
TIM_OCMode
;

2080 *((
__IO
 
uöt32_t
 *)((*(uöt32_t*)&
TIMx
Ë+ 
CCMR_Off£t
 + ((
uöt16_t
)(
TIM_Ch™√l
 - 4)>> 1))Ë&
CCMR_OC24M_Mask
;

2083 *((
__IO
 
uöt32_t
 *)((*(uöt32_t*)&
TIMx
Ë+ 
CCMR_Off£t
 + ((
uöt16_t
)(
TIM_Ch™√l
 - 4)>> 1))Ë|(uöt16_t)(
TIM_OCMode
 << 8);

2085 
	}
}

2094 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2097 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2098 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2099 i‡(
NewSèã
 !
DISABLE
)

2102 
TIMx
->
CR1
 |
CR1_UDIS_Së
;

2107 
TIMx
->
CR1
 &
CR1_UDIS_Re£t
;

2109 
	}
}

2120 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2123 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2125 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2128 
TIMx
->
CR1
 |
CR1_URS_Së
;

2133 
TIMx
->
CR1
 &
CR1_URS_Re£t
;

2135 
	}
}

2144 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2147 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2149 i‡(
NewSèã
 !
DISABLE
)

2152 
TIMx
->
CR2
 |
CR2_TI1S_Së
;

2157 
TIMx
->
CR2
 &
CR2_TI1S_Re£t
;

2159 
	}
}

2170 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2173 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2174 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2176 
TIMx
->
CR1
 &
CR1_OPM_Re£t
;

2178 
TIMx
->
CR1
 |
TIM_OPMode
;

2179 
	}
}

2199 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2202 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2203 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2204 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_TRGO
(
TIMx
, 
TIM_TRGOSour˚
));

2206 
TIMx
->
CR2
 &
CR2_MMS_Mask
;

2208 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2209 
	}
}

2223 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2226 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2227 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2229 
TIMx
->
SMCR
 &
SMCR_SMS_Mask
;

2231 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2232 
	}
}

2245 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2248 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2249 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2251 
TIMx
->
SMCR
 &
SMCR_MSM_Re£t
;

2254 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2255 
	}
}

2263 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2266 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2268 
TIMx
->
CNT
 = 
Cou¡î
;

2269 
	}
}

2277 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2280 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2282 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2283 
	}
}

2292 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2295 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2297 
TIMx
->
CCR1
 = 
Com∑ª1
;

2298 
	}
}

2307 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2310 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2312 
TIMx
->
CCR2
 = 
Com∑ª2
;

2313 
	}
}

2322 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2325 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2327 
TIMx
->
CCR3
 = 
Com∑ª3
;

2328 
	}
}

2337 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2340 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2342 
TIMx
->
CCR4
 = 
Com∑ª4
;

2343 
	}
}

2358 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2361 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2362 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2364 
TIMx
->
CCMR1
 &
CCMR_IC13PSC_Mask
;

2366 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2367 
	}
}

2382 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2385 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2386 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2388 
TIMx
->
CCMR1
 &
CCMR_IC24PSC_Mask
;

2390 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2391 
	}
}

2406 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2409 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2410 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2412 
TIMx
->
CCMR2
 &
CCMR_IC13PSC_Mask
;

2414 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2415 
	}
}

2430 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2433 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2434 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2436 
TIMx
->
CCMR2
 &
CCMR_IC24PSC_Mask
;

2438 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2439 
	}
}

2452 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2455 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2456 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2458 
TIMx
->
CR1
 &
CR1_CKD_Mask
;

2460 
TIMx
->
CR1
 |
TIM_CKD
;

2461 
	}
}

2469 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2472 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2474  
TIMx
->
CCR1
;

2475 
	}
}

2483 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2486 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2488  
TIMx
->
CCR2
;

2489 
	}
}

2497 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2500 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2502  
TIMx
->
CCR3
;

2503 
	}
}

2511 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2514 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2516  
TIMx
->
CCR4
;

2517 
	}
}

2524 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2527 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2529  
TIMx
->
CNT
;

2530 
	}
}

2537 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2540 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2542  
TIMx
->
PSC
;

2543 
	}
}

2564 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2566 
ITSètus
 
bô°©us
 = 
RESET
;

2568 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2569 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2570 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_FLAG
(
TIMx
, 
TIM_FLAG
));

2572 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2574 
bô°©us
 = 
SET
;

2578 
bô°©us
 = 
RESET
;

2580  
bô°©us
;

2581 
	}
}

2602 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2605 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2606 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIMx
, 
TIM_FLAG
));

2609 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2610 
	}
}

2628 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2630 
ITSètus
 
bô°©us
 = 
RESET
;

2631 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2633 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2634 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2635 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_IT
(
TIMx
, 
TIM_IT
));

2637 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2639 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2640 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2642 
bô°©us
 = 
SET
;

2646 
bô°©us
 = 
RESET
;

2648  
bô°©us
;

2649 
	}
}

2667 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2670 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2671 
	`as£π_∑øm
(
	`IS_TIM_PERIPH_IT
(
TIMx
, 
TIM_IT
));

2673 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2674 
	}
}

2696 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2697 
uöt16_t
 
TIM_ICFûãr
)

2699 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2701 
TIMx
->
CCER
 &
CCER_CC1E_Re£t
;

2702 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2703 
tmpc˚r
 = 
TIMx
->
CCER
;

2705 
tmpccmr1
 &
CCMR_CC13S_Mask
 & 
CCMR_IC13F_Mask
;

2706 
tmpccmr1
 |
TIM_ICSñe˘i⁄
 | (
uöt16_t
)(
TIM_ICFûãr
 << 4);

2708 
tmpc˚r
 &
CCER_CC1P_Re£t
;

2709 
tmpc˚r
 |
TIM_ICPﬁ¨ôy
 | 
CCER_CC1E_Së
;

2711 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2712 
TIMx
->
CCER
 = 
tmpc˚r
;

2713 
	}
}

2735 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2736 
uöt16_t
 
TIM_ICFûãr
)

2738 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2740 
TIMx
->
CCER
 &
CCER_CC2E_Re£t
;

2741 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2742 
tmpc˚r
 = 
TIMx
->
CCER
;

2743 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2745 
tmpccmr1
 &
CCMR_CC24S_Mask
 & 
CCMR_IC24F_Mask
;

2746 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2747 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2749 
tmpc˚r
 &
CCER_CC2P_Re£t
;

2750 
tmpc˚r
 |
tmp
 | 
CCER_CC2E_Së
;

2752 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2753 
TIMx
->
CCER
 = 
tmpc˚r
;

2754 
	}
}

2776 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2777 
uöt16_t
 
TIM_ICFûãr
)

2779 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2781 
TIMx
->
CCER
 &
CCER_CC3E_Re£t
;

2782 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2783 
tmpc˚r
 = 
TIMx
->
CCER
;

2784 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2786 
tmpccmr2
 &
CCMR_CC13S_Mask
 & 
CCMR_IC13F_Mask
;

2787 
tmpccmr2
 |
TIM_ICSñe˘i⁄
 | (
uöt16_t
)(
TIM_ICFûãr
 << 4);

2789 
tmpc˚r
 &
CCER_CC3P_Re£t
;

2790 
tmpc˚r
 |
tmp
 | 
CCER_CC3E_Së
;

2792 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2793 
TIMx
->
CCER
 = 
tmpc˚r
;

2794 
	}
}

2816 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2817 
uöt16_t
 
TIM_ICFûãr
)

2819 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2821 
TIMx
->
CCER
 &
CCER_CC4E_Re£t
;

2822 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2823 
tmpc˚r
 = 
TIMx
->
CCER
;

2824 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2826 
tmpccmr2
 &
CCMR_CC24S_Mask
 & 
CCMR_IC24F_Mask
;

2827 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8Ë| (uöt16_t)(
TIM_ICFûãr
 << 12);

2829 
tmpc˚r
 &
CCER_CC4P_Re£t
;

2830 
tmpc˚r
 |
tmp
 | 
CCER_CC4E_Së
;

2832 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2833 
TIMx
->
CCER
 = 
tmpc˚r
 ;

2834 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_usart.c

22 
	~"°m32f10x_ußπ.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

48 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

51 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

54 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

55 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

56 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

57 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

58 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

61 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

62 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

65 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

66 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

67 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

70 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

71 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

74 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

75 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

78 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

79 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

82 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

83 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

86 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

87 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

88 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

89 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

90 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

132 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

135 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

136 *(
uöt32_t
*)&
USARTx
)

138 
USART1_BASE
:

139 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

142 
USART2_BASE
:

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

146 
USART3_BASE
:

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

151 
UART4_BASE
:

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

156 
UART5_BASE
:

157 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

163 
	}
}

176 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

178 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

179 
uöt32_t
 
öãgîdividî
 = 0x00;

180 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

181 
uöt32_t
 
ußπxba£
 = 0;

182 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

184 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

185 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

186 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

187 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

188 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

189 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

190 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

192 
	`as£π_∑øm
(
	`IS_USART_PERIPH_HFC
(
USARTx
, 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

194 
ußπxba£
 = (*(
uöt32_t
*)&
USARTx
);

196 
tm¥eg
 = 
USARTx
->
CR2
;

198 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

201 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

204 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

206 
tm¥eg
 = 
USARTx
->
CR1
;

208 
tm¥eg
 &
CR1_CLEAR_Mask
;

213 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

214 
USART_InôSåu˘
->
USART_Mode
;

216 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

218 
tm¥eg
 = 
USARTx
->
CR3
;

220 
tm¥eg
 &
CR3_CLEAR_Mask
;

223 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

225 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

228 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

229 i‡(
ußπxba£
 =
USART1_BASE
)

231 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

235 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

238 
öãgîdividî
 = ((0x19 * 
≠b˛ock
Ë/ (0x04 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

239 
tm¥eg
 = (
öãgîdividî
 / 0x64) << 0x04;

241 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (0x64 * (
tm¥eg
 >> 0x04));

242 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 0x10Ë+ 0x32Ë/ 0x64)Ë& ((
uöt8_t
)0x0F);

244 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

245 
	}
}

253 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

256 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

257 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

258 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

259 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

260 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

261 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

262 
	}
}

274 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

276 
uöt32_t
 
tm¥eg
 = 0x00;

278 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

279 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

280 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

281 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

282 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

285 
tm¥eg
 = 
USARTx
->
CR2
;

287 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

293 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

294 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

296 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

297 
	}
}

305 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

308 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

309 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

310 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

311 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

312 
	}
}

323 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 i‡(
NewSèã
 !
DISABLE
)

332 
USARTx
->
CR1
 |
CR1_UE_Së
;

337 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

339 
	}
}

364 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

366 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

367 
uöt32_t
 
ußπxba£
 = 0x00;

369 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

370 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

371 
	`as£π_∑øm
(
	`IS_USART_PERIPH_IT
(
USARTx
, 
USART_IT
));

372 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

373 
ußπxba£
 = (*(
uöt32_t
*)&(
USARTx
));

375 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

377 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

378 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

380 i‡(
ußπªg
 == 0x01)

382 
ußπxba£
 += 0x0C;

384 i‡(
ußπªg
 == 0x02)

386 
ußπxba£
 += 0x10;

390 
ußπxba£
 += 0x14;

392 i‡(
NewSèã
 !
DISABLE
)

394 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

398 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

400 
	}
}

416 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

419 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

420 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

422 i‡(
NewSèã
 !
DISABLE
)

426 
USARTx
->
CR3
 |
USART_DMAReq
;

432 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

434 
	}
}

444 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

447 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

448 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

451 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

453 
USARTx
->
CR2
 |
USART_Addªss
;

454 
	}
}

467 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

470 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

471 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

473 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

474 
USARTx
->
CR1
 |
USART_WakeUp
;

475 
	}
}

486 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

489 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

490 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

492 i‡(
NewSèã
 !
DISABLE
)

495 
USARTx
->
CR1
 |
CR1_RWU_Së
;

500 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

502 
	}
}

516 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

519 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

520 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

522 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

523 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

524 
	}
}

535 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

549 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

551 
	}
}

561 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

564 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

565 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

568 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

569 
	}
}

578 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

581 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

584  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

585 
	}
}

594 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

597 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

600 
USARTx
->
CR1
 |
CR1_SBK_Së
;

601 
	}
}

611 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

614 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

617 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

619 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

620 
	}
}

631 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

634 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

637 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

639 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

640 
	}
}

651 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

654 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

655 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

656 i‡(
NewSèã
 !
DISABLE
)

659 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

664 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

666 
	}
}

677 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

680 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

681 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

682 i‡(
NewSèã
 !
DISABLE
)

685 
USARTx
->
CR3
 |
CR3_NACK_Së
;

690 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

692 
	}
}

703 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

706 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

707 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

709 i‡(
NewSèã
 !
DISABLE
)

712 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

717 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

719 
	}
}

732 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

735 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

736 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

738 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

739 
USARTx
->
CR3
 |
USART_IrDAMode
;

740 
	}
}

751 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

754 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

755 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

757 i‡(
NewSèã
 !
DISABLE
)

760 
USARTx
->
CR3
 |
CR3_IREN_Së
;

765 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

767 
	}
}

788 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

790 
FœgSètus
 
bô°©us
 = 
RESET
;

792 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

793 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

794 
	`as£π_∑øm
(
	`IS_USART_PERIPH_FLAG
(
USARTx
, 
USART_FLAG
));

795 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

797 
bô°©us
 = 
SET
;

801 
bô°©us
 = 
RESET
;

803  
bô°©us
;

804 
	}
}

832 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

835 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

836 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

837 
	`as£π_∑øm
(
	`IS_USART_PERIPH_FLAG
(
USARTx
, 
USART_FLAG
));

839 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

840 
	}
}

861 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

863 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

864 
ITSètus
 
bô°©us
 = 
RESET
;

866 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

867 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

868 
	`as£π_∑øm
(
	`IS_USART_PERIPH_IT
(
USARTx
, 
USART_IT
));

871 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

873 
ômask
 = 
USART_IT
 & 
IT_Mask
;

874 
ômask
 = (
uöt32_t
)0x01 << itmask;

876 i‡(
ußπªg
 == 0x01)

878 
ômask
 &
USARTx
->
CR1
;

880 i‡(
ußπªg
 == 0x02)

882 
ômask
 &
USARTx
->
CR2
;

886 
ômask
 &
USARTx
->
CR3
;

889 
bôpos
 = 
USART_IT
 >> 0x08;

890 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

891 
bôpos
 &
USARTx
->
SR
;

892 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

894 
bô°©us
 = 
SET
;

898 
bô°©us
 = 
RESET
;

901  
bô°©us
;

902 
	}
}

931 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

933 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

935 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

936 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

937 
	`as£π_∑øm
(
	`IS_USART_PERIPH_IT
(
USARTx
, 
USART_IT
));

939 
bôpos
 = 
USART_IT
 >> 0x08;

940 
ômask
 = (
uöt16_t
)((uöt16_t)0x01 << 
bôpos
);

941 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

942 
	}
}

	@STM32F103Lib/FWlib/src/stm32f10x_wwdg.c

22 
	~"°m32f10x_wwdg.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

50 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

51 
	#EWI_BôNumbî
 0x09

	)

52 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

57 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

60 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

61 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

62 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

102 
	$WWDG_DeInô
()

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

106 
	}
}

118 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

120 
uöt32_t
 
tm¥eg
 = 0;

122 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

124 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

126 
tm¥eg
 |
WWDG_PªsˇÀr
;

128 
WWDG
->
CFR
 = 
tm¥eg
;

129 
	}
}

138 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

140 
uöt32_t
 
tm¥eg
 = 0;

142 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

144 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

146 
tm¥eg
 |
WödowVÆue
 & 
BIT_Mask
;

148 
WWDG
->
CFR
 = 
tm¥eg
;

149 
	}
}

156 
	$WWDG_E«bÀIT
()

158 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

159 
	}
}

167 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

170 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

173 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

174 
	}
}

182 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

185 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

186 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

187 
	}
}

194 
FœgSètus
 
	$WWDG_GëFœgSètus
()

196  (
FœgSètus
)(
WWDG
->
SR
);

197 
	}
}

204 
	$WWDG_CÀ¨Fœg
()

206 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

207 
	}
}

	@STM32F103Lib/MDK/Common/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

27 
	~"°m32f10x_adc.h
"

33 
	~"°m32f10x_dma.h
"

35 
	~"°m32f10x_Êash.h
"

37 
	~"°m32f10x_gpio.h
"

41 
	~"°m32f10x_rcc.h
"

45 
	~"°m32f10x_tim.h
"

48 
	~"misc.h
"

49 
	~"°m32f10x_ô.h
"

57 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
130
5672
ChillerFWlib/USER/STM32FW/inc/misc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_adc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_bkp.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_can.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_crc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_dac.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_dbgmcu.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_dma.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_exti.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_flash.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_fsmc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_gpio.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_i2c.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_it.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_iwdg.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_pwr.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_rcc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_rtc.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_sdio.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_spi.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_tim.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_usart.h
ChillerFWlib/USER/STM32FW/inc/stm32f10x_wwdg.h
ChillerFWlib/USER/STM32FW/stm32f10x.h
ChillerFWlib/USER/STM32FW/stm32f10x_conf.h
ChillerFWlib/USER/inc/ChillerFWincs.h
ChillerFWlib/USER/inc/Delay_Timer.h
ChillerFWlib/USER/inc/J12864.h
ChillerFWlib/USER/inc/STM32Flash.h
ChillerFWlib/USER/inc/Timer.h
ChillerFWlib/USER/src/Delay_Timer.c
ChillerFWlib/USER/src/J12864.c
ChillerFWlib/USER/src/STM32Flash.c
ChillerFWlib/USER/src/Timer.c
ChillerMonitorRev2.0/CMSIS/core_cm3.c
ChillerMonitorRev2.0/CMSIS/core_cm3.h
ChillerMonitorRev2.0/CMSIS/system_stm32f10x.c
ChillerMonitorRev2.0/CMSIS/system_stm32f10x.h
ChillerMonitorRev2.0/MDK/APP/main.c
ChillerMonitorRev2.0/USER/inc/Display.h
ChillerMonitorRev2.0/USER/inc/IO_Process.h
ChillerMonitorRev2.0/USER/inc/Include.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/misc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_adc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_bkp.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_can.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_crc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dac.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dbgmcu.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_dma.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_exti.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_flash.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_fsmc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_gpio.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_i2c.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_it.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_iwdg.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_pwr.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_rcc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_rtc.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_sdio.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_spi.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_tim.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_usart.h
ChillerMonitorRev2.0/USER/inc/STM32FW/inc/stm32f10x_wwdg.h
ChillerMonitorRev2.0/USER/inc/STM32FW/stm32f10x.h
ChillerMonitorRev2.0/USER/inc/STM32FW/stm32f10x_conf.h
ChillerMonitorRev2.0/USER/inc/Tempra_AD.h
ChillerMonitorRev2.0/USER/inc/flash.h
ChillerMonitorRev2.0/USER/inc/inc/ChillerFWincs.h
ChillerMonitorRev2.0/USER/inc/inc/Delay_Timer.h
ChillerMonitorRev2.0/USER/inc/inc/J12864.h
ChillerMonitorRev2.0/USER/inc/inc/STM32Flash.h
ChillerMonitorRev2.0/USER/inc/inc/Timer.h
ChillerMonitorRev2.0/USER/inc/key.h
ChillerMonitorRev2.0/USER/src/Display.c
ChillerMonitorRev2.0/USER/src/IO_Process.c
ChillerMonitorRev2.0/USER/src/Tempra_AD.c
ChillerMonitorRev2.0/USER/src/flash.c
ChillerMonitorRev2.0/USER/src/key.c
STM32F103Lib/FWlib/inc/misc.h
STM32F103Lib/FWlib/inc/stm32f10x_adc.h
STM32F103Lib/FWlib/inc/stm32f10x_bkp.h
STM32F103Lib/FWlib/inc/stm32f10x_can.h
STM32F103Lib/FWlib/inc/stm32f10x_crc.h
STM32F103Lib/FWlib/inc/stm32f10x_dac.h
STM32F103Lib/FWlib/inc/stm32f10x_dbgmcu.h
STM32F103Lib/FWlib/inc/stm32f10x_dma.h
STM32F103Lib/FWlib/inc/stm32f10x_exti.h
STM32F103Lib/FWlib/inc/stm32f10x_flash.h
STM32F103Lib/FWlib/inc/stm32f10x_fsmc.h
STM32F103Lib/FWlib/inc/stm32f10x_gpio.h
STM32F103Lib/FWlib/inc/stm32f10x_i2c.h
STM32F103Lib/FWlib/inc/stm32f10x_it.h
STM32F103Lib/FWlib/inc/stm32f10x_iwdg.h
STM32F103Lib/FWlib/inc/stm32f10x_pwr.h
STM32F103Lib/FWlib/inc/stm32f10x_rcc.h
STM32F103Lib/FWlib/inc/stm32f10x_rtc.h
STM32F103Lib/FWlib/inc/stm32f10x_sdio.h
STM32F103Lib/FWlib/inc/stm32f10x_spi.h
STM32F103Lib/FWlib/inc/stm32f10x_tim.h
STM32F103Lib/FWlib/inc/stm32f10x_usart.h
STM32F103Lib/FWlib/inc/stm32f10x_wwdg.h
STM32F103Lib/FWlib/src/misc.c
STM32F103Lib/FWlib/src/stm32f10x_adc.c
STM32F103Lib/FWlib/src/stm32f10x_bkp.c
STM32F103Lib/FWlib/src/stm32f10x_can.c
STM32F103Lib/FWlib/src/stm32f10x_crc.c
STM32F103Lib/FWlib/src/stm32f10x_dac.c
STM32F103Lib/FWlib/src/stm32f10x_dbgmcu.c
STM32F103Lib/FWlib/src/stm32f10x_dma.c
STM32F103Lib/FWlib/src/stm32f10x_exti.c
STM32F103Lib/FWlib/src/stm32f10x_flash.c
STM32F103Lib/FWlib/src/stm32f10x_fsmc.c
STM32F103Lib/FWlib/src/stm32f10x_gpio.c
STM32F103Lib/FWlib/src/stm32f10x_i2c.c
STM32F103Lib/FWlib/src/stm32f10x_it.c
STM32F103Lib/FWlib/src/stm32f10x_iwdg.c
STM32F103Lib/FWlib/src/stm32f10x_pwr.c
STM32F103Lib/FWlib/src/stm32f10x_rcc.c
STM32F103Lib/FWlib/src/stm32f10x_rtc.c
STM32F103Lib/FWlib/src/stm32f10x_sdio.c
STM32F103Lib/FWlib/src/stm32f10x_spi.c
STM32F103Lib/FWlib/src/stm32f10x_tim.c
STM32F103Lib/FWlib/src/stm32f10x_usart.c
STM32F103Lib/FWlib/src/stm32f10x_wwdg.c
STM32F103Lib/MDK/Common/stm32f10x_conf.h
/usr/include/stdint.h
/usr/include/features.h
/usr/include/stdc-predef.h
